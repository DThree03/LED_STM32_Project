
LED_STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08008aa8  08008aa8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008aa8  08008aa8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000090  08008b3c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08008b3c  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d35d  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d7  00000000  00000000  0002d412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00030b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b4  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113f1  00000000  00000000  0004aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d14b  00000000  00000000  0005c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  000e9478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	080088ac 	.word	0x080088ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	080088ac 	.word	0x080088ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__aeabi_f2iz>:
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a9c:	d30f      	bcc.n	8000abe <__aeabi_f2iz+0x2a>
 8000a9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_f2iz+0x30>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab8:	bf18      	it	ne
 8000aba:	4240      	negne	r0, r0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac8:	d101      	bne.n	8000ace <__aeabi_f2iz+0x3a>
 8000aca:	0242      	lsls	r2, r0, #9
 8000acc:	d105      	bne.n	8000ada <__aeabi_f2iz+0x46>
 8000ace:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ad2:	bf08      	it	eq
 8000ad4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <GetPage>:
#include "string.h"
#include "stdio.h"

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e016      	b.n	8000b1c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000af4:	3301      	adds	r3, #1
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d20b      	bcs.n	8000b16 <GetPage+0x36>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b04:	029b      	lsls	r3, r3, #10
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d304      	bcc.n	8000b16 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	e006      	b.n	8000b24 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	dde5      	ble.n	8000aee <GetPage+0xe>
	  }
  }

  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000b42:	f004 fdaf 	bl	80056a4 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffca 	bl	8000ae0 <GetPage>
 8000b4c:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000b5a:	69f8      	ldr	r0, [r7, #28]
 8000b5c:	f7ff ffc0 	bl	8000ae0 <GetPage>
 8000b60:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	0a9b      	lsrs	r3, r3, #10
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b7a:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b84:	f004 fe80 	bl	8005888 <HAL_FLASHEx_Erase>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d01f      	beq.n	8000bce <Flash_Write_Data+0x9e>
	{
	/*Error occurred while page erase.*/
		return HAL_FLASH_GetError ();
 8000b8e:	f004 fdbf 	bl	8005710 <HAL_FLASH_GetError>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e022      	b.n	8000bdc <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	462b      	mov	r3, r5
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	2002      	movs	r0, #2
 8000bae:	f004 fd09 	bl	80055c4 <HAL_FLASH_Program>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d106      	bne.n	8000bc6 <Flash_Write_Data+0x96>
		{
			StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	e003      	b.n	8000bce <Flash_Write_Data+0x9e>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError ();
 8000bc6:	f004 fda3 	bl	8005710 <HAL_FLASH_GetError>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e006      	b.n	8000bdc <Flash_Write_Data+0xac>
	while (sofar<numberofwords)
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dbdf      	blt.n	8000b96 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000bd6:	f004 fd8b 	bl	80056f0 <HAL_FLASH_Lock>

	return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	200000ac 	.word	0x200000ac

08000be8 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3304      	adds	r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	80fa      	strh	r2, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d000      	beq.n	8000c16 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c14:	e7ef      	b.n	8000bf6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000c16:	bf00      	nop
	}
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <Led7TurnTime_Display>:
static void Led7RoundTime_Write(unsigned char oneByte);
static void Led7RoundTime_PWM(unsigned char oneByte);

/* Public function -----------------------------------------------------------*/
void Led7TurnTime_Display(int led7ch, int led7dv, int led_num_left, int led_num_right)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED[4] = led7ch;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c38:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED[5] = led7dv;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c40:	715a      	strb	r2, [r3, #5]

	VALUE_SHOW_LED[2] = led_num_right;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c48:	709a      	strb	r2, [r3, #2]
	VALUE_SHOW_LED[3] = led_num_left;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c50:	70da      	strb	r2, [r3, #3]

	Led7TurnTime_Start();
 8000c52:	f000 f941 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(TM1637_I2C_COMM1);
 8000c56:	2040      	movs	r0, #64	; 0x40
 8000c58:	f000 f95e 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c5c:	f000 f99e 	bl	8000f9c <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 8000c60:	f000 f9ca 	bl	8000ff8 <Led7TurnTime_Stop>

	Led7TurnTime_Start();
 8000c64:	f000 f938 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(0xC0);
 8000c68:	20c0      	movs	r0, #192	; 0xc0
 8000c6a:	f000 f955 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c6e:	f000 f995 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[0]]);
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000c7a:	5c9b      	ldrb	r3, [r3, r2]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f94b 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c82:	f000 f98b 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[1]]);
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f941 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c96:	f000 f981 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[2]]);
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f937 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000caa:	f000 f977 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED_1[VALUE_SHOW_LED[3]]);
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cb0:	78db      	ldrb	r3, [r3, #3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <Led7TurnTime_Display+0xe0>)
 8000cb6:	5c9b      	ldrb	r3, [r3, r2]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f92d 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000cbe:	f000 f96d 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[4]]);
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <Led7TurnTime_Display+0xe4>)
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f923 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000cd2:	f000 f963 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[5]]);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cd8:	795b      	ldrb	r3, [r3, #5]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <Led7TurnTime_Display+0xe4>)
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f919 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000ce6:	f000 f959 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Stop();
 8000cea:	f000 f985 	bl	8000ff8 <Led7TurnTime_Stop>

	Led7TurnTime_PWM(PWM8);
 8000cee:	2087      	movs	r0, #135	; 0x87
 8000cf0:	f000 f9ae 	bl	8001050 <Led7TurnTime_PWM>

	//__enable_irq();
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	080089c8 	.word	0x080089c8
 8000d04:	080089d4 	.word	0x080089d4
 8000d08:	080089b8 	.word	0x080089b8

08000d0c <Led7HitCnt_Display>:

void Led7HitCnt_Display(int slc_ch, int slc_dv, int sct_ch, int sct_dv)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED_2[3] = slc_ch;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d20:	70da      	strb	r2, [r3, #3]
	VALUE_SHOW_LED_2[4] = slc_dv;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d28:	711a      	strb	r2, [r3, #4]

	VALUE_SHOW_LED_2[1] = sct_ch;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d30:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_2[2] = sct_dv;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d38:	709a      	strb	r2, [r3, #2]

	Led7HitCnt_Start();
 8000d3a:	f000 f99f 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(TM1637_I2C_COMM1);
 8000d3e:	2040      	movs	r0, #64	; 0x40
 8000d40:	f000 f9bc 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d44:	f000 f9fc 	bl	8001140 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8000d48:	f000 fa28 	bl	800119c <Led7HitCnt_Stop>

	Led7HitCnt_Start();
 8000d4c:	f000 f996 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(0xC0);
 8000d50:	20c0      	movs	r0, #192	; 0xc0
 8000d52:	f000 f9b3 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d56:	f000 f9f3 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[0]]);
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f9a9 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d6a:	f000 f9e9 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[1]]);
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d76:	5c9b      	ldrb	r3, [r3, r2]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f99f 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d7e:	f000 f9df 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[2]]);
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d8a:	5c9b      	ldrb	r3, [r3, r2]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f995 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d92:	f000 f9d5 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[3]]);
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d98:	78db      	ldrb	r3, [r3, #3]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f98b 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000da6:	f000 f9cb 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[4]]);
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000db2:	5c9b      	ldrb	r3, [r3, r2]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f981 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000dba:	f000 f9c1 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[5]]);
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000dc6:	5c9b      	ldrb	r3, [r3, r2]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f977 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000dce:	f000 f9b7 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Stop();
 8000dd2:	f000 f9e3 	bl	800119c <Led7HitCnt_Stop>

	Led7HitCnt_PWM(PWM8);
 8000dd6:	2087      	movs	r0, #135	; 0x87
 8000dd8:	f000 fa0c 	bl	80011f4 <Led7HitCnt_PWM>

	//__enable_irq();
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000008 	.word	0x20000008
 8000de8:	080089e0 	.word	0x080089e0

08000dec <Led7RoundTime_Display>:


void Led7RoundTime_Display(int h_ch, int h_dv, int m_ch, int m_dv, uint8_t led)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED_3[4] = h_ch;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e00:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED_3[3] = h_dv;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e08:	70da      	strb	r2, [r3, #3]

	VALUE_SHOW_LED_3[1] = m_ch;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e10:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_3[0] = m_dv;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e18:	701a      	strb	r2, [r3, #0]

	VALUE_SHOW_LED_3[2] = 10 + led;
 8000e1a:	7e3b      	ldrb	r3, [r7, #24]
 8000e1c:	330a      	adds	r3, #10
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e22:	709a      	strb	r2, [r3, #2]

	Led7RoundTime_Start();
 8000e24:	f000 f9fc 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(TM1637_I2C_COMM1);
 8000e28:	2040      	movs	r0, #64	; 0x40
 8000e2a:	f000 fa15 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e2e:	f000 fa4f 	bl	80012d0 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 8000e32:	f000 fa77 	bl	8001324 <Led7RoundTime_Stop>

	Led7RoundTime_Start();
 8000e36:	f000 f9f3 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(0xC0);
 8000e3a:	20c0      	movs	r0, #192	; 0xc0
 8000e3c:	f000 fa0c 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e40:	f000 fa46 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[0]]);
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e4c:	5c9b      	ldrb	r3, [r3, r2]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fa02 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e54:	f000 fa3c 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[1]]);
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e60:	5c9b      	ldrb	r3, [r3, r2]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9f8 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e68:	f000 fa32 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[2]]);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e6e:	789b      	ldrb	r3, [r3, #2]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f9ee 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e7c:	f000 fa28 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[3]]);
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f9e4 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e90:	f000 fa1e 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[4]]);
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f9da 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000ea4:	f000 fa14 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[5]]);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9d0 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000eb8:	f000 fa0a 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Stop();
 8000ebc:	f000 fa32 	bl	8001324 <Led7RoundTime_Stop>

	Led7RoundTime_PWM(PWM8);
 8000ec0:	2087      	movs	r0, #135	; 0x87
 8000ec2:	f000 fa57 	bl	8001374 <Led7RoundTime_PWM>

	//__enable_irq();
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	080089ec 	.word	0x080089ec

08000ed8 <Led7TurnTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7TurnTime_Start(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	TM1637_CLK1_ON;
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000ee4:	f004 ff13 	bl	8005d0e <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8000ee8:	2111      	movs	r1, #17
 8000eea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eee:	f000 fa57 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO1_ON;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000efa:	f004 ff08 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 fa82 	bl	8001408 <Delay_us>
	TM1637_DIO1_OFF;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4802      	ldr	r0, [pc, #8]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000f0c:	f004 feff 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <Led7TurnTime_Write>:

static void Led7TurnTime_Write(unsigned char oneByte)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8000f22:	2111      	movs	r1, #17
 8000f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f28:	f000 fa3a 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e029      	b.n	8000f86 <Led7TurnTime_Write+0x6e>
	{
		TM1637_CLK1_OFF;
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f3a:	f004 fee8 	bl	8005d0e <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <Led7TurnTime_Write+0x3e>
		{
		  TM1637_DIO1_ON;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f50:	f004 fedd 	bl	8005d0e <HAL_GPIO_WritePin>
 8000f54:	e005      	b.n	8000f62 <Led7TurnTime_Write+0x4a>
		}
		else
		{
		  TM1637_DIO1_OFF;
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f5e:	f004 fed6 	bl	8005d0e <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 fa50 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK1_ON;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f76:	f004 feca 	bl	8005d0e <HAL_GPIO_WritePin>
		Delay_us(3);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fa44 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	ddd2      	ble.n	8000f32 <Led7TurnTime_Write+0x1a>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <Led7TurnTime_Cask>:

static uint8_t Led7TurnTime_Cask(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fa8:	f004 feb1 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(5); //
 8000fac:	2005      	movs	r0, #5
 8000fae:	f000 fa2b 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_INPUT);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fb8:	f000 f9f2 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO1_READ);
	if(TM1637_DIO1_READ)
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fc2:	f004 fe8d 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <Led7TurnTime_Cask+0x34>
		return 0xFF;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	e00f      	b.n	8000ff0 <Led7TurnTime_Cask+0x54>
	TM1637_CLK1_ON;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fd8:	f004 fe99 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f000 fa13 	bl	8001408 <Delay_us>
	TM1637_CLK1_OFF;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fea:	f004 fe90 	bl	8005d0e <HAL_GPIO_WritePin>
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <Led7TurnTime_Stop>:

static void Led7TurnTime_Stop(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001004:	f004 fe83 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001008:	2002      	movs	r0, #2
 800100a:	f000 f9fd 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 800100e:	2111      	movs	r1, #17
 8001010:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001014:	f000 f9c4 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO1_OFF;
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001020:	f004 fe75 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f9ef 	bl	8001408 <Delay_us>
	TM1637_CLK1_ON;
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001032:	f004 fe6c 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f000 f9e6 	bl	8001408 <Delay_us>
	TM1637_DIO1_ON;
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001044:	f004 fe63 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010c00 	.word	0x40010c00

08001050 <Led7TurnTime_PWM>:

static void Led7TurnTime_PWM(unsigned char PWM)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	Led7TurnTime_Start();
 800105a:	f7ff ff3d 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(PWM | Dis_ON);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff56 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 800106c:	f7ff ff96 	bl	8000f9c <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 8001070:	f7ff ffc2 	bl	8000ff8 <Led7TurnTime_Stop>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Led7HitCnt_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7HitCnt_Start(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	TM1637_CLK2_ON;
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 8001088:	f004 fe41 	bl	8005d0e <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 800108c:	2111      	movs	r1, #17
 800108e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001092:	f000 f985 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO2_ON;
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 800109e:	f004 fe36 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f000 f9b0 	bl	8001408 <Delay_us>
	TM1637_DIO2_OFF;
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 80010b0:	f004 fe2d 	bl	8005d0e <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010c00 	.word	0x40010c00

080010bc <Led7HitCnt_Write>:

static void Led7HitCnt_Write(unsigned char oneByte)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 80010c6:	2111      	movs	r1, #17
 80010c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010cc:	f000 f968 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e029      	b.n	800112a <Led7HitCnt_Write+0x6e>
	{
		TM1637_CLK2_OFF;
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010dc:	4817      	ldr	r0, [pc, #92]	; (800113c <Led7HitCnt_Write+0x80>)
 80010de:	f004 fe16 	bl	8005d0e <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <Led7HitCnt_Write+0x3e>
		{
		  TM1637_DIO2_ON;
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f2:	4812      	ldr	r0, [pc, #72]	; (800113c <Led7HitCnt_Write+0x80>)
 80010f4:	f004 fe0b 	bl	8005d0e <HAL_GPIO_WritePin>
 80010f8:	e005      	b.n	8001106 <Led7HitCnt_Write+0x4a>
		}
		else
		{
		  TM1637_DIO2_OFF;
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <Led7HitCnt_Write+0x80>)
 8001102:	f004 fe04 	bl	8005d0e <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 f97e 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK2_ON;
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <Led7HitCnt_Write+0x80>)
 800111a:	f004 fdf8 	bl	8005d0e <HAL_GPIO_WritePin>
		Delay_us(3);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f972 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b07      	cmp	r3, #7
 800112e:	ddd2      	ble.n	80010d6 <Led7HitCnt_Write+0x1a>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010c00 	.word	0x40010c00

08001140 <Led7HitCnt_Cask>:

static uint8_t Led7HitCnt_Cask(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800114c:	f004 fddf 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(5); //
 8001150:	2005      	movs	r0, #5
 8001152:	f000 f959 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_INPUT);
 8001156:	2100      	movs	r1, #0
 8001158:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800115c:	f000 f920 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO2_READ);
	if(TM1637_DIO2_READ)
 8001160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <Led7HitCnt_Cask+0x58>)
 8001166:	f004 fdbb 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <Led7HitCnt_Cask+0x34>
		return 0xFF;
 8001170:	23ff      	movs	r3, #255	; 0xff
 8001172:	e00f      	b.n	8001194 <Led7HitCnt_Cask+0x54>
	TM1637_CLK2_ON;
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800117c:	f004 fdc7 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001180:	2002      	movs	r0, #2
 8001182:	f000 f941 	bl	8001408 <Delay_us>
	TM1637_CLK2_OFF;
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800118e:	f004 fdbe 	bl	8005d0e <HAL_GPIO_WritePin>
	return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <Led7HitCnt_Stop>:

static void Led7HitCnt_Stop(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011a8:	f004 fdb1 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 f92b 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 80011b2:	2111      	movs	r1, #17
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f000 f8f2 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO2_OFF;
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011c4:	f004 fda3 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 f91d 	bl	8001408 <Delay_us>
	TM1637_CLK2_ON;
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011d6:	f004 fd9a 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 f914 	bl	8001408 <Delay_us>
	TM1637_DIO2_ON;
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011e8:	f004 fd91 	bl	8005d0e <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <Led7HitCnt_PWM>:

static void Led7HitCnt_PWM(unsigned char PWM)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	Led7HitCnt_Start();
 80011fe:	f7ff ff3d 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(PWM | Dis_ON);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff56 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8001210:	f7ff ff96 	bl	8001140 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8001214:	f7ff ffc2 	bl	800119c <Led7HitCnt_Stop>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Led7RoundTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7RoundTime_Start(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	TM1637_CLK3_ON;
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <Led7RoundTime_Start+0x34>)
 800122a:	f004 fd70 	bl	8005d0e <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 800122e:	2111      	movs	r1, #17
 8001230:	2040      	movs	r0, #64	; 0x40
 8001232:	f000 f8b5 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO3_ON;
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <Led7RoundTime_Start+0x34>)
 800123c:	f004 fd67 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001240:	2002      	movs	r0, #2
 8001242:	f000 f8e1 	bl	8001408 <Delay_us>
	TM1637_DIO3_OFF;
 8001246:	2200      	movs	r2, #0
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <Led7RoundTime_Start+0x34>)
 800124c:	f004 fd5f 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010800 	.word	0x40010800

08001258 <Led7RoundTime_Write>:

static void Led7RoundTime_Write(unsigned char oneByte)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 8001262:	2111      	movs	r1, #17
 8001264:	2040      	movs	r0, #64	; 0x40
 8001266:	f000 f89b 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e025      	b.n	80012bc <Led7RoundTime_Write+0x64>
	{
		TM1637_CLK3_OFF;
 8001270:	2200      	movs	r2, #0
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	4815      	ldr	r0, [pc, #84]	; (80012cc <Led7RoundTime_Write+0x74>)
 8001276:	f004 fd4a 	bl	8005d0e <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <Led7RoundTime_Write+0x38>
		{
		  TM1637_DIO3_ON;
 8001284:	2201      	movs	r2, #1
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <Led7RoundTime_Write+0x74>)
 800128a:	f004 fd40 	bl	8005d0e <HAL_GPIO_WritePin>
 800128e:	e004      	b.n	800129a <Led7RoundTime_Write+0x42>
		}
		else
		{
		  TM1637_DIO3_OFF;
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <Led7RoundTime_Write+0x74>)
 8001296:	f004 fd3a 	bl	8005d0e <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f8b4 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK3_ON;
 80012a6:	2201      	movs	r2, #1
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <Led7RoundTime_Write+0x74>)
 80012ac:	f004 fd2f 	bl	8005d0e <HAL_GPIO_WritePin>
		Delay_us(3);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f8a9 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b07      	cmp	r3, #7
 80012c0:	ddd6      	ble.n	8001270 <Led7RoundTime_Write+0x18>
	}
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010800 	.word	0x40010800

080012d0 <Led7RoundTime_Cask>:

static uint8_t Led7RoundTime_Cask(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 80012d4:	2200      	movs	r2, #0
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <Led7RoundTime_Cask+0x50>)
 80012da:	f004 fd18 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(5); //
 80012de:	2005      	movs	r0, #5
 80012e0:	f000 f892 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_INPUT);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2040      	movs	r0, #64	; 0x40
 80012e8:	f000 f85a 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO3_READ);
	if(TM1637_DIO3_READ)
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <Led7RoundTime_Cask+0x50>)
 80012f0:	f004 fcf6 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <Led7RoundTime_Cask+0x2e>
		return 0xFF;
 80012fa:	23ff      	movs	r3, #255	; 0xff
 80012fc:	e00d      	b.n	800131a <Led7RoundTime_Cask+0x4a>
	TM1637_CLK3_ON;
 80012fe:	2201      	movs	r2, #1
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <Led7RoundTime_Cask+0x50>)
 8001304:	f004 fd03 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f000 f87d 	bl	8001408 <Delay_us>
	TM1637_CLK3_OFF;
 800130e:	2200      	movs	r2, #0
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <Led7RoundTime_Cask+0x50>)
 8001314:	f004 fcfb 	bl	8005d0e <HAL_GPIO_WritePin>
	return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010800 	.word	0x40010800

08001324 <Led7RoundTime_Stop>:

static void Led7RoundTime_Stop(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 8001328:	2200      	movs	r2, #0
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 800132e:	f004 fcee 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f000 f868 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 8001338:	2111      	movs	r1, #17
 800133a:	2040      	movs	r0, #64	; 0x40
 800133c:	f000 f830 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO3_OFF;
 8001340:	2200      	movs	r2, #0
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001346:	f004 fce2 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 800134a:	2002      	movs	r0, #2
 800134c:	f000 f85c 	bl	8001408 <Delay_us>
	TM1637_CLK3_ON;
 8001350:	2201      	movs	r2, #1
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001356:	f004 fcda 	bl	8005d0e <HAL_GPIO_WritePin>
	Delay_us(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f000 f854 	bl	8001408 <Delay_us>
	TM1637_DIO3_ON;
 8001360:	2201      	movs	r2, #1
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001366:	f004 fcd2 	bl	8005d0e <HAL_GPIO_WritePin>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800

08001374 <Led7RoundTime_PWM>:

static void Led7RoundTime_PWM(unsigned char PWM)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	Led7RoundTime_Start();
 800137e:	f7ff ff4f 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(PWM | Dis_ON);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff64 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8001390:	f7ff ff9e 	bl	80012d0 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 8001394:	f7ff ffc6 	bl	8001324 <Led7RoundTime_Stop>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <TM1637_GPIO_INIT>:


static void TM1637_GPIO_INIT(uint32_t Pin, uint32_t Mode)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = Pin;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = Mode;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	60fb      	str	r3, [r7, #12]
	if(Mode == GPIO_MODE_OUTPUT_OD){
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d102      	bne.n	80013cc <TM1637_GPIO_INIT+0x2c>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e001      	b.n	80013d0 <TM1637_GPIO_INIT+0x30>
	}
	else{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
	}
	if((Pin == IO1_Pin) || (Pin == IO2_Pin))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	d002      	beq.n	80013dc <TM1637_GPIO_INIT+0x3c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b80      	cmp	r3, #128	; 0x80
 80013da:	d106      	bne.n	80013ea <TM1637_GPIO_INIT+0x4a>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <TM1637_GPIO_INIT+0x60>)
 80013e4:	f004 faf8 	bl	80059d8 <HAL_GPIO_Init>
 80013e8:	e006      	b.n	80013f8 <TM1637_GPIO_INIT+0x58>
	else
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <TM1637_GPIO_INIT+0x64>)
 80013f2:	f004 faf1 	bl	80059d8 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010800 	.word	0x40010800
 8001404:	40010c00 	.word	0x40010c00

08001408 <Delay_us>:

static void Delay_us(unsigned long us) //nus ??
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  while(us--)
 8001410:	e01a      	b.n	8001448 <Delay_us+0x40>
  {
    __ASM volatile ("nop");
 8001412:	bf00      	nop
    __ASM volatile ("nop");
 8001414:	bf00      	nop
    __ASM volatile ("nop");
 8001416:	bf00      	nop
    __ASM volatile ("nop");
 8001418:	bf00      	nop
    __ASM volatile ("nop");
 800141a:	bf00      	nop

    __ASM volatile ("nop");
 800141c:	bf00      	nop
    __ASM volatile ("nop");
 800141e:	bf00      	nop
    __ASM volatile ("nop");
 8001420:	bf00      	nop
    __ASM volatile ("nop");
 8001422:	bf00      	nop
    __ASM volatile ("nop");
 8001424:	bf00      	nop

    __ASM volatile ("nop");
 8001426:	bf00      	nop
    __ASM volatile ("nop");
 8001428:	bf00      	nop
    __ASM volatile ("nop");
 800142a:	bf00      	nop
    __ASM volatile ("nop");
 800142c:	bf00      	nop
    __ASM volatile ("nop");
 800142e:	bf00      	nop

    __ASM volatile ("nop");
 8001430:	bf00      	nop
    __ASM volatile ("nop");
 8001432:	bf00      	nop
    __ASM volatile ("nop");
 8001434:	bf00      	nop
    __ASM volatile ("nop");
 8001436:	bf00      	nop
    __ASM volatile ("nop");
 8001438:	bf00      	nop

    __ASM volatile ("nop");
 800143a:	bf00      	nop
    __ASM volatile ("nop");
 800143c:	bf00      	nop
    __ASM volatile ("nop");
 800143e:	bf00      	nop
    __ASM volatile ("nop");
 8001440:	bf00      	nop
    __ASM volatile ("nop");
 8001442:	bf00      	nop
    __ASM volatile ("nop");
 8001444:	bf00      	nop
    __ASM volatile ("nop");
 8001446:	bf00      	nop
  while(us--)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1df      	bne.n	8001412 <Delay_us+0xa>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <Task_Read_Cfg>:
static uint8_t get_next_user(uint8_t current_play);
static void update_rand_addr(void);

/* Public function -----------------------------------------------------------*/
void Task_Read_Cfg(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	Flash_Read_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 8001464:	2203      	movs	r2, #3
 8001466:	4912      	ldr	r1, [pc, #72]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <Task_Read_Cfg+0x54>)
 800146a:	f7ff fbbd 	bl	8000be8 <Flash_Read_Data>
	if(PlayCfg.Parameter.playing_mode == 0xFF)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d117      	bne.n	80014a6 <Task_Read_Cfg+0x46>
	{
		PlayCfg.Parameter.start_point = BEGIN_POINT;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001478:	221e      	movs	r2, #30
 800147a:	805a      	strh	r2, [r3, #2]
		PlayCfg.Parameter.turn_time_s = TURN_TIME_S;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <Task_Read_Cfg+0x50>)
 800147e:	222d      	movs	r2, #45	; 0x2d
 8001480:	809a      	strh	r2, [r3, #4]
		PlayCfg.Parameter.rount_time_s = ROUND_TIME_S;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001484:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001488:	80da      	strh	r2, [r3, #6]
		PlayCfg.Parameter.playing_mode = LAST_MODE;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <Task_Read_Cfg+0x50>)
 800148c:	2204      	movs	r2, #4
 800148e:	701a      	strb	r2, [r3, #0]
		PlayCfg.Parameter.startup_time_m = STARTUP_TIME_M;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001492:	223c      	movs	r2, #60	; 0x3c
 8001494:	705a      	strb	r2, [r3, #1]
		PlayCfg.Parameter.mode_signed = MODE_SIGN;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	721a      	strb	r2, [r3, #8]
		Flash_Write_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 800149c:	2203      	movs	r2, #3
 800149e:	4904      	ldr	r1, [pc, #16]	; (80014b0 <Task_Read_Cfg+0x50>)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <Task_Read_Cfg+0x54>)
 80014a2:	f7ff fb45 	bl	8000b30 <Flash_Write_Data>
	}
	pCfg_1st_state_Flag = 1;
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <Task_Read_Cfg+0x58>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000d0 	.word	0x200000d0
 80014b4:	0801fc00 	.word	0x0801fc00
 80014b8:	20000017 	.word	0x20000017

080014bc <Task_Save_Cfg>:

void Task_Save_Cfg(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	Flash_Write_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 80014c0:	2203      	movs	r2, #3
 80014c2:	4903      	ldr	r1, [pc, #12]	; (80014d0 <Task_Save_Cfg+0x14>)
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <Task_Save_Cfg+0x18>)
 80014c6:	f7ff fb33 	bl	8000b30 <Flash_Write_Data>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000d0 	.word	0x200000d0
 80014d4:	0801fc00 	.word	0x0801fc00

080014d8 <Task_Mode_Cfg>:

void Task_Mode_Cfg(void)
{
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
	static eUSER_CFG_STATE cfg_state_t = E_CFG_START_POINT;
	//static uint8_t pCfg_1st_state_Flag = 1;
	switch(cfg_state_t)
 80014de:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <Task_Mode_Cfg+0x298>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	f200 87b0 	bhi.w	8002448 <Task_Mode_Cfg+0xf70>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <Task_Mode_Cfg+0x18>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	08001865 	.word	0x08001865
 80014f8:	08001c99 	.word	0x08001c99
 80014fc:	08002069 	.word	0x08002069
	{
		case E_CFG_START_POINT:
		{
			if(pCfg_1st_state_Flag){
 8001500:	4b9c      	ldr	r3, [pc, #624]	; (8001774 <Task_Mode_Cfg+0x29c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d02c      	beq.n	8001562 <Task_Mode_Cfg+0x8a>
				pCfg_1st_state_Flag = 0;
 8001508:	4b9a      	ldr	r3, [pc, #616]	; (8001774 <Task_Mode_Cfg+0x29c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
				//Send Display and Blink Start point
				Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 800150e:	4b9a      	ldr	r3, [pc, #616]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 8001510:	885b      	ldrh	r3, [r3, #2]
 8001512:	4a9a      	ldr	r2, [pc, #616]	; (800177c <Task_Mode_Cfg+0x2a4>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	095b      	lsrs	r3, r3, #5
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2d8      	uxtb	r0, r3
 800151e:	4b96      	ldr	r3, [pc, #600]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 8001520:	885b      	ldrh	r3, [r3, #2]
 8001522:	4a96      	ldr	r2, [pc, #600]	; (800177c <Task_Mode_Cfg+0x2a4>)
 8001524:	fba2 1203 	umull	r1, r2, r2, r3
 8001528:	0952      	lsrs	r2, r2, #5
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	4a92      	ldr	r2, [pc, #584]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2dc      	uxtb	r4, r3
 8001540:	4b8d      	ldr	r3, [pc, #564]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 8001542:	885a      	ldrh	r2, [r3, #2]
 8001544:	4b8e      	ldr	r3, [pc, #568]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 8001546:	fba3 1302 	umull	r1, r3, r3, r2
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4621      	mov	r1, r4
 800155e:	f002 fd03 	bl	8003f68 <Task_Led_StartPoint>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4887      	ldr	r0, [pc, #540]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 8001566:	f004 fbbb 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d004      	beq.n	800157a <Task_Mode_Cfg+0xa2>
 8001570:	4b85      	ldr	r3, [pc, #532]	; (8001788 <Task_Mode_Cfg+0x2b0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a85      	ldr	r2, [pc, #532]	; (800178c <Task_Mode_Cfg+0x2b4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d17a      	bne.n	8001670 <Task_Mode_Cfg+0x198>
				delay_ms((int)BUTTON_DELAY);
 800157a:	2014      	movs	r0, #20
 800157c:	f002 ff5c 	bl	8004438 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4880      	ldr	r0, [pc, #512]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 8001584:	f004 fbac 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <Task_Mode_Cfg+0xc2>
 800158e:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <Task_Mode_Cfg+0x2b0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <Task_Mode_Cfg+0x2b4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	f040 8162 	bne.w	800185e <Task_Mode_Cfg+0x386>
					IRcode = 0;
 800159a:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <Task_Mode_Cfg+0x2b0>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.start_point<99)
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	2b62      	cmp	r3, #98	; 0x62
 80015a6:	d805      	bhi.n	80015b4 <Task_Mode_Cfg+0xdc>
						PlayCfg.Parameter.start_point++;
 80015a8:	4b73      	ldr	r3, [pc, #460]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015aa:	885b      	ldrh	r3, [r3, #2]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015b2:	805a      	strh	r2, [r3, #2]
					//Update Display
					Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80015b4:	4b70      	ldr	r3, [pc, #448]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	4a70      	ldr	r2, [pc, #448]	; (800177c <Task_Mode_Cfg+0x2a4>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b2d8      	uxtb	r0, r3
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	4a6c      	ldr	r2, [pc, #432]	; (800177c <Task_Mode_Cfg+0x2a4>)
 80015ca:	fba2 1203 	umull	r1, r2, r2, r3
 80015ce:	0952      	lsrs	r2, r2, #5
 80015d0:	2164      	movs	r1, #100	; 0x64
 80015d2:	fb01 f202 	mul.w	r2, r1, r2
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4a69      	ldr	r2, [pc, #420]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2dc      	uxtb	r4, r3
 80015e6:	4b64      	ldr	r3, [pc, #400]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80015e8:	885a      	ldrh	r2, [r3, #2]
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 80015ec:	fba3 1302 	umull	r1, r3, r3, r2
 80015f0:	08d9      	lsrs	r1, r3, #3
 80015f2:	460b      	mov	r3, r1
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4621      	mov	r1, r4
 8001604:	f002 fcb0 	bl	8003f68 <Task_Led_StartPoint>
					buzzer_stt = 1;
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 800160e:	e01a      	b.n	8001646 <Task_Mode_Cfg+0x16e>
					{
						button_cnt_t++;
 8001610:	4b60      	ldr	r3, [pc, #384]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800161a:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	2b1e      	cmp	r3, #30
 8001622:	d90d      	bls.n	8001640 <Task_Mode_Cfg+0x168>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001624:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	00da      	lsls	r2, r3, #3
 800162e:	4b59      	ldr	r3, [pc, #356]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	210a      	movs	r1, #10
 800163a:	200a      	movs	r0, #10
 800163c:	f7ff faf2 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001640:	2064      	movs	r0, #100	; 0x64
 8001642:	f002 fef9 	bl	8004438 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	484e      	ldr	r0, [pc, #312]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 800164a:	f004 fb49 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0dd      	beq.n	8001610 <Task_Mode_Cfg+0x138>
					}
					if(button_cnt_t > 30)
 8001654:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	2b1e      	cmp	r3, #30
 800165a:	d905      	bls.n	8001668 <Task_Mode_Cfg+0x190>
						Led7TurnTime_Display(10, 10, 0, 0);
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	210a      	movs	r1, #10
 8001662:	200a      	movs	r0, #10
 8001664:	f7ff fade 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 800166e:	e0f6      	b.n	800185e <Task_Mode_Cfg+0x386>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001670:	2120      	movs	r1, #32
 8001672:	4844      	ldr	r0, [pc, #272]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 8001674:	f004 fb34 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	f040 808c 	bne.w	8001798 <Task_Mode_Cfg+0x2c0>
				delay_ms((int)BUTTON_DELAY);
 8001680:	2014      	movs	r0, #20
 8001682:	f002 fed9 	bl	8004438 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001686:	2120      	movs	r1, #32
 8001688:	483e      	ldr	r0, [pc, #248]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 800168a:	f004 fb29 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	f040 86d2 	bne.w	800243a <Task_Mode_Cfg+0xf62>
					IRcode = 0;
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <Task_Mode_Cfg+0x2b0>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.start_point > 0)
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 800169e:	885b      	ldrh	r3, [r3, #2]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <Task_Mode_Cfg+0x1d8>
						PlayCfg.Parameter.start_point--;
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80016a6:	885b      	ldrh	r3, [r3, #2]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80016ae:	805a      	strh	r2, [r3, #2]
					//Update Display
					Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <Task_Mode_Cfg+0x2a4>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2d8      	uxtb	r0, r3
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80016c2:	885b      	ldrh	r3, [r3, #2]
 80016c4:	4a2d      	ldr	r2, [pc, #180]	; (800177c <Task_Mode_Cfg+0x2a4>)
 80016c6:	fba2 1203 	umull	r1, r2, r2, r3
 80016ca:	0952      	lsrs	r2, r2, #5
 80016cc:	2164      	movs	r1, #100	; 0x64
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2dc      	uxtb	r4, r3
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <Task_Mode_Cfg+0x2a0>)
 80016e4:	885a      	ldrh	r2, [r3, #2]
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <Task_Mode_Cfg+0x2a8>)
 80016e8:	fba3 1302 	umull	r1, r3, r3, r2
 80016ec:	08d9      	lsrs	r1, r3, #3
 80016ee:	460b      	mov	r3, r1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f002 fc32 	bl	8003f68 <Task_Led_StartPoint>
					buzzer_stt = 1;
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 800170a:	e01a      	b.n	8001742 <Task_Mode_Cfg+0x26a>
					{
						button_cnt_t++;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001716:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b1e      	cmp	r3, #30
 800171e:	d90d      	bls.n	800173c <Task_Mode_Cfg+0x264>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	00da      	lsls	r2, r3, #3
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	210a      	movs	r1, #10
 8001736:	200a      	movs	r0, #10
 8001738:	f7ff fa74 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	f002 fe7b 	bl	8004438 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001742:	2120      	movs	r1, #32
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <Task_Mode_Cfg+0x2ac>)
 8001746:	f004 facb 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d0dd      	beq.n	800170c <Task_Mode_Cfg+0x234>
					}
					if(button_cnt_t > 30)
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b1e      	cmp	r3, #30
 8001756:	d905      	bls.n	8001764 <Task_Mode_Cfg+0x28c>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001758:	2300      	movs	r3, #0
 800175a:	2200      	movs	r2, #0
 800175c:	210a      	movs	r1, #10
 800175e:	200a      	movs	r0, #10
 8001760:	f7ff fa60 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001766:	2200      	movs	r2, #0
 8001768:	801a      	strh	r2, [r3, #0]
					if(button_cnt_t > 30)
						Led7TurnTime_Display(10, 10, 0, 0);
					button_cnt_t = 0;
				}
			}
			break;
 800176a:	f000 be66 	b.w	800243a <Task_Mode_Cfg+0xf62>
 800176e:	bf00      	nop
 8001770:	20000131 	.word	0x20000131
 8001774:	20000017 	.word	0x20000017
 8001778:	200000d0 	.word	0x200000d0
 800177c:	51eb851f 	.word	0x51eb851f
 8001780:	cccccccd 	.word	0xcccccccd
 8001784:	40010c00 	.word	0x40010c00
 8001788:	200000c8 	.word	0x200000c8
 800178c:	00910910 	.word	0x00910910
 8001790:	20000016 	.word	0x20000016
 8001794:	200000cc 	.word	0x200000cc
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	48b0      	ldr	r0, [pc, #704]	; (8001a5c <Task_Mode_Cfg+0x584>)
 800179c:	f004 faa0 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <Task_Mode_Cfg+0x2da>
 80017a6:	4bae      	ldr	r3, [pc, #696]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4aae      	ldr	r2, [pc, #696]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	f040 8644 	bne.w	800243a <Task_Mode_Cfg+0xf62>
				delay_ms((int)BUTTON_DELAY);
 80017b2:	2014      	movs	r0, #20
 80017b4:	f002 fe40 	bl	8004438 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	48a8      	ldr	r0, [pc, #672]	; (8001a5c <Task_Mode_Cfg+0x584>)
 80017bc:	f004 fa90 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <Task_Mode_Cfg+0x2fa>
 80017c6:	4ba6      	ldr	r3, [pc, #664]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4aa6      	ldr	r2, [pc, #664]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 8634 	bne.w	800243a <Task_Mode_Cfg+0xf62>
					IRcode = 0;
 80017d2:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
					cfg_state_t++;
 80017d8:	4ba3      	ldr	r3, [pc, #652]	; (8001a68 <Task_Mode_Cfg+0x590>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4ba1      	ldr	r3, [pc, #644]	; (8001a68 <Task_Mode_Cfg+0x590>)
 80017e2:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 80017e4:	4ba1      	ldr	r3, [pc, #644]	; (8001a6c <Task_Mode_Cfg+0x594>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
					Task_Led_StartPoint(12, 12, 12);
 80017ea:	220c      	movs	r2, #12
 80017ec:	210c      	movs	r1, #12
 80017ee:	200c      	movs	r0, #12
 80017f0:	f002 fbba 	bl	8003f68 <Task_Led_StartPoint>
					buzzer_stt = 1;
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <Task_Mode_Cfg+0x598>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 80017fa:	e01a      	b.n	8001832 <Task_Mode_Cfg+0x35a>
						button_cnt_t++;
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001806:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001808:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b1e      	cmp	r3, #30
 800180e:	d90d      	bls.n	800182c <Task_Mode_Cfg+0x354>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001810:	4b98      	ldr	r3, [pc, #608]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	00da      	lsls	r2, r3, #3
 800181a:	4b96      	ldr	r3, [pc, #600]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	210a      	movs	r1, #10
 8001826:	200a      	movs	r0, #10
 8001828:	f7ff f9fc 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 800182c:	2064      	movs	r0, #100	; 0x64
 800182e:	f002 fe03 	bl	8004438 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	4889      	ldr	r0, [pc, #548]	; (8001a5c <Task_Mode_Cfg+0x584>)
 8001836:	f004 fa53 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800183a:	4603      	mov	r3, r0
 800183c:	2b01      	cmp	r3, #1
 800183e:	d0dd      	beq.n	80017fc <Task_Mode_Cfg+0x324>
					if(button_cnt_t > 30)
 8001840:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b1e      	cmp	r3, #30
 8001846:	d905      	bls.n	8001854 <Task_Mode_Cfg+0x37c>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	210a      	movs	r1, #10
 800184e:	200a      	movs	r0, #10
 8001850:	f7ff f9e8 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001854:	4b87      	ldr	r3, [pc, #540]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001856:	2200      	movs	r2, #0
 8001858:	801a      	strh	r2, [r3, #0]
			break;
 800185a:	f000 bdee 	b.w	800243a <Task_Mode_Cfg+0xf62>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 800185e:	bf00      	nop
			break;
 8001860:	f000 bdeb 	b.w	800243a <Task_Mode_Cfg+0xf62>
		}
		case E_CFG_ROUNDTIME_M:
		{
			if(pCfg_1st_state_Flag){
 8001864:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <Task_Mode_Cfg+0x594>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04c      	beq.n	8001906 <Task_Mode_Cfg+0x42e>
				pCfg_1st_state_Flag = 0;
 800186c:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <Task_Mode_Cfg+0x594>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]

				//Send Display and Blink Start point
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001872:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001874:	88db      	ldrh	r3, [r3, #6]
 8001876:	4a81      	ldr	r2, [pc, #516]	; (8001a7c <Task_Mode_Cfg+0x5a4>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
									  (PlayCfg.Parameter.rount_time_s/60)%10,
 8001882:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001884:	88db      	ldrh	r3, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001886:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	08d9      	lsrs	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	461c      	mov	r4, r3
									  (PlayCfg.Parameter.rount_time_s%60)/10,
 80018a6:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 80018a8:	88da      	ldrh	r2, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80018aa:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 80018ac:	fba3 1302 	umull	r1, r3, r3, r2
 80018b0:	0959      	lsrs	r1, r3, #5
 80018b2:	460b      	mov	r3, r1
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a5b      	subs	r3, r3, r1
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461d      	mov	r5, r3
									  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 80018ca:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 80018cc:	88da      	ldrh	r2, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80018ce:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 80018d0:	fba3 1302 	umull	r1, r3, r3, r2
 80018d4:	0959      	lsrs	r1, r3, #5
 80018d6:	460b      	mov	r3, r1
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 80018e4:	fba3 1302 	umull	r1, r3, r3, r2
 80018e8:	08d9      	lsrs	r1, r3, #3
 80018ea:	460b      	mov	r3, r1
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	462a      	mov	r2, r5
 8001900:	4621      	mov	r1, r4
 8001902:	f7ff fa73 	bl	8000dec <Led7RoundTime_Display>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	4854      	ldr	r0, [pc, #336]	; (8001a5c <Task_Mode_Cfg+0x584>)
 800190a:	f004 f9e9 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <Task_Mode_Cfg+0x448>
 8001914:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <Task_Mode_Cfg+0x588>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <Task_Mode_Cfg+0x5b0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	f040 80b6 	bne.w	8001a8c <Task_Mode_Cfg+0x5b4>
				delay_ms((int)BUTTON_DELAY);
 8001920:	2014      	movs	r0, #20
 8001922:	f002 fd89 	bl	8004438 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	484c      	ldr	r0, [pc, #304]	; (8001a5c <Task_Mode_Cfg+0x584>)
 800192a:	f004 f9d9 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <Task_Mode_Cfg+0x468>
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <Task_Mode_Cfg+0x588>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <Task_Mode_Cfg+0x5b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f040 81aa 	bne.w	8001c94 <Task_Mode_Cfg+0x7bc>
					IRcode = 0;
 8001940:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <Task_Mode_Cfg+0x588>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
					if(((PlayCfg.Parameter.rount_time_s+10)/60) < 99)
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001948:	88db      	ldrh	r3, [r3, #6]
 800194a:	f241 7229 	movw	r2, #5929	; 0x1729
 800194e:	4293      	cmp	r3, r2
 8001950:	d805      	bhi.n	800195e <Task_Mode_Cfg+0x486>
						PlayCfg.Parameter.rount_time_s+=10;
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001954:	88db      	ldrh	r3, [r3, #6]
 8001956:	330a      	adds	r3, #10
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 800195c:	80da      	strh	r2, [r3, #6]
					//Update Display
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001960:	88db      	ldrh	r3, [r3, #6]
 8001962:	4a46      	ldr	r2, [pc, #280]	; (8001a7c <Task_Mode_Cfg+0x5a4>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
										  (PlayCfg.Parameter.rount_time_s/60)%10,
 800196e:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001970:	88db      	ldrh	r3, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001972:	4a43      	ldr	r2, [pc, #268]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	b29a      	uxth	r2, r3
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 800197e:	fba3 1302 	umull	r1, r3, r3, r2
 8001982:	08d9      	lsrs	r1, r3, #3
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b29b      	uxth	r3, r3
 8001990:	461c      	mov	r4, r3
										  (PlayCfg.Parameter.rount_time_s%60)/10,
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 8001994:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 8001998:	fba3 1302 	umull	r1, r3, r3, r2
 800199c:	0959      	lsrs	r1, r3, #5
 800199e:	460b      	mov	r3, r1
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a5b      	subs	r3, r3, r1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4a36      	ldr	r2, [pc, #216]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461d      	mov	r5, r3
										  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <Task_Mode_Cfg+0x5a0>)
 80019b8:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <Task_Mode_Cfg+0x5a8>)
 80019bc:	fba3 1302 	umull	r1, r3, r3, r2
 80019c0:	0959      	lsrs	r1, r3, #5
 80019c2:	460b      	mov	r3, r1
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a5b      	subs	r3, r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <Task_Mode_Cfg+0x5ac>)
 80019d0:	fba3 1302 	umull	r1, r3, r3, r2
 80019d4:	08d9      	lsrs	r1, r3, #3
 80019d6:	460b      	mov	r3, r1
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	2301      	movs	r3, #1
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	462a      	mov	r2, r5
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff f9fd 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <Task_Mode_Cfg+0x598>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 80019f8:	e01a      	b.n	8001a30 <Task_Mode_Cfg+0x558>
					{
						button_cnt_t++;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a04:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b1e      	cmp	r3, #30
 8001a0c:	d90d      	bls.n	8001a2a <Task_Mode_Cfg+0x552>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	210a      	movs	r1, #10
 8001a24:	200a      	movs	r0, #10
 8001a26:	f7ff f8fd 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001a2a:	2064      	movs	r0, #100	; 0x64
 8001a2c:	f002 fd04 	bl	8004438 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <Task_Mode_Cfg+0x584>)
 8001a34:	f004 f954 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d0dd      	beq.n	80019fa <Task_Mode_Cfg+0x522>
					}
					if(button_cnt_t > 30)
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b1e      	cmp	r3, #30
 8001a44:	d905      	bls.n	8001a52 <Task_Mode_Cfg+0x57a>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001a46:	2300      	movs	r3, #0
 8001a48:	2200      	movs	r2, #0
 8001a4a:	210a      	movs	r1, #10
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f7ff f8e9 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <Task_Mode_Cfg+0x59c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001a58:	e11c      	b.n	8001c94 <Task_Mode_Cfg+0x7bc>
 8001a5a:	bf00      	nop
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	200000c8 	.word	0x200000c8
 8001a64:	00904904 	.word	0x00904904
 8001a68:	20000131 	.word	0x20000131
 8001a6c:	20000017 	.word	0x20000017
 8001a70:	20000016 	.word	0x20000016
 8001a74:	200000cc 	.word	0x200000cc
 8001a78:	200000d0 	.word	0x200000d0
 8001a7c:	1b4e81b5 	.word	0x1b4e81b5
 8001a80:	88888889 	.word	0x88888889
 8001a84:	cccccccd 	.word	0xcccccccd
 8001a88:	00910910 	.word	0x00910910
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	48a8      	ldr	r0, [pc, #672]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001a90:	f004 f926 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	f040 8097 	bne.w	8001bca <Task_Mode_Cfg+0x6f2>
				delay_ms((int)BUTTON_DELAY);
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f002 fccb 	bl	8004438 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	48a2      	ldr	r0, [pc, #648]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001aa6:	f004 f91b 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 84c6 	bne.w	800243e <Task_Mode_Cfg+0xf66>
					IRcode = 0;
 8001ab2:	4ba0      	ldr	r3, [pc, #640]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.rount_time_s >= 10)
 8001ab8:	4b9f      	ldr	r3, [pc, #636]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001aba:	88db      	ldrh	r3, [r3, #6]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d905      	bls.n	8001acc <Task_Mode_Cfg+0x5f4>
						PlayCfg.Parameter.rount_time_s-=10;
 8001ac0:	4b9d      	ldr	r3, [pc, #628]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001ac2:	88db      	ldrh	r3, [r3, #6]
 8001ac4:	3b0a      	subs	r3, #10
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b9b      	ldr	r3, [pc, #620]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001aca:	80da      	strh	r2, [r3, #6]
					//Update Display
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001acc:	4b9a      	ldr	r3, [pc, #616]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	4a9a      	ldr	r2, [pc, #616]	; (8001d3c <Task_Mode_Cfg+0x864>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4618      	mov	r0, r3
										  (PlayCfg.Parameter.rount_time_s/60)%10,
 8001adc:	4b96      	ldr	r3, [pc, #600]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001ade:	88db      	ldrh	r3, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001ae0:	4a97      	ldr	r2, [pc, #604]	; (8001d40 <Task_Mode_Cfg+0x868>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b96      	ldr	r3, [pc, #600]	; (8001d44 <Task_Mode_Cfg+0x86c>)
 8001aec:	fba3 1302 	umull	r1, r3, r3, r2
 8001af0:	08d9      	lsrs	r1, r3, #3
 8001af2:	460b      	mov	r3, r1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461c      	mov	r4, r3
										  (PlayCfg.Parameter.rount_time_s%60)/10,
 8001b00:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001b02:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b04:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <Task_Mode_Cfg+0x868>)
 8001b06:	fba3 1302 	umull	r1, r3, r3, r2
 8001b0a:	0959      	lsrs	r1, r3, #5
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a5b      	subs	r3, r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4a8a      	ldr	r2, [pc, #552]	; (8001d44 <Task_Mode_Cfg+0x86c>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461d      	mov	r5, r3
										  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 8001b24:	4b84      	ldr	r3, [pc, #528]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001b26:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b28:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <Task_Mode_Cfg+0x868>)
 8001b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2e:	0959      	lsrs	r1, r3, #5
 8001b30:	460b      	mov	r3, r1
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a5b      	subs	r3, r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <Task_Mode_Cfg+0x86c>)
 8001b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b42:	08d9      	lsrs	r1, r3, #3
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4613      	mov	r3, r2
 8001b58:	462a      	mov	r2, r5
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	f7ff f946 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <Task_Mode_Cfg+0x870>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001b66:	e01a      	b.n	8001b9e <Task_Mode_Cfg+0x6c6>
					{
						button_cnt_t++;
 8001b68:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001b72:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001b74:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b1e      	cmp	r3, #30
 8001b7a:	d90d      	bls.n	8001b98 <Task_Mode_Cfg+0x6c0>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	00da      	lsls	r2, r3, #3
 8001b86:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	210a      	movs	r1, #10
 8001b92:	200a      	movs	r0, #10
 8001b94:	f7ff f846 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f002 fc4d 	bl	8004438 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	4863      	ldr	r0, [pc, #396]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001ba2:	f004 f89d 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d0dd      	beq.n	8001b68 <Task_Mode_Cfg+0x690>
					}
					if(button_cnt_t > 30)
 8001bac:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	2b1e      	cmp	r3, #30
 8001bb2:	d905      	bls.n	8001bc0 <Task_Mode_Cfg+0x6e8>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	210a      	movs	r1, #10
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f7ff f832 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001bc0:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
					if(button_cnt_t > 30)
						Led7TurnTime_Display(10, 10, 0, 0);
					button_cnt_t = 0;
				}
			}
			break;
 8001bc6:	f000 bc3a 	b.w	800243e <Task_Mode_Cfg+0xf66>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8001bca:	2140      	movs	r1, #64	; 0x40
 8001bcc:	4858      	ldr	r0, [pc, #352]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001bce:	f004 f887 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <Task_Mode_Cfg+0x70c>
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <Task_Mode_Cfg+0x878>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	f040 842d 	bne.w	800243e <Task_Mode_Cfg+0xf66>
				delay_ms((int)BUTTON_DELAY);
 8001be4:	2014      	movs	r0, #20
 8001be6:	f002 fc27 	bl	8004438 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	4850      	ldr	r0, [pc, #320]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001bee:	f004 f877 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <Task_Mode_Cfg+0x72c>
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <Task_Mode_Cfg+0x878>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f040 841d 	bne.w	800243e <Task_Mode_Cfg+0xf66>
					IRcode = 0;
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
					cfg_state_t++;
 8001c0a:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <Task_Mode_Cfg+0x87c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <Task_Mode_Cfg+0x87c>)
 8001c14:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8001c16:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <Task_Mode_Cfg+0x880>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
					Led7RoundTime_Display(10, 10, 10, 10, 0);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	230a      	movs	r3, #10
 8001c22:	220a      	movs	r2, #10
 8001c24:	210a      	movs	r1, #10
 8001c26:	200a      	movs	r0, #10
 8001c28:	f7ff f8e0 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <Task_Mode_Cfg+0x870>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001c32:	e01a      	b.n	8001c6a <Task_Mode_Cfg+0x792>
						button_cnt_t++;
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c3e:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001c40:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b1e      	cmp	r3, #30
 8001c46:	d90d      	bls.n	8001c64 <Task_Mode_Cfg+0x78c>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	00da      	lsls	r2, r3, #3
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	210a      	movs	r1, #10
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f7fe ffe0 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 8001c64:	2064      	movs	r0, #100	; 0x64
 8001c66:	f002 fbe7 	bl	8004438 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	4830      	ldr	r0, [pc, #192]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001c6e:	f004 f837 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d0dd      	beq.n	8001c34 <Task_Mode_Cfg+0x75c>
					if(button_cnt_t > 30)
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b1e      	cmp	r3, #30
 8001c7e:	d905      	bls.n	8001c8c <Task_Mode_Cfg+0x7b4>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	210a      	movs	r1, #10
 8001c86:	200a      	movs	r0, #10
 8001c88:	f7fe ffcc 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <Task_Mode_Cfg+0x874>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
			break;
 8001c92:	e3d4      	b.n	800243e <Task_Mode_Cfg+0xf66>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001c94:	bf00      	nop
			break;
 8001c96:	e3d2      	b.n	800243e <Task_Mode_Cfg+0xf66>
		}
		case E_CFG_TURNTIME_S:
		{
			if(pCfg_1st_state_Flag){
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <Task_Mode_Cfg+0x880>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <Task_Mode_Cfg+0x800>
				pCfg_1st_state_Flag = 0;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <Task_Mode_Cfg+0x880>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
				//Send Display and Blink Start point
				Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001ca8:	889b      	ldrh	r3, [r3, #4]
 8001caa:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <Task_Mode_Cfg+0x86c>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001cb8:	889a      	ldrh	r2, [r3, #4]
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <Task_Mode_Cfg+0x86c>)
 8001cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f7fe ffa6 	bl	8000c24 <Led7TurnTime_Display>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001cdc:	f004 f800 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <Task_Mode_Cfg+0x81a>
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <Task_Mode_Cfg+0x884>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	f040 80ad 	bne.w	8001e4c <Task_Mode_Cfg+0x974>
				delay_ms((int)BUTTON_DELAY);
 8001cf2:	2014      	movs	r0, #20
 8001cf4:	f002 fba0 	bl	8004438 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <Task_Mode_Cfg+0x858>)
 8001cfc:	f003 fff0 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d005      	beq.n	8001d12 <Task_Mode_Cfg+0x83a>
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <Task_Mode_Cfg+0x884>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	f040 81a9 	bne.w	8002064 <Task_Mode_Cfg+0xb8c>
					IRcode = 0;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <Task_Mode_Cfg+0x85c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.turn_time_s < 99)
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001d1a:	889b      	ldrh	r3, [r3, #4]
 8001d1c:	2b62      	cmp	r3, #98	; 0x62
 8001d1e:	d81f      	bhi.n	8001d60 <Task_Mode_Cfg+0x888>
						PlayCfg.Parameter.turn_time_s++;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <Task_Mode_Cfg+0x860>)
 8001d2a:	809a      	strh	r2, [r3, #4]
 8001d2c:	e01b      	b.n	8001d66 <Task_Mode_Cfg+0x88e>
 8001d2e:	bf00      	nop
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	200000c8 	.word	0x200000c8
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	1b4e81b5 	.word	0x1b4e81b5
 8001d40:	88888889 	.word	0x88888889
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	20000016 	.word	0x20000016
 8001d4c:	200000cc 	.word	0x200000cc
 8001d50:	00904904 	.word	0x00904904
 8001d54:	20000131 	.word	0x20000131
 8001d58:	20000017 	.word	0x20000017
 8001d5c:	00910910 	.word	0x00910910
					else
						PlayCfg.Parameter.turn_time_s = 0;
 8001d60:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	809a      	strh	r2, [r3, #4]
					//Update Display
					Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001d66:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001d68:	889b      	ldrh	r3, [r3, #4]
 8001d6a:	4a9e      	ldr	r2, [pc, #632]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001d78:	889a      	ldrh	r2, [r3, #4]
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	460b      	mov	r3, r1
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	2200      	movs	r2, #0
 8001d94:	f7fe ff46 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8001d98:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <Task_Mode_Cfg+0xb10>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001d9e:	e02d      	b.n	8001dfc <Task_Mode_Cfg+0x924>
					{
						button_cnt_t++;
 8001da0:	4b92      	ldr	r3, [pc, #584]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b90      	ldr	r3, [pc, #576]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001daa:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001dac:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2b1e      	cmp	r3, #30
 8001db2:	d920      	bls.n	8001df6 <Task_Mode_Cfg+0x91e>

							Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001db6:	889b      	ldrh	r3, [r3, #4]
 8001db8:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001dc6:	889a      	ldrh	r2, [r3, #4]
 8001dc8:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001dca:	fba3 1302 	umull	r1, r3, r3, r2
 8001dce:	08d9      	lsrs	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4b83      	ldr	r3, [pc, #524]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	00da      	lsls	r2, r3, #3
 8001de8:	4b80      	ldr	r3, [pc, #512]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	f7fe ff17 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f002 fb1e 	bl	8004438 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	487c      	ldr	r0, [pc, #496]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001e00:	f003 ff6e 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d0ca      	beq.n	8001da0 <Task_Mode_Cfg+0x8c8>
					}
					if(button_cnt_t > 30)
 8001e0a:	4b78      	ldr	r3, [pc, #480]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	2b1e      	cmp	r3, #30
 8001e10:	d918      	bls.n	8001e44 <Task_Mode_Cfg+0x96c>
						Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e14:	889b      	ldrh	r3, [r3, #4]
 8001e16:	4a73      	ldr	r2, [pc, #460]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e24:	889a      	ldrh	r2, [r3, #4]
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001e28:	fba3 1302 	umull	r1, r3, r3, r2
 8001e2c:	08d9      	lsrs	r1, r3, #3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f7fe fef0 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001e44:	4b69      	ldr	r3, [pc, #420]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8001e4a:	e10b      	b.n	8002064 <Task_Mode_Cfg+0xb8c>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4868      	ldr	r0, [pc, #416]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001e50:	f003 ff46 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 808f 	bne.w	8001f7a <Task_Mode_Cfg+0xaa2>
				delay_ms((int)BUTTON_DELAY);
 8001e5c:	2014      	movs	r0, #20
 8001e5e:	f002 faeb 	bl	8004438 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001e62:	2120      	movs	r1, #32
 8001e64:	4862      	ldr	r0, [pc, #392]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001e66:	f003 ff3b 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 82e8 	bne.w	8002442 <Task_Mode_Cfg+0xf6a>
					IRcode = 0;
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <Task_Mode_Cfg+0xb1c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.turn_time_s > 0)
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e7a:	889b      	ldrh	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <Task_Mode_Cfg+0x9b6>
						PlayCfg.Parameter.turn_time_s--;
 8001e80:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e8a:	809a      	strh	r2, [r3, #4]
 8001e8c:	e002      	b.n	8001e94 <Task_Mode_Cfg+0x9bc>
					else
						PlayCfg.Parameter.turn_time_s = 99;
 8001e8e:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e90:	2263      	movs	r2, #99	; 0x63
 8001e92:	809a      	strh	r2, [r3, #4]
					//Update Display
					Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001ea6:	889a      	ldrh	r2, [r3, #4]
 8001ea8:	4b4e      	ldr	r3, [pc, #312]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001eae:	08d9      	lsrs	r1, r3, #3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f7fe feaf 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8001ec6:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <Task_Mode_Cfg+0xb10>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001ecc:	e02d      	b.n	8001f2a <Task_Mode_Cfg+0xa52>
					{
						button_cnt_t++;
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b45      	ldr	r3, [pc, #276]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001ed8:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b1e      	cmp	r3, #30
 8001ee0:	d920      	bls.n	8001f24 <Task_Mode_Cfg+0xa4c>

							Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001ef4:	889a      	ldrh	r2, [r3, #4]
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8001efc:	08d9      	lsrs	r1, r3, #3
 8001efe:	460b      	mov	r3, r1
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	00da      	lsls	r2, r3, #3
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	f7fe fe80 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001f24:	2064      	movs	r0, #100	; 0x64
 8001f26:	f002 fa87 	bl	8004438 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001f2e:	f003 fed7 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d0ca      	beq.n	8001ece <Task_Mode_Cfg+0x9f6>
					}
					if(button_cnt_t > 30)
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b1e      	cmp	r3, #30
 8001f3e:	d918      	bls.n	8001f72 <Task_Mode_Cfg+0xa9a>
						Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <Task_Mode_Cfg+0xb08>)
 8001f52:	889a      	ldrh	r2, [r3, #4]
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <Task_Mode_Cfg+0xb0c>)
 8001f56:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5a:	08d9      	lsrs	r1, r3, #3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f7fe fe59 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <Task_Mode_Cfg+0xb14>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
					if(button_cnt_t > 30)
						Led7TurnTime_Display(10, 10, 0, 0);
					button_cnt_t = 0;
				}
			}
			break;
 8001f78:	e263      	b.n	8002442 <Task_Mode_Cfg+0xf6a>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001f7e:	f003 feaf 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <Task_Mode_Cfg+0xabc>
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <Task_Mode_Cfg+0xb1c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <Task_Mode_Cfg+0xb20>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f040 8257 	bne.w	8002442 <Task_Mode_Cfg+0xf6a>
				delay_ms((int)BUTTON_DELAY);
 8001f94:	2014      	movs	r0, #20
 8001f96:	f002 fa4f 	bl	8004438 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <Task_Mode_Cfg+0xb18>)
 8001f9e:	f003 fe9f 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <Task_Mode_Cfg+0xadc>
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <Task_Mode_Cfg+0xb1c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <Task_Mode_Cfg+0xb20>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	f040 8247 	bne.w	8002442 <Task_Mode_Cfg+0xf6a>
					IRcode = 0;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <Task_Mode_Cfg+0xb1c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
					cfg_state_t++;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <Task_Mode_Cfg+0xb24>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <Task_Mode_Cfg+0xb24>)
 8001fc4:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <Task_Mode_Cfg+0xb28>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
					Led7TurnTime_Display(10, 10, 0, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f7fe fe26 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <Task_Mode_Cfg+0xb10>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001fde:	e02c      	b.n	800203a <Task_Mode_Cfg+0xb62>
 8001fe0:	200000d0 	.word	0x200000d0
 8001fe4:	cccccccd 	.word	0xcccccccd
 8001fe8:	20000016 	.word	0x20000016
 8001fec:	200000cc 	.word	0x200000cc
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	200000c8 	.word	0x200000c8
 8001ff8:	00904904 	.word	0x00904904
 8001ffc:	20000131 	.word	0x20000131
 8002000:	20000017 	.word	0x20000017
						button_cnt_t++;
 8002004:	4ba0      	ldr	r3, [pc, #640]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 800200e:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8002010:	4b9d      	ldr	r3, [pc, #628]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	2b1e      	cmp	r3, #30
 8002016:	d90d      	bls.n	8002034 <Task_Mode_Cfg+0xb5c>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8002018:	4b9b      	ldr	r3, [pc, #620]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	00da      	lsls	r2, r3, #3
 8002022:	4b99      	ldr	r3, [pc, #612]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	210a      	movs	r1, #10
 800202e:	200a      	movs	r0, #10
 8002030:	f7fe fdf8 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 8002034:	2064      	movs	r0, #100	; 0x64
 8002036:	f002 f9ff 	bl	8004438 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	4893      	ldr	r0, [pc, #588]	; (800228c <Task_Mode_Cfg+0xdb4>)
 800203e:	f003 fe4f 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d0dd      	beq.n	8002004 <Task_Mode_Cfg+0xb2c>
					if(button_cnt_t > 30)
 8002048:	4b8f      	ldr	r3, [pc, #572]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	2b1e      	cmp	r3, #30
 800204e:	d905      	bls.n	800205c <Task_Mode_Cfg+0xb84>
						Led7TurnTime_Display(10, 10, 0, 0);
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	210a      	movs	r1, #10
 8002056:	200a      	movs	r0, #10
 8002058:	f7fe fde4 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 800205c:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 800205e:	2200      	movs	r2, #0
 8002060:	801a      	strh	r2, [r3, #0]
			break;
 8002062:	e1ee      	b.n	8002442 <Task_Mode_Cfg+0xf6a>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8002064:	bf00      	nop
			break;
 8002066:	e1ec      	b.n	8002442 <Task_Mode_Cfg+0xf6a>
		}
		case E_CFG_START_MODE:
		{
			if(pCfg_1st_state_Flag){
 8002068:	4b89      	ldr	r3, [pc, #548]	; (8002290 <Task_Mode_Cfg+0xdb8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d027      	beq.n	80020c0 <Task_Mode_Cfg+0xbe8>
				pCfg_1st_state_Flag = 0;
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <Task_Mode_Cfg+0xdb8>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
				if(PlayCfg.Parameter.mode_signed == 0xFF)
 8002076:	4b87      	ldr	r3, [pc, #540]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002078:	7a1b      	ldrb	r3, [r3, #8]
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d102      	bne.n	8002084 <Task_Mode_Cfg+0xbac>
					PlayCfg.Parameter.mode_signed = 2;
 800207e:	4b85      	ldr	r3, [pc, #532]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002080:	2202      	movs	r2, #2
 8002082:	721a      	strb	r2, [r3, #8]

				Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002086:	7819      	ldrb	r1, [r3, #0]
 8002088:	4b82      	ldr	r3, [pc, #520]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800208a:	7a1b      	ldrb	r3, [r3, #8]
 800208c:	330a      	adds	r3, #10
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	200c      	movs	r0, #12
 8002094:	f001 ff68 	bl	8003f68 <Task_Led_StartPoint>
				//Send Display and Blink Start point
				for(int i=0;i<(PlayCfg.Parameter.playing_mode);i++){
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e00a      	b.n	80020b4 <Task_Mode_Cfg+0xbdc>
					Task_led_xl(i+1, 0x0F);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	210f      	movs	r1, #15
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 ff47 	bl	8003f3c <Task_led_xl>
				for(int i=0;i<(PlayCfg.Parameter.playing_mode);i++){
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4b77      	ldr	r3, [pc, #476]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4293      	cmp	r3, r2
 80020be:	dbee      	blt.n	800209e <Task_Mode_Cfg+0xbc6>
				}
			}
			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	4872      	ldr	r0, [pc, #456]	; (800228c <Task_Mode_Cfg+0xdb4>)
 80020c4:	f003 fe0c 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <Task_Mode_Cfg+0xc02>
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <Task_Mode_Cfg+0xdc0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a72      	ldr	r2, [pc, #456]	; (800229c <Task_Mode_Cfg+0xdc4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	f040 808a 	bne.w	80021ee <Task_Mode_Cfg+0xd16>
				delay_ms((int)BUTTON_DELAY);
 80020da:	2014      	movs	r0, #20
 80020dc:	f002 f9ac 	bl	8004438 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	486a      	ldr	r0, [pc, #424]	; (800228c <Task_Mode_Cfg+0xdb4>)
 80020e4:	f003 fdfc 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <Task_Mode_Cfg+0xc22>
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <Task_Mode_Cfg+0xdc0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6a      	ldr	r2, [pc, #424]	; (800229c <Task_Mode_Cfg+0xdc4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 819e 	bne.w	8002436 <Task_Mode_Cfg+0xf5e>
					IRcode = 0;
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <Task_Mode_Cfg+0xdc0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
					PlayCfg.Parameter.playing_mode++;
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800210a:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.playing_mode > (int)MAX_PLAYER_NUM)
 800210c:	4b61      	ldr	r3, [pc, #388]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d91a      	bls.n	800214a <Task_Mode_Cfg+0xc72>
					{
						for(int i=0;i<(int)MAX_PLAYER_NUM;i++){
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e00a      	b.n	8002130 <Task_Mode_Cfg+0xc58>
							Task_led_xl(i+1, 0x00);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f001 ff09 	bl	8003f3c <Task_led_xl>
						for(int i=0;i<(int)MAX_PLAYER_NUM;i++){
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	3301      	adds	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b03      	cmp	r3, #3
 8002134:	ddf1      	ble.n	800211a <Task_Mode_Cfg+0xc42>
						}
						PlayCfg.Parameter.playing_mode = 2;
 8002136:	4b57      	ldr	r3, [pc, #348]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002138:	2202      	movs	r2, #2
 800213a:	701a      	strb	r2, [r3, #0]
						PlayCfg.Parameter.mode_signed = 1 - PlayCfg.Parameter.mode_signed;
 800213c:	4b55      	ldr	r3, [pc, #340]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800213e:	7a1b      	ldrb	r3, [r3, #8]
 8002140:	f1c3 0301 	rsb	r3, r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002148:	721a      	strb	r2, [r3, #8]
					}
					//Update Display
					Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800214c:	7819      	ldrb	r1, [r3, #0]
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002150:	7a1b      	ldrb	r3, [r3, #8]
 8002152:	330a      	adds	r3, #10
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	200c      	movs	r0, #12
 800215a:	f001 ff05 	bl	8003f68 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e00a      	b.n	800217a <Task_Mode_Cfg+0xca2>
						Task_led_xl(i+1, 0x0F);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	210f      	movs	r1, #15
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fee4 	bl	8003f3c <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4293      	cmp	r3, r2
 8002184:	dbee      	blt.n	8002164 <Task_Mode_Cfg+0xc8c>
					}
					buzzer_stt = 1;
 8002186:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <Task_Mode_Cfg+0xdc8>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 800218c:	e01a      	b.n	80021c4 <Task_Mode_Cfg+0xcec>
					{
						button_cnt_t++;
 800218e:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 8002198:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b1e      	cmp	r3, #30
 80021a0:	d90d      	bls.n	80021be <Task_Mode_Cfg+0xce6>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	00da      	lsls	r2, r3, #3
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	210a      	movs	r1, #10
 80021b8:	200a      	movs	r0, #10
 80021ba:	f7fe fd33 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 80021be:	2064      	movs	r0, #100	; 0x64
 80021c0:	f002 f93a 	bl	8004438 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	4831      	ldr	r0, [pc, #196]	; (800228c <Task_Mode_Cfg+0xdb4>)
 80021c8:	f003 fd8a 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d0dd      	beq.n	800218e <Task_Mode_Cfg+0xcb6>
					}
					if(button_cnt_t > 30)
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	2b1e      	cmp	r3, #30
 80021d8:	d905      	bls.n	80021e6 <Task_Mode_Cfg+0xd0e>
						Led7TurnTime_Display(10, 10, 0, 0);
 80021da:	2300      	movs	r3, #0
 80021dc:	2200      	movs	r2, #0
 80021de:	210a      	movs	r1, #10
 80021e0:	200a      	movs	r0, #10
 80021e2:	f7fe fd1f 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <Task_Mode_Cfg+0xdb0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 80021ec:	e123      	b.n	8002436 <Task_Mode_Cfg+0xf5e>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 80021ee:	2120      	movs	r1, #32
 80021f0:	4826      	ldr	r0, [pc, #152]	; (800228c <Task_Mode_Cfg+0xdb4>)
 80021f2:	f003 fd75 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8098 	bne.w	800232e <Task_Mode_Cfg+0xe56>
				delay_ms((int)BUTTON_DELAY);
 80021fe:	2014      	movs	r0, #20
 8002200:	f002 f91a 	bl	8004438 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8002204:	2120      	movs	r1, #32
 8002206:	4821      	ldr	r0, [pc, #132]	; (800228c <Task_Mode_Cfg+0xdb4>)
 8002208:	f003 fd6a 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	f040 8119 	bne.w	8002446 <Task_Mode_Cfg+0xf6e>
					IRcode = 0;
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <Task_Mode_Cfg+0xdc0>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
					if(PlayCfg.Parameter.playing_mode > 2){
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d91a      	bls.n	8002258 <Task_Mode_Cfg+0xd80>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	e00a      	b.n	800223e <Task_Mode_Cfg+0xd66>
							Task_led_xl(i+1, 0x00);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f001 fe82 	bl	8003f3c <Task_led_xl>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3301      	adds	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4293      	cmp	r3, r2
 8002248:	dbee      	blt.n	8002228 <Task_Mode_Cfg+0xd50>
						}
						PlayCfg.Parameter.playing_mode--;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e009      	b.n	800226c <Task_Mode_Cfg+0xd94>
					}
					else{
						PlayCfg.Parameter.playing_mode = (int)MAX_PLAYER_NUM;
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
						PlayCfg.Parameter.mode_signed = 1 - PlayCfg.Parameter.mode_signed;
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002260:	7a1b      	ldrb	r3, [r3, #8]
 8002262:	f1c3 0301 	rsb	r3, r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800226a:	721a      	strb	r2, [r3, #8]
					}
					//Update Display
					Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 800226e:	7819      	ldrb	r1, [r3, #0]
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <Task_Mode_Cfg+0xdbc>)
 8002272:	7a1b      	ldrb	r3, [r3, #8]
 8002274:	330a      	adds	r3, #10
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	200c      	movs	r0, #12
 800227c:	f001 fe74 	bl	8003f68 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	e019      	b.n	80022ba <Task_Mode_Cfg+0xde2>
 8002286:	bf00      	nop
 8002288:	200000cc 	.word	0x200000cc
 800228c:	40010c00 	.word	0x40010c00
 8002290:	20000017 	.word	0x20000017
 8002294:	200000d0 	.word	0x200000d0
 8002298:	200000c8 	.word	0x200000c8
 800229c:	00910910 	.word	0x00910910
 80022a0:	20000016 	.word	0x20000016
						Task_led_xl(i+1, 0x0F);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	210f      	movs	r1, #15
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 fe44 	bl	8003f3c <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <Task_Mode_Cfg+0xf78>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4293      	cmp	r3, r2
 80022c4:	dbee      	blt.n	80022a4 <Task_Mode_Cfg+0xdcc>
					}
					buzzer_stt = 1;
 80022c6:	4b63      	ldr	r3, [pc, #396]	; (8002454 <Task_Mode_Cfg+0xf7c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 80022cc:	e01a      	b.n	8002304 <Task_Mode_Cfg+0xe2c>
					{
						button_cnt_t++;
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	4b60      	ldr	r3, [pc, #384]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80022d8:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	2b1e      	cmp	r3, #30
 80022e0:	d90d      	bls.n	80022fe <Task_Mode_Cfg+0xe26>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	00da      	lsls	r2, r3, #3
 80022ec:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	210a      	movs	r1, #10
 80022f8:	200a      	movs	r0, #10
 80022fa:	f7fe fc93 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 80022fe:	2064      	movs	r0, #100	; 0x64
 8002300:	f002 f89a 	bl	8004438 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8002304:	2120      	movs	r1, #32
 8002306:	4855      	ldr	r0, [pc, #340]	; (800245c <Task_Mode_Cfg+0xf84>)
 8002308:	f003 fcea 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d0dd      	beq.n	80022ce <Task_Mode_Cfg+0xdf6>
					}
					if(button_cnt_t > 30)
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <Task_Mode_Cfg+0xf80>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2b1e      	cmp	r3, #30
 8002318:	d905      	bls.n	8002326 <Task_Mode_Cfg+0xe4e>
						Led7TurnTime_Display(10, 10, 0, 0);
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	210a      	movs	r1, #10
 8002320:	200a      	movs	r0, #10
 8002322:	f7fe fc7f 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8002326:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <Task_Mode_Cfg+0xf80>)
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
					if(button_cnt_t > 30)
						Led7TurnTime_Display(10, 10, 0, 0);
					button_cnt_t = 0;
				}
			}
			break;
 800232c:	e08b      	b.n	8002446 <Task_Mode_Cfg+0xf6e>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	484a      	ldr	r0, [pc, #296]	; (800245c <Task_Mode_Cfg+0xf84>)
 8002332:	f003 fcd5 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d004      	beq.n	8002346 <Task_Mode_Cfg+0xe6e>
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <Task_Mode_Cfg+0xf88>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <Task_Mode_Cfg+0xf8c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d17f      	bne.n	8002446 <Task_Mode_Cfg+0xf6e>
				delay_ms((int)BUTTON_DELAY);
 8002346:	2014      	movs	r0, #20
 8002348:	f002 f876 	bl	8004438 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	4843      	ldr	r0, [pc, #268]	; (800245c <Task_Mode_Cfg+0xf84>)
 8002350:	f003 fcc6 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d004      	beq.n	8002364 <Task_Mode_Cfg+0xe8c>
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <Task_Mode_Cfg+0xf88>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a41      	ldr	r2, [pc, #260]	; (8002464 <Task_Mode_Cfg+0xf8c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d170      	bne.n	8002446 <Task_Mode_Cfg+0xf6e>
					IRcode = 0;
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <Task_Mode_Cfg+0xf88>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
					Task_Led_StartPoint(12, 12, 12);
 800236a:	220c      	movs	r2, #12
 800236c:	210c      	movs	r1, #12
 800236e:	200c      	movs	r0, #12
 8002370:	f001 fdfa 	bl	8003f68 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002374:	2300      	movs	r3, #0
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	e00a      	b.n	8002390 <Task_Mode_Cfg+0xeb8>
						Task_led_xl(i+1, 0x00);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3301      	adds	r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fdd9 	bl	8003f3c <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <Task_Mode_Cfg+0xf78>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	4293      	cmp	r3, r2
 800239a:	dbee      	blt.n	800237a <Task_Mode_Cfg+0xea2>
					cfg_state_t = E_CFG_START_POINT;
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <Task_Mode_Cfg+0xf90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <Task_Mode_Cfg+0xf94>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
					buzzer_stt = 1;
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <Task_Mode_Cfg+0xf7c>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 80023ae:	e02d      	b.n	800240c <Task_Mode_Cfg+0xf34>
						button_cnt_t++;
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80023ba:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	2b1e      	cmp	r3, #30
 80023c2:	d920      	bls.n	8002406 <Task_Mode_Cfg+0xf2e>
							Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <Task_Mode_Cfg+0xf98>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <Task_Mode_Cfg+0xf98>)
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	08d9      	lsrs	r1, r3, #3
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	00da      	lsls	r2, r3, #3
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <Task_Mode_Cfg+0xf80>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	f7fe fc0f 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f002 f816 	bl	8004438 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	4813      	ldr	r0, [pc, #76]	; (800245c <Task_Mode_Cfg+0xf84>)
 8002410:	f003 fc66 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d0ca      	beq.n	80023b0 <Task_Mode_Cfg+0xed8>
					if(button_cnt_t > 30)
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <Task_Mode_Cfg+0xf80>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	2b1e      	cmp	r3, #30
 8002420:	d905      	bls.n	800242e <Task_Mode_Cfg+0xf56>
						Led7TurnTime_Display(10, 10, 0, 0);
 8002422:	2300      	movs	r3, #0
 8002424:	2200      	movs	r2, #0
 8002426:	210a      	movs	r1, #10
 8002428:	200a      	movs	r0, #10
 800242a:	f7fe fbfb 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <Task_Mode_Cfg+0xf80>)
 8002430:	2200      	movs	r2, #0
 8002432:	801a      	strh	r2, [r3, #0]
			break;
 8002434:	e007      	b.n	8002446 <Task_Mode_Cfg+0xf6e>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8002436:	bf00      	nop
			break;
 8002438:	e005      	b.n	8002446 <Task_Mode_Cfg+0xf6e>
			break;
 800243a:	bf00      	nop
 800243c:	e004      	b.n	8002448 <Task_Mode_Cfg+0xf70>
			break;
 800243e:	bf00      	nop
 8002440:	e002      	b.n	8002448 <Task_Mode_Cfg+0xf70>
			break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <Task_Mode_Cfg+0xf70>
			break;
 8002446:	bf00      	nop
		}
	}
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	200000d0 	.word	0x200000d0
 8002454:	20000016 	.word	0x20000016
 8002458:	200000cc 	.word	0x200000cc
 800245c:	40010c00 	.word	0x40010c00
 8002460:	200000c8 	.word	0x200000c8
 8002464:	00904904 	.word	0x00904904
 8002468:	20000131 	.word	0x20000131
 800246c:	20000017 	.word	0x20000017
 8002470:	200000dc 	.word	0x200000dc
 8002474:	cccccccd 	.word	0xcccccccd

08002478 <Task_User_1stInit>:

uint8_t Task_User_1stInit(uint8_t readFlash)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	int i;
	//Read from FLASH
	if (readFlash)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <Task_User_1stInit+0x14>
		Task_Read_Cfg();
 8002488:	f7fe ffea 	bl	8001460 <Task_Read_Cfg>

	if (PlayCfg.Parameter.playing_mode < 2){
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <Task_User_1stInit+0x6c>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d802      	bhi.n	800249a <Task_User_1stInit+0x22>
		PlayCfg.Parameter.playing_mode = 4;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <Task_User_1stInit+0x6c>)
 8002496:	2204      	movs	r2, #4
 8002498:	701a      	strb	r2, [r3, #0]
	}
	stop_time = 1;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <Task_User_1stInit+0x70>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]

	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e00d      	b.n	80024c2 <Task_User_1stInit+0x4a>
		Player[i].addr = i+1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <Task_User_1stInit+0x74>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	3301      	adds	r3, #1
 80024b8:	460a      	mov	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <Task_User_1stInit+0x6c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dbeb      	blt.n	80024a6 <Task_User_1stInit+0x2e>
	}
	if(i==2)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d102      	bne.n	80024da <Task_User_1stInit+0x62>
		Player[1].addr = 4;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <Task_User_1stInit+0x74>)
 80024d6:	2204      	movs	r2, #4
 80024d8:	745a      	strb	r2, [r3, #17]

	return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000d0 	.word	0x200000d0
 80024e8:	20000130 	.word	0x20000130
 80024ec:	200000ec 	.word	0x200000ec

080024f0 <Task_Round_Init>:

uint8_t Task_Round_Init(void)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af02      	add	r7, sp, #8
	//Time Update
	stop_time = 1;
 80024f6:	4baa      	ldr	r3, [pc, #680]	; (80027a0 <Task_Round_Init+0x2b0>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
	all_turn_cnt = 1;
 80024fc:	4ba9      	ldr	r3, [pc, #676]	; (80027a4 <Task_Round_Init+0x2b4>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
	hit_get_point_cnt = 0;
 8002502:	4ba9      	ldr	r3, [pc, #676]	; (80027a8 <Task_Round_Init+0x2b8>)
 8002504:	2200      	movs	r2, #0
 8002506:	801a      	strh	r2, [r3, #0]
	turn_time_s = PlayCfg.Parameter.turn_time_s;
 8002508:	4ba8      	ldr	r3, [pc, #672]	; (80027ac <Task_Round_Init+0x2bc>)
 800250a:	889a      	ldrh	r2, [r3, #4]
 800250c:	4ba8      	ldr	r3, [pc, #672]	; (80027b0 <Task_Round_Init+0x2c0>)
 800250e:	801a      	strh	r2, [r3, #0]
	rount_time_s = PlayCfg.Parameter.rount_time_s * PlayCfg.Parameter.mode_signed;
 8002510:	4ba6      	ldr	r3, [pc, #664]	; (80027ac <Task_Round_Init+0x2bc>)
 8002512:	88db      	ldrh	r3, [r3, #6]
 8002514:	4aa5      	ldr	r2, [pc, #660]	; (80027ac <Task_Round_Init+0x2bc>)
 8002516:	7a12      	ldrb	r2, [r2, #8]
 8002518:	b292      	uxth	r2, r2
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	b29a      	uxth	r2, r3
 8002520:	4ba4      	ldr	r3, [pc, #656]	; (80027b4 <Task_Round_Init+0x2c4>)
 8002522:	801a      	strh	r2, [r3, #0]

	//Player Data update
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	e04d      	b.n	80025c6 <Task_Round_Init+0xd6>
	{
		Player[i].ledxl_mask = 0x0F;
 800252a:	4aa3      	ldr	r2, [pc, #652]	; (80027b8 <Task_Round_Init+0x2c8>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	220f      	movs	r2, #15
 8002534:	701a      	strb	r2, [r3, #0]
		Player[i].average = 0;
 8002536:	4aa0      	ldr	r2, [pc, #640]	; (80027b8 <Task_Round_Init+0x2c8>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
		Player[i].point = PlayCfg.Parameter.mode_signed*PlayCfg.Parameter.start_point*((i>=PlayCfg.Parameter.playing_mode?0:1));
 8002546:	4b99      	ldr	r3, [pc, #612]	; (80027ac <Task_Round_Init+0x2bc>)
 8002548:	7a1b      	ldrb	r3, [r3, #8]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4a97      	ldr	r2, [pc, #604]	; (80027ac <Task_Round_Init+0x2bc>)
 800254e:	8852      	ldrh	r2, [r2, #2]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	4a95      	ldr	r2, [pc, #596]	; (80027ac <Task_Round_Init+0x2bc>)
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4611      	mov	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	428a      	cmp	r2, r1
 8002560:	bfb4      	ite	lt
 8002562:	2201      	movlt	r2, #1
 8002564:	2200      	movge	r2, #0
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	b292      	uxth	r2, r2
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	b299      	uxth	r1, r3
 8002570:	4a91      	ldr	r2, [pc, #580]	; (80027b8 <Task_Round_Init+0x2c8>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4413      	add	r3, r2
 8002578:	3308      	adds	r3, #8
 800257a:	460a      	mov	r2, r1
 800257c:	801a      	strh	r2, [r3, #0]
		Player[i].max_hit_get_point = 0;
 800257e:	4a8e      	ldr	r2, [pc, #568]	; (80027b8 <Task_Round_Init+0x2c8>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	330a      	adds	r3, #10
 8002588:	2200      	movs	r2, #0
 800258a:	801a      	strh	r2, [r3, #0]
		Player[i].sum_point = 0;
 800258c:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <Task_Round_Init+0x2c8>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	330c      	adds	r3, #12
 8002596:	2200      	movs	r2, #0
 8002598:	801a      	strh	r2, [r3, #0]
		Player[i].sum_signed = 0;
 800259a:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <Task_Round_Init+0x2c8>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	3302      	adds	r3, #2
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
		if(Player[i].addr == 1)
 80025a8:	4a83      	ldr	r2, [pc, #524]	; (80027b8 <Task_Round_Init+0x2c8>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	3301      	adds	r3, #1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d103      	bne.n	80025c0 <Task_Round_Init+0xd0>
			current_player = i;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <Task_Round_Init+0x2cc>)
 80025be:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <Task_Round_Init+0x2bc>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dbab      	blt.n	800252a <Task_Round_Init+0x3a>
	}

	//Send data to Display
	Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <Task_Round_Init+0x2c0>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <Task_Round_Init+0x2d0>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <Task_Round_Init+0x2c0>)
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <Task_Round_Init+0x2d0>)
 80025e8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ec:	08d9      	lsrs	r1, r3, #3
 80025ee:	460b      	mov	r3, r1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4619      	mov	r1, r3
 80025fc:	2308      	movs	r3, #8
 80025fe:	2208      	movs	r2, #8
 8002600:	f7fe fb10 	bl	8000c24 <Led7TurnTime_Display>
	Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 8002604:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <Task_Round_Init+0x2b4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <Task_Round_Init+0x2d0>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	4618      	mov	r0, r3
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <Task_Round_Init+0x2b4>)
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <Task_Round_Init+0x2d0>)
 8002618:	fba3 2301 	umull	r2, r3, r3, r1
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	1aca      	subs	r2, r1, r3
 8002628:	4614      	mov	r4, r2
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <Task_Round_Init+0x2b8>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	4a64      	ldr	r2, [pc, #400]	; (80027c0 <Task_Round_Init+0x2d0>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	b29b      	uxth	r3, r3
 8002638:	461d      	mov	r5, r3
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <Task_Round_Init+0x2b8>)
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <Task_Round_Init+0x2d0>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	08d9      	lsrs	r1, r3, #3
 8002646:	460b      	mov	r3, r1
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	462a      	mov	r2, r5
 8002654:	4621      	mov	r1, r4
 8002656:	f7fe fb59 	bl	8000d0c <Led7HitCnt_Display>
	Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <Task_Round_Init+0x2c4>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <Task_Round_Init+0x2d4>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <Task_Round_Init+0x2c4>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <Task_Round_Init+0x2d8>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <Task_Round_Init+0x2d0>)
 800267a:	fba3 1302 	umull	r1, r3, r3, r2
 800267e:	08d9      	lsrs	r1, r3, #3
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	461c      	mov	r4, r3
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <Task_Round_Init+0x2c4>)
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <Task_Round_Init+0x2d8>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	0959      	lsrs	r1, r3, #5
 800269a:	460b      	mov	r3, r1
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a5b      	subs	r3, r3, r1
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <Task_Round_Init+0x2d0>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461d      	mov	r5, r3
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <Task_Round_Init+0x2c4>)
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <Task_Round_Init+0x2d8>)
 80026b8:	fba3 1302 	umull	r1, r3, r3, r2
 80026bc:	0959      	lsrs	r1, r3, #5
 80026be:	460b      	mov	r3, r1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a5b      	subs	r3, r3, r1
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <Task_Round_Init+0x2d0>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	08d9      	lsrs	r1, r3, #3
 80026d2:	460b      	mov	r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	2301      	movs	r3, #1
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	462a      	mov	r2, r5
 80026e8:	4621      	mov	r1, r4
 80026ea:	f7fe fb7f 	bl	8000dec <Led7RoundTime_Display>

	Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <Task_Round_Init+0x2bc>)
 80026f0:	885b      	ldrh	r3, [r3, #2]
 80026f2:	4a36      	ldr	r2, [pc, #216]	; (80027cc <Task_Round_Init+0x2dc>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b2d8      	uxtb	r0, r3
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <Task_Round_Init+0x2bc>)
 8002700:	885b      	ldrh	r3, [r3, #2]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <Task_Round_Init+0x2dc>)
 8002704:	fba2 1203 	umull	r1, r2, r2, r3
 8002708:	0952      	lsrs	r2, r2, #5
 800270a:	2164      	movs	r1, #100	; 0x64
 800270c:	fb01 f202 	mul.w	r2, r1, r2
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	4a2a      	ldr	r2, [pc, #168]	; (80027c0 <Task_Round_Init+0x2d0>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b29b      	uxth	r3, r3
 800271e:	b2dc      	uxtb	r4, r3
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <Task_Round_Init+0x2bc>)
 8002722:	885a      	ldrh	r2, [r3, #2]
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <Task_Round_Init+0x2d0>)
 8002726:	fba3 1302 	umull	r1, r3, r3, r2
 800272a:	08d9      	lsrs	r1, r3, #3
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	4621      	mov	r1, r4
 800273e:	f001 fc13 	bl	8003f68 <Task_Led_StartPoint>

	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	e01a      	b.n	800277e <Task_Round_Init+0x28e>
	{
		Task_led_xl(Player[i].addr, Player[i].ledxl_mask);
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <Task_Round_Init+0x2c8>)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4413      	add	r3, r2
 8002750:	3301      	adds	r3, #1
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	4918      	ldr	r1, [pc, #96]	; (80027b8 <Task_Round_Init+0x2c8>)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	4610      	mov	r0, r2
 8002762:	f001 fbeb 	bl	8003f3c <Task_led_xl>
		Task_Blink_Line(i+1, 0, 1);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2201      	movs	r2, #1
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f001 fc38 	bl	8003fe8 <Task_Blink_Line>
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <Task_Round_Init+0x2bc>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4293      	cmp	r3, r2
 8002788:	dbde      	blt.n	8002748 <Task_Round_Init+0x258>
	}
	Task_Upload_Display();
 800278a:	f001 fc51 	bl	8004030 <Task_Upload_Display>

	pTask_1st_Flag = 1;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <Task_Round_Init+0x2e0>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bdb0      	pop	{r4, r5, r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000130 	.word	0x20000130
 80027a4:	200000e0 	.word	0x200000e0
 80027a8:	200000e8 	.word	0x200000e8
 80027ac:	200000d0 	.word	0x200000d0
 80027b0:	200000dc 	.word	0x200000dc
 80027b4:	200000de 	.word	0x200000de
 80027b8:	200000ec 	.word	0x200000ec
 80027bc:	2000012c 	.word	0x2000012c
 80027c0:	cccccccd 	.word	0xcccccccd
 80027c4:	1b4e81b5 	.word	0x1b4e81b5
 80027c8:	88888889 	.word	0x88888889
 80027cc:	51eb851f 	.word	0x51eb851f
 80027d0:	200000ce 	.word	0x200000ce
 80027d4:	00000000 	.word	0x00000000

080027d8 <Task_Playing>:

uint8_t Task_Playing(void)
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
	if(pTask_1st_Flag)
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <Task_Playing+0x160>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80be 	beq.w	8002964 <Task_Playing+0x18c>
	{
		//point_plus = get_player_available() - 1;
		turn_time_s = PlayCfg.Parameter.turn_time_s;
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <Task_Playing+0x164>)
 80027ea:	889a      	ldrh	r2, [r3, #4]
 80027ec:	4b54      	ldr	r3, [pc, #336]	; (8002940 <Task_Playing+0x168>)
 80027ee:	801a      	strh	r2, [r3, #0]

		last_average = Player[current_player].average;
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <Task_Playing+0x16c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <Task_Playing+0x170>)
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	4413      	add	r3, r2
 80027fa:	3304      	adds	r3, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a53      	ldr	r2, [pc, #332]	; (800294c <Task_Playing+0x174>)
 8002800:	6013      	str	r3, [r2, #0]
		Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <Task_Playing+0x178>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3b01      	subs	r3, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd ff9b 	bl	8000744 <__aeabi_ui2f>
 800280e:	4602      	mov	r2, r0
 8002810:	4b4e      	ldr	r3, [pc, #312]	; (800294c <Task_Playing+0x174>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7fd ffec 	bl	80007f4 <__aeabi_fmul>
 800281c:	4603      	mov	r3, r0
 800281e:	461c      	mov	r4, r3
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <Task_Playing+0x17c>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd ff91 	bl	800074c <__aeabi_i2f>
 800282a:	4603      	mov	r3, r0
 800282c:	4619      	mov	r1, r3
 800282e:	4620      	mov	r0, r4
 8002830:	f7fd fed8 	bl	80005e4 <__addsf3>
 8002834:	4603      	mov	r3, r0
 8002836:	461d      	mov	r5, r3
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <Task_Playing+0x178>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd ff81 	bl	8000744 <__aeabi_ui2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <Task_Playing+0x16c>)
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	4614      	mov	r4, r2
 800284a:	4619      	mov	r1, r3
 800284c:	4628      	mov	r0, r5
 800284e:	f7fe f885 	bl	800095c <__aeabi_fdiv>
 8002852:	4603      	mov	r3, r0
 8002854:	4619      	mov	r1, r3
 8002856:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <Task_Playing+0x170>)
 8002858:	0123      	lsls	r3, r4, #4
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	6019      	str	r1, [r3, #0]
		if(Player[current_player].average>99.99)
 8002860:	4b38      	ldr	r3, [pc, #224]	; (8002944 <Task_Playing+0x16c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <Task_Playing+0x170>)
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fdd2 	bl	8000418 <__aeabi_f2d>
 8002874:	a32e      	add	r3, pc, #184	; (adr r3, 8002930 <Task_Playing+0x158>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	f7fd fea3 	bl	80005c4 <__aeabi_dcmpgt>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <Task_Playing+0xbc>
			Player[current_player].average = 99.99;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <Task_Playing+0x16c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <Task_Playing+0x170>)
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	3304      	adds	r3, #4
 8002890:	4a31      	ldr	r2, [pc, #196]	; (8002958 <Task_Playing+0x180>)
 8002892:	601a      	str	r2, [r3, #0]

		Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <Task_Playing+0x168>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	4a30      	ldr	r2, [pc, #192]	; (800295c <Task_Playing+0x184>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <Task_Playing+0x168>)
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <Task_Playing+0x184>)
 80028aa:	fba3 1302 	umull	r1, r3, r3, r2
 80028ae:	08d9      	lsrs	r1, r3, #3
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4619      	mov	r1, r3
 80028be:	2308      	movs	r3, #8
 80028c0:	2208      	movs	r2, #8
 80028c2:	f7fe f9af 	bl	8000c24 <Led7TurnTime_Display>
		for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e020      	b.n	800290e <Task_Playing+0x136>
		{
			if(i==current_player)
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <Task_Playing+0x16c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d10c      	bne.n	80028f2 <Task_Playing+0x11a>
				Task_Blink_Line(Player[current_player].addr, 1, 1);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <Task_Playing+0x16c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <Task_Playing+0x170>)
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	3301      	adds	r3, #1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fb7c 	bl	8003fe8 <Task_Blink_Line>
 80028f0:	e00a      	b.n	8002908 <Task_Playing+0x130>
			else{
				Task_Blink_Line(Player[i].addr, 0, 1);
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <Task_Playing+0x170>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	3301      	adds	r3, #1
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2201      	movs	r2, #1
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fb70 	bl	8003fe8 <Task_Blink_Line>
		for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <Task_Playing+0x164>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4293      	cmp	r3, r2
 8002918:	dbd8      	blt.n	80028cc <Task_Playing+0xf4>
			}
		}
		stop_time = 0;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <Task_Playing+0x188>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
		pTask_1st_Flag = 0;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <Task_Playing+0x160>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
		return 0;
 8002926:	2300      	movs	r3, #0
 8002928:	f000 beed 	b.w	8003706 <Task_Playing+0xf2e>
 800292c:	f3af 8000 	nop.w
 8002930:	28f5c28f 	.word	0x28f5c28f
 8002934:	4058ff5c 	.word	0x4058ff5c
 8002938:	200000ce 	.word	0x200000ce
 800293c:	200000d0 	.word	0x200000d0
 8002940:	200000dc 	.word	0x200000dc
 8002944:	2000012c 	.word	0x2000012c
 8002948:	200000ec 	.word	0x200000ec
 800294c:	200000e4 	.word	0x200000e4
 8002950:	200000e0 	.word	0x200000e0
 8002954:	200000e8 	.word	0x200000e8
 8002958:	42c7fae1 	.word	0x42c7fae1
 800295c:	cccccccd 	.word	0xcccccccd
 8002960:	20000130 	.word	0x20000130
	}

	if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	48a2      	ldr	r0, [pc, #648]	; (8002bf0 <Task_Playing+0x418>)
 8002968:	f003 f9ba 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d005      	beq.n	800297e <Task_Playing+0x1a6>
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <Task_Playing+0x41c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4aa0      	ldr	r2, [pc, #640]	; (8002bf8 <Task_Playing+0x420>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f040 826b 	bne.w	8002e54 <Task_Playing+0x67c>
		delay_ms((int)BUTTON_DELAY);
 800297e:	2014      	movs	r0, #20
 8002980:	f001 fd5a 	bl	8004438 <delay_ms>
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	489a      	ldr	r0, [pc, #616]	; (8002bf0 <Task_Playing+0x418>)
 8002988:	f003 f9aa 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <Task_Playing+0x1c6>
 8002992:	4b98      	ldr	r3, [pc, #608]	; (8002bf4 <Task_Playing+0x41c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a98      	ldr	r2, [pc, #608]	; (8002bf8 <Task_Playing+0x420>)
 8002998:	4293      	cmp	r3, r2
 800299a:	f040 854d 	bne.w	8003438 <Task_Playing+0xc60>
			IRcode = 0;
 800299e:	4b95      	ldr	r3, [pc, #596]	; (8002bf4 <Task_Playing+0x41c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

			turn_time_s = PlayCfg.Parameter.turn_time_s;
 80029a4:	4b95      	ldr	r3, [pc, #596]	; (8002bfc <Task_Playing+0x424>)
 80029a6:	889a      	ldrh	r2, [r3, #4]
 80029a8:	4b95      	ldr	r3, [pc, #596]	; (8002c00 <Task_Playing+0x428>)
 80029aa:	801a      	strh	r2, [r3, #0]
			hit_get_point_cnt++;
 80029ac:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <Task_Playing+0x42c>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b93      	ldr	r3, [pc, #588]	; (8002c04 <Task_Playing+0x42c>)
 80029b6:	801a      	strh	r2, [r3, #0]
			//Update CTCN
			if(hit_get_point_cnt > Player[current_player].max_hit_get_point)
 80029b8:	4b93      	ldr	r3, [pc, #588]	; (8002c08 <Task_Playing+0x430>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4a93      	ldr	r2, [pc, #588]	; (8002c0c <Task_Playing+0x434>)
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	4413      	add	r3, r2
 80029c2:	330a      	adds	r3, #10
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <Task_Playing+0x42c>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20a      	bcs.n	80029e4 <Task_Playing+0x20c>
				Player[current_player].max_hit_get_point = hit_get_point_cnt;
 80029ce:	4b8e      	ldr	r3, [pc, #568]	; (8002c08 <Task_Playing+0x430>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <Task_Playing+0x42c>)
 80029d6:	8819      	ldrh	r1, [r3, #0]
 80029d8:	4a8c      	ldr	r2, [pc, #560]	; (8002c0c <Task_Playing+0x434>)
 80029da:	0103      	lsls	r3, r0, #4
 80029dc:	4413      	add	r3, r2
 80029de:	330a      	adds	r3, #10
 80029e0:	460a      	mov	r2, r1
 80029e2:	801a      	strh	r2, [r3, #0]

			if((hit_get_point_cnt < 100) && (all_turn_cnt < 100)){
 80029e4:	4b87      	ldr	r3, [pc, #540]	; (8002c04 <Task_Playing+0x42c>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	2b63      	cmp	r3, #99	; 0x63
 80029ea:	d82e      	bhi.n	8002a4a <Task_Playing+0x272>
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <Task_Playing+0x438>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b63      	cmp	r3, #99	; 0x63
 80029f2:	d82a      	bhi.n	8002a4a <Task_Playing+0x272>
				Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 80029f4:	4b86      	ldr	r3, [pc, #536]	; (8002c10 <Task_Playing+0x438>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a86      	ldr	r2, [pc, #536]	; (8002c14 <Task_Playing+0x43c>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	08db      	lsrs	r3, r3, #3
 8002a00:	4618      	mov	r0, r3
 8002a02:	4b83      	ldr	r3, [pc, #524]	; (8002c10 <Task_Playing+0x438>)
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <Task_Playing+0x43c>)
 8002a08:	fba3 2301 	umull	r2, r3, r3, r1
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	1aca      	subs	r2, r1, r3
 8002a18:	4614      	mov	r4, r2
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <Task_Playing+0x42c>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	4a7d      	ldr	r2, [pc, #500]	; (8002c14 <Task_Playing+0x43c>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461d      	mov	r5, r3
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <Task_Playing+0x42c>)
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <Task_Playing+0x43c>)
 8002a30:	fba3 1302 	umull	r1, r3, r3, r2
 8002a34:	08d9      	lsrs	r1, r3, #3
 8002a36:	460b      	mov	r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	462a      	mov	r2, r5
 8002a44:	4621      	mov	r1, r4
 8002a46:	f7fe f961 	bl	8000d0c <Led7HitCnt_Display>
			}

			Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 8002a4a:	4b71      	ldr	r3, [pc, #452]	; (8002c10 <Task_Playing+0x438>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fe77 	bl	8000744 <__aeabi_ui2f>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <Task_Playing+0x440>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7fd fec8 	bl	80007f4 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461c      	mov	r4, r3
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <Task_Playing+0x42c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fe6d 	bl	800074c <__aeabi_i2f>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7fd fdb4 	bl	80005e4 <__addsf3>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461d      	mov	r5, r3
 8002a80:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <Task_Playing+0x438>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fe5d 	bl	8000744 <__aeabi_ui2f>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <Task_Playing+0x430>)
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4614      	mov	r4, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	4628      	mov	r0, r5
 8002a96:	f7fd ff61 	bl	800095c <__aeabi_fdiv>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <Task_Playing+0x434>)
 8002aa0:	0123      	lsls	r3, r4, #4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	6019      	str	r1, [r3, #0]
			if(Player[current_player].average>99.99)
 8002aa8:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <Task_Playing+0x430>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <Task_Playing+0x434>)
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fcae 	bl	8000418 <__aeabi_f2d>
 8002abc:	a34a      	add	r3, pc, #296	; (adr r3, 8002be8 <Task_Playing+0x410>)
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	f7fd fd7f 	bl	80005c4 <__aeabi_dcmpgt>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <Task_Playing+0x304>
				Player[current_player].average = 99.99;
 8002acc:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <Task_Playing+0x430>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4a4e      	ldr	r2, [pc, #312]	; (8002c0c <Task_Playing+0x434>)
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <Task_Playing+0x444>)
 8002ada:	601a      	str	r2, [r3, #0]

			//Update  DHT & SDTL
			if(PlayCfg.Parameter.mode_signed)
 8002adc:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <Task_Playing+0x424>)
 8002ade:	7a1b      	ldrb	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8101 	beq.w	8002ce8 <Task_Playing+0x510>
			{
				point_plus = get_player_available() - 1;
 8002ae6:	f001 fb1b 	bl	8004120 <get_player_available>
 8002aea:	4603      	mov	r3, r0
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <Task_Playing+0x448>)
 8002af2:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e0ee      	b.n	8002cd8 <Task_Playing+0x500>
				{
					if(Player[i].point == 0)
 8002afa:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <Task_Playing+0x434>)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	3308      	adds	r3, #8
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80e2 	beq.w	8002cd0 <Task_Playing+0x4f8>
						continue;

					if(i==current_player){
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <Task_Playing+0x430>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f040 8085 	bne.w	8002c24 <Task_Playing+0x44c>
						Player[i].point += point_plus;
 8002b1a:	4a3c      	ldr	r2, [pc, #240]	; (8002c0c <Task_Playing+0x434>)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	3308      	adds	r3, #8
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <Task_Playing+0x448>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <Task_Playing+0x434>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	3308      	adds	r3, #8
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	801a      	strh	r2, [r3, #0]
						if(Player[i].sum_signed)
 8002b3e:	4a33      	ldr	r2, [pc, #204]	; (8002c0c <Task_Playing+0x434>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d037      	beq.n	8002bbe <Task_Playing+0x3e6>
						{
							if(point_plus >= Player[i].sum_point){
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <Task_Playing+0x448>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	492d      	ldr	r1, [pc, #180]	; (8002c0c <Task_Playing+0x434>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d319      	bcc.n	8002b98 <Task_Playing+0x3c0>
								Player[i].sum_point = point_plus - Player[i].sum_point;
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <Task_Playing+0x448>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4928      	ldr	r1, [pc, #160]	; (8002c0c <Task_Playing+0x434>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	330c      	adds	r3, #12
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <Task_Playing+0x434>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	330c      	adds	r3, #12
 8002b84:	460a      	mov	r2, r1
 8002b86:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 0;
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <Task_Playing+0x434>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	3302      	adds	r3, #2
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e09c      	b.n	8002cd2 <Task_Playing+0x4fa>
							} else{
								Player[i].sum_point -= point_plus;
 8002b98:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <Task_Playing+0x434>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <Task_Playing+0x448>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b299      	uxth	r1, r3
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <Task_Playing+0x434>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	460a      	mov	r2, r1
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	e089      	b.n	8002cd2 <Task_Playing+0x4fa>
							}
						}else{
							Player[i].sum_point += point_plus;
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <Task_Playing+0x434>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <Task_Playing+0x448>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <Task_Playing+0x434>)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	4413      	add	r3, r2
 8002bdc:	330c      	adds	r3, #12
 8002bde:	460a      	mov	r2, r1
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	e076      	b.n	8002cd2 <Task_Playing+0x4fa>
 8002be4:	f3af 8000 	nop.w
 8002be8:	28f5c28f 	.word	0x28f5c28f
 8002bec:	4058ff5c 	.word	0x4058ff5c
 8002bf0:	40010c00 	.word	0x40010c00
 8002bf4:	200000c8 	.word	0x200000c8
 8002bf8:	00910910 	.word	0x00910910
 8002bfc:	200000d0 	.word	0x200000d0
 8002c00:	200000dc 	.word	0x200000dc
 8002c04:	200000e8 	.word	0x200000e8
 8002c08:	2000012c 	.word	0x2000012c
 8002c0c:	200000ec 	.word	0x200000ec
 8002c10:	200000e0 	.word	0x200000e0
 8002c14:	cccccccd 	.word	0xcccccccd
 8002c18:	200000e4 	.word	0x200000e4
 8002c1c:	42c7fae1 	.word	0x42c7fae1
 8002c20:	2000012d 	.word	0x2000012d
						}

					}else{
						if(Player[i].point > 0)
 8002c24:	4aa0      	ldr	r2, [pc, #640]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <Task_Playing+0x47a>
							Player[i].point -= 1;
 8002c34:	4a9c      	ldr	r2, [pc, #624]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b299      	uxth	r1, r3
 8002c44:	4a98      	ldr	r2, [pc, #608]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	460a      	mov	r2, r1
 8002c50:	801a      	strh	r2, [r3, #0]

						if(Player[i].sum_signed){
 8002c52:	4a95      	ldr	r2, [pc, #596]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00f      	beq.n	8002c82 <Task_Playing+0x4aa>
							Player[i].sum_point += 1;
 8002c62:	4a91      	ldr	r2, [pc, #580]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b299      	uxth	r1, r3
 8002c72:	4a8d      	ldr	r2, [pc, #564]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	e027      	b.n	8002cd2 <Task_Playing+0x4fa>
						}else{
							if(Player[i].sum_point == 0){
 8002c82:	4a89      	ldr	r2, [pc, #548]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10e      	bne.n	8002cb0 <Task_Playing+0x4d8>
								Player[i].sum_point = 1;
 8002c92:	4a85      	ldr	r2, [pc, #532]	; (8002ea8 <Task_Playing+0x6d0>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 1;
 8002ca0:	4a81      	ldr	r2, [pc, #516]	; (8002ea8 <Task_Playing+0x6d0>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e010      	b.n	8002cd2 <Task_Playing+0x4fa>
							}else{
								Player[i].sum_point -= 1;
 8002cb0:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <Task_Playing+0x6d0>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	330c      	adds	r3, #12
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b299      	uxth	r1, r3
 8002cc0:	4a79      	ldr	r2, [pc, #484]	; (8002ea8 <Task_Playing+0x6d0>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	4413      	add	r3, r2
 8002cc8:	330c      	adds	r3, #12
 8002cca:	460a      	mov	r2, r1
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <Task_Playing+0x4fa>
						continue;
 8002cd0:	bf00      	nop
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <Task_Playing+0x6d4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	f6ff af0a 	blt.w	8002afa <Task_Playing+0x322>
 8002ce6:	e059      	b.n	8002d9c <Task_Playing+0x5c4>
							}
						}
					}
				}
			}else{
				Player[current_player].point += 1;
 8002ce8:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <Task_Playing+0x6d8>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <Task_Playing+0x6d0>)
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <Task_Playing+0x6d8>)
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b299      	uxth	r1, r3
 8002d00:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d02:	0103      	lsls	r3, r0, #4
 8002d04:	4413      	add	r3, r2
 8002d06:	3308      	adds	r3, #8
 8002d08:	460a      	mov	r2, r1
 8002d0a:	801a      	strh	r2, [r3, #0]
				if(Player[current_player].sum_signed){
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	3302      	adds	r3, #2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d02c      	beq.n	8002d78 <Task_Playing+0x5a0>
					if(Player[current_player].sum_point == 1){
 8002d1e:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	330c      	adds	r3, #12
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <Task_Playing+0x57a>
						Player[current_player].sum_point = 0;
 8002d30:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4a5c      	ldr	r2, [pc, #368]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
						Player[current_player].sum_signed = 0;
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e024      	b.n	8002d9c <Task_Playing+0x5c4>
					}else{
						Player[current_player].sum_point -= 1;
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	4a53      	ldr	r2, [pc, #332]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	4610      	mov	r0, r2
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d6c:	0103      	lsls	r3, r0, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	330c      	adds	r3, #12
 8002d72:	460a      	mov	r2, r1
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	e011      	b.n	8002d9c <Task_Playing+0x5c4>
					}
				} else{
					Player[current_player].sum_point += 1;
 8002d78:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	330c      	adds	r3, #12
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <Task_Playing+0x6d8>)
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	4a45      	ldr	r2, [pc, #276]	; (8002ea8 <Task_Playing+0x6d0>)
 8002d92:	0103      	lsls	r3, r0, #4
 8002d94:	4413      	add	r3, r2
 8002d96:	330c      	adds	r3, #12
 8002d98:	460a      	mov	r2, r1
 8002d9a:	801a      	strh	r2, [r3, #0]
				}
			}

			//Send Display
			Task_Upload_Display();
 8002d9c:	f001 f948 	bl	8004030 <Task_Upload_Display>
			buzzer_stt = 1;
 8002da0:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <Task_Playing+0x6dc>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]

			while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002da6:	e02d      	b.n	8002e04 <Task_Playing+0x62c>
			{
				button_cnt_t++;
 8002da8:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <Task_Playing+0x6e0>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <Task_Playing+0x6e0>)
 8002db2:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <Task_Playing+0x6e0>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b1e      	cmp	r3, #30
 8002dba:	d920      	bls.n	8002dfe <Task_Playing+0x626>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <Task_Playing+0x6e4>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	4a3f      	ldr	r2, [pc, #252]	; (8002ec0 <Task_Playing+0x6e8>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <Task_Playing+0x6e4>)
 8002dce:	881a      	ldrh	r2, [r3, #0]
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <Task_Playing+0x6e8>)
 8002dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd6:	08d9      	lsrs	r1, r3, #3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <Task_Playing+0x6e0>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	00da      	lsls	r2, r3, #3
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <Task_Playing+0x6e0>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f7fd ff13 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8002dfe:	2064      	movs	r0, #100	; 0x64
 8002e00:	f001 fb1a 	bl	8004438 <delay_ms>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	482f      	ldr	r0, [pc, #188]	; (8002ec4 <Task_Playing+0x6ec>)
 8002e08:	f002 ff6a 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d0ca      	beq.n	8002da8 <Task_Playing+0x5d0>
			}
			if(button_cnt_t > 30)
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <Task_Playing+0x6e0>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2b1e      	cmp	r3, #30
 8002e18:	d918      	bls.n	8002e4c <Task_Playing+0x674>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <Task_Playing+0x6e4>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <Task_Playing+0x6e8>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <Task_Playing+0x6e4>)
 8002e2c:	881a      	ldrh	r2, [r3, #0]
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <Task_Playing+0x6e8>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	08d9      	lsrs	r1, r3, #3
 8002e36:	460b      	mov	r3, r1
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	2200      	movs	r2, #0
 8002e48:	f7fd feec 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <Task_Playing+0x6e0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	801a      	strh	r2, [r3, #0]
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8002e52:	e2f1      	b.n	8003438 <Task_Playing+0xc60>
		}
	}
	else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8002e54:	2120      	movs	r1, #32
 8002e56:	481b      	ldr	r0, [pc, #108]	; (8002ec4 <Task_Playing+0x6ec>)
 8002e58:	f002 ff42 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 81e2 	bne.w	8003228 <Task_Playing+0xa50>
		delay_ms((int)BUTTON_DELAY);
 8002e64:	2014      	movs	r0, #20
 8002e66:	f001 fae7 	bl	8004438 <delay_ms>
		if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <Task_Playing+0x6ec>)
 8002e6e:	f002 ff37 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 82e0 	bne.w	800343a <Task_Playing+0xc62>
			IRcode = 0;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <Task_Playing+0x6f0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

			turn_time_s = PlayCfg.Parameter.turn_time_s;
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <Task_Playing+0x6d4>)
 8002e82:	889a      	ldrh	r2, [r3, #4]
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <Task_Playing+0x6e4>)
 8002e86:	801a      	strh	r2, [r3, #0]
			if(PlayCfg.Parameter.mode_signed)
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <Task_Playing+0x6d4>)
 8002e8a:	7a1b      	ldrb	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8104 	beq.w	800309a <Task_Playing+0x8c2>
			{
				point_plus = get_player_available() - 1;
 8002e92:	f001 f945 	bl	8004120 <get_player_available>
 8002e96:	4603      	mov	r3, r0
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <Task_Playing+0x6f4>)
 8002e9e:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e0f1      	b.n	800308a <Task_Playing+0x8b2>
 8002ea6:	bf00      	nop
 8002ea8:	200000ec 	.word	0x200000ec
 8002eac:	200000d0 	.word	0x200000d0
 8002eb0:	2000012c 	.word	0x2000012c
 8002eb4:	20000016 	.word	0x20000016
 8002eb8:	200000cc 	.word	0x200000cc
 8002ebc:	200000dc 	.word	0x200000dc
 8002ec0:	cccccccd 	.word	0xcccccccd
 8002ec4:	40010c00 	.word	0x40010c00
 8002ec8:	200000c8 	.word	0x200000c8
 8002ecc:	2000012d 	.word	0x2000012d
				{
					if(Player[i].point == 0)
 8002ed0:	4a9a      	ldr	r2, [pc, #616]	; (800313c <Task_Playing+0x964>)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3308      	adds	r3, #8
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80d0 	beq.w	8003082 <Task_Playing+0x8aa>
						continue;

					if(i==current_player){
 8002ee2:	4b97      	ldr	r3, [pc, #604]	; (8003140 <Task_Playing+0x968>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d17b      	bne.n	8002fe6 <Task_Playing+0x80e>
						if(Player[i].point >= point_plus)
 8002eee:	4a93      	ldr	r2, [pc, #588]	; (800313c <Task_Playing+0x964>)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	4b92      	ldr	r3, [pc, #584]	; (8003144 <Task_Playing+0x96c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d315      	bcc.n	8002f30 <Task_Playing+0x758>
							Player[current_player].point -= point_plus;
 8002f04:	4b8e      	ldr	r3, [pc, #568]	; (8003140 <Task_Playing+0x968>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4a8c      	ldr	r2, [pc, #560]	; (800313c <Task_Playing+0x964>)
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3308      	adds	r3, #8
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	4b8c      	ldr	r3, [pc, #560]	; (8003144 <Task_Playing+0x96c>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4989      	ldr	r1, [pc, #548]	; (8003140 <Task_Playing+0x968>)
 8002f1a:	7809      	ldrb	r1, [r1, #0]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b299      	uxth	r1, r3
 8002f22:	4a86      	ldr	r2, [pc, #536]	; (800313c <Task_Playing+0x964>)
 8002f24:	0103      	lsls	r3, r0, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	3308      	adds	r3, #8
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e007      	b.n	8002f40 <Task_Playing+0x768>
						else
							Player[current_player].point = 0;
 8002f30:	4b83      	ldr	r3, [pc, #524]	; (8003140 <Task_Playing+0x968>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4a81      	ldr	r2, [pc, #516]	; (800313c <Task_Playing+0x964>)
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4413      	add	r3, r2
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	801a      	strh	r2, [r3, #0]

						if(Player[i].sum_signed){
 8002f40:	4a7e      	ldr	r2, [pc, #504]	; (800313c <Task_Playing+0x964>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <Task_Playing+0x79e>
							Player[i].sum_point += point_plus;
 8002f50:	4a7a      	ldr	r2, [pc, #488]	; (800313c <Task_Playing+0x964>)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	4413      	add	r3, r2
 8002f58:	330c      	adds	r3, #12
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	4b79      	ldr	r3, [pc, #484]	; (8003144 <Task_Playing+0x96c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	b299      	uxth	r1, r3
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <Task_Playing+0x964>)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	330c      	adds	r3, #12
 8002f70:	460a      	mov	r2, r1
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	e086      	b.n	8003084 <Task_Playing+0x8ac>
						}else{
							if(point_plus > Player[i].sum_point){
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <Task_Playing+0x96c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	496f      	ldr	r1, [pc, #444]	; (800313c <Task_Playing+0x964>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	330c      	adds	r3, #12
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d919      	bls.n	8002fc0 <Task_Playing+0x7e8>
								Player[i].sum_point = point_plus - Player[i].sum_point;
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <Task_Playing+0x96c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	496a      	ldr	r1, [pc, #424]	; (800313c <Task_Playing+0x964>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	440b      	add	r3, r1
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	4a66      	ldr	r2, [pc, #408]	; (800313c <Task_Playing+0x964>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	330c      	adds	r3, #12
 8002fac:	460a      	mov	r2, r1
 8002fae:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 1;
 8002fb0:	4a62      	ldr	r2, [pc, #392]	; (800313c <Task_Playing+0x964>)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e061      	b.n	8003084 <Task_Playing+0x8ac>
							}else{
								Player[i].sum_point -= point_plus;
 8002fc0:	4a5e      	ldr	r2, [pc, #376]	; (800313c <Task_Playing+0x964>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	4413      	add	r3, r2
 8002fc8:	330c      	adds	r3, #12
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	4b5d      	ldr	r3, [pc, #372]	; (8003144 <Task_Playing+0x96c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	4a59      	ldr	r2, [pc, #356]	; (800313c <Task_Playing+0x964>)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4413      	add	r3, r2
 8002fde:	330c      	adds	r3, #12
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e04e      	b.n	8003084 <Task_Playing+0x8ac>
							}
						}
					} else{
						Player[i].point += 1;
 8002fe6:	4a55      	ldr	r2, [pc, #340]	; (800313c <Task_Playing+0x964>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4413      	add	r3, r2
 8002fee:	3308      	adds	r3, #8
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	4a51      	ldr	r2, [pc, #324]	; (800313c <Task_Playing+0x964>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	460a      	mov	r2, r1
 8003002:	801a      	strh	r2, [r3, #0]
						if(Player[i].sum_signed){
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <Task_Playing+0x964>)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4413      	add	r3, r2
 800300c:	3302      	adds	r3, #2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d026      	beq.n	8003062 <Task_Playing+0x88a>
							if(Player[i].sum_point == 1){
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <Task_Playing+0x964>)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	4413      	add	r3, r2
 800301c:	330c      	adds	r3, #12
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10e      	bne.n	8003042 <Task_Playing+0x86a>
								Player[i].sum_point = 0;
 8003024:	4a45      	ldr	r2, [pc, #276]	; (800313c <Task_Playing+0x964>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	330c      	adds	r3, #12
 800302e:	2200      	movs	r2, #0
 8003030:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 0;
 8003032:	4a42      	ldr	r2, [pc, #264]	; (800313c <Task_Playing+0x964>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4413      	add	r3, r2
 800303a:	3302      	adds	r3, #2
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e020      	b.n	8003084 <Task_Playing+0x8ac>
							}else{
								Player[i].sum_point -= 1;
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <Task_Playing+0x964>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4413      	add	r3, r2
 800304a:	330c      	adds	r3, #12
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	3b01      	subs	r3, #1
 8003050:	b299      	uxth	r1, r3
 8003052:	4a3a      	ldr	r2, [pc, #232]	; (800313c <Task_Playing+0x964>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	4413      	add	r3, r2
 800305a:	330c      	adds	r3, #12
 800305c:	460a      	mov	r2, r1
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e010      	b.n	8003084 <Task_Playing+0x8ac>
							}
						} else{
							Player[i].sum_point += 1;
 8003062:	4a36      	ldr	r2, [pc, #216]	; (800313c <Task_Playing+0x964>)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	330c      	adds	r3, #12
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	b299      	uxth	r1, r3
 8003072:	4a32      	ldr	r2, [pc, #200]	; (800313c <Task_Playing+0x964>)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4413      	add	r3, r2
 800307a:	330c      	adds	r3, #12
 800307c:	460a      	mov	r2, r1
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e000      	b.n	8003084 <Task_Playing+0x8ac>
						continue;
 8003082:	bf00      	nop
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <Task_Playing+0x970>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4293      	cmp	r3, r2
 8003094:	f6ff af1c 	blt.w	8002ed0 <Task_Playing+0x6f8>
 8003098:	e06a      	b.n	8003170 <Task_Playing+0x998>
						}
					}
				}
			} else{
				if(Player[current_player].point > 0)
 800309a:	4b29      	ldr	r3, [pc, #164]	; (8003140 <Task_Playing+0x968>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	; (800313c <Task_Playing+0x964>)
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	4413      	add	r3, r2
 80030a4:	3308      	adds	r3, #8
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <Task_Playing+0x8f8>
					Player[current_player].point -= 1;
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <Task_Playing+0x968>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <Task_Playing+0x964>)
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	3308      	adds	r3, #8
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <Task_Playing+0x968>)
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	4610      	mov	r0, r2
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b299      	uxth	r1, r3
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <Task_Playing+0x964>)
 80030c6:	0103      	lsls	r3, r0, #4
 80030c8:	4413      	add	r3, r2
 80030ca:	3308      	adds	r3, #8
 80030cc:	460a      	mov	r2, r1
 80030ce:	801a      	strh	r2, [r3, #0]

				if(Player[current_player].sum_signed){
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <Task_Playing+0x968>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <Task_Playing+0x964>)
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	3302      	adds	r3, #2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <Task_Playing+0x930>
					Player[current_player].sum_point += 1;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <Task_Playing+0x968>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <Task_Playing+0x964>)
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	330c      	adds	r3, #12
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <Task_Playing+0x968>)
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	4610      	mov	r0, r2
 80030f6:	3301      	adds	r3, #1
 80030f8:	b299      	uxth	r1, r3
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <Task_Playing+0x964>)
 80030fc:	0103      	lsls	r3, r0, #4
 80030fe:	4413      	add	r3, r2
 8003100:	330c      	adds	r3, #12
 8003102:	460a      	mov	r2, r1
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	e033      	b.n	8003170 <Task_Playing+0x998>
				}else{
					if(Player[current_player].sum_point == 0){
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <Task_Playing+0x968>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <Task_Playing+0x964>)
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	330c      	adds	r3, #12
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <Task_Playing+0x974>
						Player[current_player].sum_point = 1;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <Task_Playing+0x968>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <Task_Playing+0x964>)
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4413      	add	r3, r2
 8003124:	330c      	adds	r3, #12
 8003126:	2201      	movs	r2, #1
 8003128:	801a      	strh	r2, [r3, #0]
						Player[current_player].sum_signed = 1;
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <Task_Playing+0x968>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <Task_Playing+0x964>)
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	3302      	adds	r3, #2
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e019      	b.n	8003170 <Task_Playing+0x998>
 800313c:	200000ec 	.word	0x200000ec
 8003140:	2000012c 	.word	0x2000012c
 8003144:	2000012d 	.word	0x2000012d
 8003148:	200000d0 	.word	0x200000d0
					}else{
						Player[current_player].sum_point -= 1;
 800314c:	4b82      	ldr	r3, [pc, #520]	; (8003358 <Task_Playing+0xb80>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4a82      	ldr	r2, [pc, #520]	; (800335c <Task_Playing+0xb84>)
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	4413      	add	r3, r2
 8003156:	330c      	adds	r3, #12
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	4a7f      	ldr	r2, [pc, #508]	; (8003358 <Task_Playing+0xb80>)
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	4610      	mov	r0, r2
 8003160:	3b01      	subs	r3, #1
 8003162:	b299      	uxth	r1, r3
 8003164:	4a7d      	ldr	r2, [pc, #500]	; (800335c <Task_Playing+0xb84>)
 8003166:	0103      	lsls	r3, r0, #4
 8003168:	4413      	add	r3, r2
 800316a:	330c      	adds	r3, #12
 800316c:	460a      	mov	r2, r1
 800316e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			//Send Display
			Task_Upload_Display();
 8003170:	f000 ff5e 	bl	8004030 <Task_Upload_Display>
			buzzer_stt = 1;
 8003174:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <Task_Playing+0xb88>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
			while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 800317a:	e02d      	b.n	80031d8 <Task_Playing+0xa00>
			{
				button_cnt_t++;
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <Task_Playing+0xb8c>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b77      	ldr	r3, [pc, #476]	; (8003364 <Task_Playing+0xb8c>)
 8003186:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8003188:	4b76      	ldr	r3, [pc, #472]	; (8003364 <Task_Playing+0xb8c>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	2b1e      	cmp	r3, #30
 800318e:	d920      	bls.n	80031d2 <Task_Playing+0x9fa>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003190:	4b75      	ldr	r3, [pc, #468]	; (8003368 <Task_Playing+0xb90>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	4a75      	ldr	r2, [pc, #468]	; (800336c <Task_Playing+0xb94>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	4b71      	ldr	r3, [pc, #452]	; (8003368 <Task_Playing+0xb90>)
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	4b71      	ldr	r3, [pc, #452]	; (800336c <Task_Playing+0xb94>)
 80031a6:	fba3 1302 	umull	r1, r3, r3, r2
 80031aa:	08d9      	lsrs	r1, r3, #3
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <Task_Playing+0xb8c>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	00da      	lsls	r2, r3, #3
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <Task_Playing+0xb8c>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	f7fd fd29 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 80031d2:	2064      	movs	r0, #100	; 0x64
 80031d4:	f001 f930 	bl	8004438 <delay_ms>
			while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 80031d8:	2120      	movs	r1, #32
 80031da:	4865      	ldr	r0, [pc, #404]	; (8003370 <Task_Playing+0xb98>)
 80031dc:	f002 fd80 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d0ca      	beq.n	800317c <Task_Playing+0x9a4>
			}
			if(button_cnt_t > 30)
 80031e6:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <Task_Playing+0xb8c>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	2b1e      	cmp	r3, #30
 80031ec:	d918      	bls.n	8003220 <Task_Playing+0xa48>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <Task_Playing+0xb90>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	4a5e      	ldr	r2, [pc, #376]	; (800336c <Task_Playing+0xb94>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <Task_Playing+0xb90>)
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <Task_Playing+0xb94>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	08d9      	lsrs	r1, r3, #3
 800320a:	460b      	mov	r3, r1
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	4619      	mov	r1, r3
 8003218:	2300      	movs	r3, #0
 800321a:	2200      	movs	r2, #0
 800321c:	f7fd fd02 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8003220:	4b50      	ldr	r3, [pc, #320]	; (8003364 <Task_Playing+0xb8c>)
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e108      	b.n	800343a <Task_Playing+0xc62>
		}
	}
	else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	4851      	ldr	r0, [pc, #324]	; (8003370 <Task_Playing+0xb98>)
 800322c:	f002 fd58 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003230:	4603      	mov	r3, r0
 8003232:	2b01      	cmp	r3, #1
 8003234:	d005      	beq.n	8003242 <Task_Playing+0xa6a>
 8003236:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <Task_Playing+0xb9c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4f      	ldr	r2, [pc, #316]	; (8003378 <Task_Playing+0xba0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f040 80fc 	bne.w	800343a <Task_Playing+0xc62>
		delay_ms((int)BUTTON_DELAY);
 8003242:	2014      	movs	r0, #20
 8003244:	f001 f8f8 	bl	8004438 <delay_ms>
		if((NEXT_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_NEXT_CODE)){
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	4849      	ldr	r0, [pc, #292]	; (8003370 <Task_Playing+0xb98>)
 800324c:	f002 fd48 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d005      	beq.n	8003262 <Task_Playing+0xa8a>
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <Task_Playing+0xb9c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a47      	ldr	r2, [pc, #284]	; (8003378 <Task_Playing+0xba0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	f040 80ec 	bne.w	800343a <Task_Playing+0xc62>
			IRcode = 0;
 8003262:	4b44      	ldr	r3, [pc, #272]	; (8003374 <Task_Playing+0xb9c>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

			uint8_t temp_play = get_next_user(current_player);
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <Task_Playing+0xb80>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 ff7d 	bl	800416c <get_next_user>
 8003272:	4603      	mov	r3, r0
 8003274:	70fb      	strb	r3, [r7, #3]
			if(temp_play == 0xFF)
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d101      	bne.n	8003280 <Task_Playing+0xaa8>
				return temp_play;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	e242      	b.n	8003706 <Task_Playing+0xf2e>
			else if(Player[temp_play].addr < Player[current_player].addr)
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	4a36      	ldr	r2, [pc, #216]	; (800335c <Task_Playing+0xb84>)
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4413      	add	r3, r2
 8003288:	3301      	adds	r3, #1
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <Task_Playing+0xb80>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4932      	ldr	r1, [pc, #200]	; (800335c <Task_Playing+0xb84>)
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	440b      	add	r3, r1
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d204      	bcs.n	80032a8 <Task_Playing+0xad0>
				all_turn_cnt++;
 800329e:	4b37      	ldr	r3, [pc, #220]	; (800337c <Task_Playing+0xba4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a35      	ldr	r2, [pc, #212]	; (800337c <Task_Playing+0xba4>)
 80032a6:	6013      	str	r3, [r2, #0]

			current_player = temp_play;
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <Task_Playing+0xb80>)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	7013      	strb	r3, [r2, #0]

			hit_get_point_cnt = 0;
 80032ae:	4b34      	ldr	r3, [pc, #208]	; (8003380 <Task_Playing+0xba8>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	e010      	b.n	80032dc <Task_Playing+0xb04>
			{
				Player[i].sum_point = 0;
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <Task_Playing+0xb84>)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4413      	add	r3, r2
 80032c2:	330c      	adds	r3, #12
 80032c4:	2200      	movs	r2, #0
 80032c6:	801a      	strh	r2, [r3, #0]
				Player[i].sum_signed = 0;
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <Task_Playing+0xb84>)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	3302      	adds	r3, #2
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <Task_Playing+0xbac>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	dbe8      	blt.n	80032ba <Task_Playing+0xae2>
			}
			if(all_turn_cnt < 100){
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <Task_Playing+0xba4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b63      	cmp	r3, #99	; 0x63
 80032ee:	d82a      	bhi.n	8003346 <Task_Playing+0xb6e>
				Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <Task_Playing+0xba4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <Task_Playing+0xb94>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	08db      	lsrs	r3, r3, #3
 80032fc:	4618      	mov	r0, r3
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <Task_Playing+0xba4>)
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <Task_Playing+0xb94>)
 8003304:	fba3 2301 	umull	r2, r3, r3, r1
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	1aca      	subs	r2, r1, r3
 8003314:	4614      	mov	r4, r2
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <Task_Playing+0xba8>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	4a14      	ldr	r2, [pc, #80]	; (800336c <Task_Playing+0xb94>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	b29b      	uxth	r3, r3
 8003324:	461d      	mov	r5, r3
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <Task_Playing+0xba8>)
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <Task_Playing+0xb94>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	08d9      	lsrs	r1, r3, #3
 8003332:	460b      	mov	r3, r1
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	462a      	mov	r2, r5
 8003340:	4621      	mov	r1, r4
 8003342:	f7fd fce3 	bl	8000d0c <Led7HitCnt_Display>
			}
			Task_Upload_Display();
 8003346:	f000 fe73 	bl	8004030 <Task_Upload_Display>
			buzzer_stt = 1;
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <Task_Playing+0xb88>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
			pTask_1st_Flag = 1;
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <Task_Playing+0xbb0>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
			while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8003356:	e047      	b.n	80033e8 <Task_Playing+0xc10>
 8003358:	2000012c 	.word	0x2000012c
 800335c:	200000ec 	.word	0x200000ec
 8003360:	20000016 	.word	0x20000016
 8003364:	200000cc 	.word	0x200000cc
 8003368:	200000dc 	.word	0x200000dc
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	40010c00 	.word	0x40010c00
 8003374:	200000c8 	.word	0x200000c8
 8003378:	00904904 	.word	0x00904904
 800337c:	200000e0 	.word	0x200000e0
 8003380:	200000e8 	.word	0x200000e8
 8003384:	200000d0 	.word	0x200000d0
 8003388:	200000ce 	.word	0x200000ce
			{
				button_cnt_t++;
 800338c:	4b9f      	ldr	r3, [pc, #636]	; (800360c <Task_Playing+0xe34>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b9d      	ldr	r3, [pc, #628]	; (800360c <Task_Playing+0xe34>)
 8003396:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8003398:	4b9c      	ldr	r3, [pc, #624]	; (800360c <Task_Playing+0xe34>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	2b1e      	cmp	r3, #30
 800339e:	d920      	bls.n	80033e2 <Task_Playing+0xc0a>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80033a0:	4b9b      	ldr	r3, [pc, #620]	; (8003610 <Task_Playing+0xe38>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	4a9b      	ldr	r2, [pc, #620]	; (8003614 <Task_Playing+0xe3c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	4b97      	ldr	r3, [pc, #604]	; (8003610 <Task_Playing+0xe38>)
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	4b97      	ldr	r3, [pc, #604]	; (8003614 <Task_Playing+0xe3c>)
 80033b6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ba:	08d9      	lsrs	r1, r3, #3
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	4b90      	ldr	r3, [pc, #576]	; (800360c <Task_Playing+0xe34>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	00da      	lsls	r2, r3, #3
 80033d4:	4b8d      	ldr	r3, [pc, #564]	; (800360c <Task_Playing+0xe34>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f7fd fc21 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 80033e2:	2064      	movs	r0, #100	; 0x64
 80033e4:	f001 f828 	bl	8004438 <delay_ms>
			while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	488b      	ldr	r0, [pc, #556]	; (8003618 <Task_Playing+0xe40>)
 80033ec:	f002 fc78 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d0ca      	beq.n	800338c <Task_Playing+0xbb4>
			}
			if(button_cnt_t > 30)
 80033f6:	4b85      	ldr	r3, [pc, #532]	; (800360c <Task_Playing+0xe34>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	2b1e      	cmp	r3, #30
 80033fc:	d918      	bls.n	8003430 <Task_Playing+0xc58>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 80033fe:	4b84      	ldr	r3, [pc, #528]	; (8003610 <Task_Playing+0xe38>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	4a84      	ldr	r2, [pc, #528]	; (8003614 <Task_Playing+0xe3c>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	08db      	lsrs	r3, r3, #3
 800340a:	b29b      	uxth	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	4b80      	ldr	r3, [pc, #512]	; (8003610 <Task_Playing+0xe38>)
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	4b80      	ldr	r3, [pc, #512]	; (8003614 <Task_Playing+0xe3c>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	08d9      	lsrs	r1, r3, #3
 800341a:	460b      	mov	r3, r1
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	2300      	movs	r3, #0
 800342a:	2200      	movs	r2, #0
 800342c:	f7fd fbfa 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8003430:	4b76      	ldr	r3, [pc, #472]	; (800360c <Task_Playing+0xe34>)
 8003432:	2200      	movs	r2, #0
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	e000      	b.n	800343a <Task_Playing+0xc62>
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || (IRcode == IR_PUSH_CODE)){
 8003438:	bf00      	nop
		}
	}

	if(MODE_BUT_VAL == BUTTON_ACTIVE){
 800343a:	2102      	movs	r1, #2
 800343c:	4876      	ldr	r0, [pc, #472]	; (8003618 <Task_Playing+0xe40>)
 800343e:	f002 fc4f 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 8122 	bne.w	800368e <Task_Playing+0xeb6>
		delay_ms((int)BUTTON_DELAY);
 800344a:	2014      	movs	r0, #20
 800344c:	f000 fff4 	bl	8004438 <delay_ms>
		if(MODE_BUT_VAL == BUTTON_ACTIVE){
 8003450:	2102      	movs	r1, #2
 8003452:	4871      	ldr	r0, [pc, #452]	; (8003618 <Task_Playing+0xe40>)
 8003454:	f002 fc44 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	f040 8117 	bne.w	800368e <Task_Playing+0xeb6>
			while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8003460:	e0ed      	b.n	800363e <Task_Playing+0xe66>
			{
				button_cnt_t++;
 8003462:	4b6a      	ldr	r3, [pc, #424]	; (800360c <Task_Playing+0xe34>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b68      	ldr	r3, [pc, #416]	; (800360c <Task_Playing+0xe34>)
 800346c:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <Task_Playing+0xe34>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2b14      	cmp	r3, #20
 8003474:	f240 80e0 	bls.w	8003638 <Task_Playing+0xe60>
					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003478:	4b65      	ldr	r3, [pc, #404]	; (8003610 <Task_Playing+0xe38>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <Task_Playing+0xe3c>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b29b      	uxth	r3, r3
 8003486:	4618      	mov	r0, r3
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <Task_Playing+0xe38>)
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	4b61      	ldr	r3, [pc, #388]	; (8003614 <Task_Playing+0xe3c>)
 800348e:	fba3 1302 	umull	r1, r3, r3, r2
 8003492:	08d9      	lsrs	r1, r3, #3
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	4b5a      	ldr	r3, [pc, #360]	; (800360c <Task_Playing+0xe34>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	00da      	lsls	r2, r3, #3
 80034ac:	4b57      	ldr	r3, [pc, #348]	; (800360c <Task_Playing+0xe34>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f7fd fbb5 	bl	8000c24 <Led7TurnTime_Display>
					if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	4856      	ldr	r0, [pc, #344]	; (8003618 <Task_Playing+0xe40>)
 80034be:	f002 fc0f 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d127      	bne.n	8003518 <Task_Playing+0xd40>
						Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask<<1)|0x01;
 80034c8:	4b54      	ldr	r3, [pc, #336]	; (800361c <Task_Playing+0xe44>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4a54      	ldr	r2, [pc, #336]	; (8003620 <Task_Playing+0xe48>)
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4413      	add	r3, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <Task_Playing+0xe44>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b2d1      	uxtb	r1, r2
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <Task_Playing+0xe48>)
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	4413      	add	r3, r2
 80034ea:	460a      	mov	r2, r1
 80034ec:	701a      	strb	r2, [r3, #0]
						Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 80034ee:	4b4b      	ldr	r3, [pc, #300]	; (800361c <Task_Playing+0xe44>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4a4b      	ldr	r2, [pc, #300]	; (8003620 <Task_Playing+0xe48>)
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	3301      	adds	r3, #1
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	4b47      	ldr	r3, [pc, #284]	; (800361c <Task_Playing+0xe44>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4947      	ldr	r1, [pc, #284]	; (8003620 <Task_Playing+0xe48>)
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	440b      	add	r3, r1
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fd16 	bl	8003f3c <Task_led_xl>
						buzzer_stt = 1;
 8003510:	4b44      	ldr	r3, [pc, #272]	; (8003624 <Task_Playing+0xe4c>)
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e08f      	b.n	8003638 <Task_Playing+0xe60>
						//while(PLUS_BUT_VAL == BUTTON_ACTIVE);
					}
					else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8003518:	2120      	movs	r1, #32
 800351a:	483f      	ldr	r0, [pc, #252]	; (8003618 <Task_Playing+0xe40>)
 800351c:	f002 fbe0 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003520:	4603      	mov	r3, r0
 8003522:	2b01      	cmp	r3, #1
 8003524:	d133      	bne.n	800358e <Task_Playing+0xdb6>
						if(Player[current_player].ledxl_mask != 0){
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <Task_Playing+0xe44>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <Task_Playing+0xe48>)
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d027      	beq.n	8003586 <Task_Playing+0xdae>
							Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask>>1)&0x0F;
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <Task_Playing+0xe44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4a39      	ldr	r2, [pc, #228]	; (8003620 <Task_Playing+0xe48>)
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4413      	add	r3, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <Task_Playing+0xe44>)
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	4610      	mov	r0, r2
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	b2d9      	uxtb	r1, r3
 8003552:	4a33      	ldr	r2, [pc, #204]	; (8003620 <Task_Playing+0xe48>)
 8003554:	0103      	lsls	r3, r0, #4
 8003556:	4413      	add	r3, r2
 8003558:	460a      	mov	r2, r1
 800355a:	701a      	strb	r2, [r3, #0]
							Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <Task_Playing+0xe44>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <Task_Playing+0xe48>)
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	3301      	adds	r3, #1
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <Task_Playing+0xe44>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	492c      	ldr	r1, [pc, #176]	; (8003620 <Task_Playing+0xe48>)
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	440b      	add	r3, r1
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 fcdf 	bl	8003f3c <Task_led_xl>
							turn_time_s = PlayCfg.Parameter.turn_time_s;
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <Task_Playing+0xe50>)
 8003580:	889a      	ldrh	r2, [r3, #4]
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <Task_Playing+0xe38>)
 8003584:	801a      	strh	r2, [r3, #0]
						}
						buzzer_stt = 1;
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <Task_Playing+0xe4c>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e054      	b.n	8003638 <Task_Playing+0xe60>
						//while(MINUS_BUT_VAL == BUTTON_ACTIVE);
					}
					else if(NEXT_BUT_VAL == BUTTON_ACTIVE){
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	4821      	ldr	r0, [pc, #132]	; (8003618 <Task_Playing+0xe40>)
 8003592:	f002 fba5 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d14d      	bne.n	8003638 <Task_Playing+0xe60>
						stop_time = 1;
 800359c:	4b23      	ldr	r3, [pc, #140]	; (800362c <Task_Playing+0xe54>)
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
						current_player = 0;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <Task_Playing+0xe44>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
						hit_get_point_cnt = 0;
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <Task_Playing+0xe58>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	801a      	strh	r2, [r3, #0]
						rount_time_s = PlayCfg.Parameter.rount_time_s;
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <Task_Playing+0xe50>)
 80035b0:	88da      	ldrh	r2, [r3, #6]
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <Task_Playing+0xe5c>)
 80035b4:	801a      	strh	r2, [r3, #0]

						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	e00b      	b.n	80035d4 <Task_Playing+0xdfc>
						{
							Task_Blink_Line(i+1, 0, 1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2201      	movs	r2, #1
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd0d 	bl	8003fe8 <Task_Blink_Line>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <Task_Playing+0xe50>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4293      	cmp	r3, r2
 80035de:	dbed      	blt.n	80035bc <Task_Playing+0xde4>
						}
						buzzer_stt = 1;
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <Task_Playing+0xe4c>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
						if((PlayCfg.Parameter.mode_signed) && (PlayCfg.Parameter.playing_mode > 3)){
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <Task_Playing+0xe50>)
 80035e8:	7a1b      	ldrb	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <Task_Playing+0xe30>
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <Task_Playing+0xe50>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d908      	bls.n	8003608 <Task_Playing+0xe30>
							if(get_player_available() == 1){
 80035f6:	f000 fd93 	bl	8004120 <get_player_available>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <Task_Playing+0xe2c>
								return 0xFF;
 8003600:	23ff      	movs	r3, #255	; 0xff
 8003602:	e080      	b.n	8003706 <Task_Playing+0xf2e>
							}
							//Random address, close player
							update_rand_addr();
 8003604:	f000 fe42 	bl	800428c <update_rand_addr>
						}
						//while(NEXT_BUT_VAL == BUTTON_ACTIVE);
						return 1;
 8003608:	2301      	movs	r3, #1
 800360a:	e07c      	b.n	8003706 <Task_Playing+0xf2e>
 800360c:	200000cc 	.word	0x200000cc
 8003610:	200000dc 	.word	0x200000dc
 8003614:	cccccccd 	.word	0xcccccccd
 8003618:	40010c00 	.word	0x40010c00
 800361c:	2000012c 	.word	0x2000012c
 8003620:	200000ec 	.word	0x200000ec
 8003624:	20000016 	.word	0x20000016
 8003628:	200000d0 	.word	0x200000d0
 800362c:	20000130 	.word	0x20000130
 8003630:	200000e8 	.word	0x200000e8
 8003634:	200000de 	.word	0x200000de
					}
				}
				delay_ms(100);
 8003638:	2064      	movs	r0, #100	; 0x64
 800363a:	f000 fefd 	bl	8004438 <delay_ms>
			while(MODE_BUT_VAL == BUTTON_ACTIVE)
 800363e:	2102      	movs	r1, #2
 8003640:	4833      	ldr	r0, [pc, #204]	; (8003710 <Task_Playing+0xf38>)
 8003642:	f002 fb4d 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	f43f af0a 	beq.w	8003462 <Task_Playing+0xc8a>
			}
			if(button_cnt_t > 20)
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <Task_Playing+0xf3c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	2b14      	cmp	r3, #20
 8003654:	d918      	bls.n	8003688 <Task_Playing+0xeb0>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <Task_Playing+0xf40>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	4a30      	ldr	r2, [pc, #192]	; (800371c <Task_Playing+0xf44>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	b29b      	uxth	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <Task_Playing+0xf40>)
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <Task_Playing+0xf44>)
 800366c:	fba3 1302 	umull	r1, r3, r3, r2
 8003670:	08d9      	lsrs	r1, r3, #3
 8003672:	460b      	mov	r3, r1
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	b29b      	uxth	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	2300      	movs	r3, #0
 8003682:	2200      	movs	r2, #0
 8003684:	f7fd face 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <Task_Playing+0xf3c>)
 800368a:	2200      	movs	r2, #0
 800368c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(IRcode == IR_LEDXL_CODE){
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <Task_Playing+0xf48>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a24      	ldr	r2, [pc, #144]	; (8003724 <Task_Playing+0xf4c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d135      	bne.n	8003704 <Task_Playing+0xf2c>
		IRcode = 0;
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <Task_Playing+0xf48>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
		if(Player[current_player].ledxl_mask != 0){
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <Task_Playing+0xf50>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	4a22      	ldr	r2, [pc, #136]	; (800372c <Task_Playing+0xf54>)
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d027      	beq.n	80036fe <Task_Playing+0xf26>
			Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask>>1)&0x0F;
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <Task_Playing+0xf50>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <Task_Playing+0xf54>)
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <Task_Playing+0xf50>)
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	4610      	mov	r0, r2
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	b2d9      	uxtb	r1, r3
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <Task_Playing+0xf54>)
 80036cc:	0103      	lsls	r3, r0, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	460a      	mov	r2, r1
 80036d2:	701a      	strb	r2, [r3, #0]
			Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <Task_Playing+0xf50>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <Task_Playing+0xf54>)
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	4413      	add	r3, r2
 80036de:	3301      	adds	r3, #1
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <Task_Playing+0xf50>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	4911      	ldr	r1, [pc, #68]	; (800372c <Task_Playing+0xf54>)
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	440b      	add	r3, r1
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 fc23 	bl	8003f3c <Task_led_xl>
			turn_time_s = PlayCfg.Parameter.turn_time_s;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <Task_Playing+0xf58>)
 80036f8:	889a      	ldrh	r2, [r3, #4]
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <Task_Playing+0xf40>)
 80036fc:	801a      	strh	r2, [r3, #0]
		}
		buzzer_stt = 1;
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <Task_Playing+0xf5c>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bdb0      	pop	{r4, r5, r7, pc}
 800370e:	bf00      	nop
 8003710:	40010c00 	.word	0x40010c00
 8003714:	200000cc 	.word	0x200000cc
 8003718:	200000dc 	.word	0x200000dc
 800371c:	cccccccd 	.word	0xcccccccd
 8003720:	200000c8 	.word	0x200000c8
 8003724:	00908908 	.word	0x00908908
 8003728:	2000012c 	.word	0x2000012c
 800372c:	200000ec 	.word	0x200000ec
 8003730:	200000d0 	.word	0x200000d0
 8003734:	20000016 	.word	0x20000016

08003738 <Task_TestMode_Display>:

void Task_TestMode_Display(uint8_t global_num)
{
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	b096      	sub	sp, #88	; 0x58
 800373e:	af0e      	add	r7, sp, #56	; 0x38
 8003740:	4603      	mov	r3, r0
 8003742:	77fb      	strb	r3, [r7, #31]
	static uint8_t lednum = 16;
	buzzer_stt = 1;
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <Task_TestMode_Display+0x120>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]

	Task_Led_StartPoint(global_num, global_num, global_num);
 800374a:	7ffa      	ldrb	r2, [r7, #31]
 800374c:	7ff9      	ldrb	r1, [r7, #31]
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fc09 	bl	8003f68 <Task_Led_StartPoint>

	if(lednum%16>7)
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <Task_TestMode_Display+0x124>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <Task_TestMode_Display+0x40>
		Led7TurnTime_Display(global_num, global_num, 8, (lednum%8));
 8003764:	7ff8      	ldrb	r0, [r7, #31]
 8003766:	7ff9      	ldrb	r1, [r7, #31]
 8003768:	4b3c      	ldr	r3, [pc, #240]	; (800385c <Task_TestMode_Display+0x124>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	2208      	movs	r2, #8
 8003772:	f7fd fa57 	bl	8000c24 <Led7TurnTime_Display>
 8003776:	e008      	b.n	800378a <Task_TestMode_Display+0x52>
	else
		Led7TurnTime_Display(global_num, global_num, lednum%8, 0);
 8003778:	7ff8      	ldrb	r0, [r7, #31]
 800377a:	7ff9      	ldrb	r1, [r7, #31]
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <Task_TestMode_Display+0x124>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f003 0207 	and.w	r2, r3, #7
 8003784:	2300      	movs	r3, #0
 8003786:	f7fd fa4d 	bl	8000c24 <Led7TurnTime_Display>

	Led7HitCnt_Display(global_num, global_num, global_num, global_num);
 800378a:	7ff8      	ldrb	r0, [r7, #31]
 800378c:	7ff9      	ldrb	r1, [r7, #31]
 800378e:	7ffa      	ldrb	r2, [r7, #31]
 8003790:	7ffb      	ldrb	r3, [r7, #31]
 8003792:	f7fd fabb 	bl	8000d0c <Led7HitCnt_Display>
	Led7RoundTime_Display(global_num, global_num, global_num, global_num, 1);
 8003796:	7ff8      	ldrb	r0, [r7, #31]
 8003798:	7ff9      	ldrb	r1, [r7, #31]
 800379a:	7ffa      	ldrb	r2, [r7, #31]
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	2401      	movs	r4, #1
 80037a0:	9400      	str	r4, [sp, #0]
 80037a2:	f7fd fb23 	bl	8000dec <Led7RoundTime_Display>

	printf("ADDR0%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n", (int)DATA_LED7_TYPE,
 80037a6:	f897 c01f 	ldrb.w	ip, [r7, #31]
 80037aa:	f897 e01f 	ldrb.w	lr, [r7, #31]
 80037ae:	7ff9      	ldrb	r1, [r7, #31]
 80037b0:	7ff8      	ldrb	r0, [r7, #31]
 80037b2:	7ffc      	ldrb	r4, [r7, #31]
 80037b4:	7ffd      	ldrb	r5, [r7, #31]
 80037b6:	7ffe      	ldrb	r6, [r7, #31]
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	7ffa      	ldrb	r2, [r7, #31]
 80037be:	617a      	str	r2, [r7, #20]
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	7ffa      	ldrb	r2, [r7, #31]
 80037c6:	60fa      	str	r2, [r7, #12]
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	7ffa      	ldrb	r2, [r7, #31]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	f897 801f 	ldrb.w	r8, [r7, #31]
 80037d4:	f8c7 8000 	str.w	r8, [r7]
 80037d8:	7ffa      	ldrb	r2, [r7, #31]
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	930d      	str	r3, [sp, #52]	; 0x34
 80037de:	920c      	str	r2, [sp, #48]	; 0x30
 80037e0:	f8d7 8000 	ldr.w	r8, [r7]
 80037e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80037e8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80037ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80037f0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80037f4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80037f8:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80037fc:	f8cd 8020 	str.w	r8, [sp, #32]
 8003800:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8003804:	f8cd 801c 	str.w	r8, [sp, #28]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	9206      	str	r2, [sp, #24]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	9305      	str	r3, [sp, #20]
 8003810:	9604      	str	r6, [sp, #16]
 8003812:	9503      	str	r5, [sp, #12]
 8003814:	9402      	str	r4, [sp, #8]
 8003816:	9001      	str	r0, [sp, #4]
 8003818:	9100      	str	r1, [sp, #0]
 800381a:	4673      	mov	r3, lr
 800381c:	4662      	mov	r2, ip
 800381e:	2101      	movs	r1, #1
 8003820:	480f      	ldr	r0, [pc, #60]	; (8003860 <Task_TestMode_Display+0x128>)
 8003822:	f004 f839 	bl	8007898 <iprintf>
			global_num, global_num, global_num, global_num, global_num,
			global_num, global_num, global_num, global_num, global_num,
			global_num, global_num, global_num, global_num, global_num, global_num);
	printf("ADDR0%d\n", (int)UPDATE_LED7_TYPE);
 8003826:	2102      	movs	r1, #2
 8003828:	480e      	ldr	r0, [pc, #56]	; (8003864 <Task_TestMode_Display+0x12c>)
 800382a:	f004 f835 	bl	8007898 <iprintf>
	delay_ms(200);
 800382e:	20c8      	movs	r0, #200	; 0xc8
 8003830:	f000 fe02 	bl	8004438 <delay_ms>

	lednum--;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <Task_TestMode_Display+0x124>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3b01      	subs	r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <Task_TestMode_Display+0x124>)
 800383e:	701a      	strb	r2, [r3, #0]
	if(lednum == 0)
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <Task_TestMode_Display+0x124>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <Task_TestMode_Display+0x116>
		lednum = 16;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <Task_TestMode_Display+0x124>)
 800384a:	2210      	movs	r2, #16
 800384c:	701a      	strb	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	20000016 	.word	0x20000016
 800385c:	20000018 	.word	0x20000018
 8003860:	080088c4 	.word	0x080088c4
 8003864:	080088f0 	.word	0x080088f0

08003868 <Task_Run_TestMode>:

uint8_t Task_Run_TestMode(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	static uint8_t num = 0;
	static uint8_t lxl_mask = 0x0F;

	if(PLUS_BUT_VAL == BUTTON_ACTIVE)
 800386c:	2180      	movs	r1, #128	; 0x80
 800386e:	48a0      	ldr	r0, [pc, #640]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003870:	f002 fa36 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d175      	bne.n	8003966 <Task_Run_TestMode+0xfe>
	{
		delay_ms((int)BUTTON_DELAY);
 800387a:	2014      	movs	r0, #20
 800387c:	f000 fddc 	bl	8004438 <delay_ms>
		if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	489b      	ldr	r0, [pc, #620]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003884:	f002 fa2c 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 812c 	bne.w	8003ae8 <Task_Run_TestMode+0x280>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003890:	e02d      	b.n	80038ee <Task_Run_TestMode+0x86>
				button_cnt_t++;
 8003892:	4b98      	ldr	r3, [pc, #608]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <Task_Run_TestMode+0x28c>)
 800389c:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 800389e:	4b95      	ldr	r3, [pc, #596]	; (8003af4 <Task_Run_TestMode+0x28c>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	2b14      	cmp	r3, #20
 80038a4:	d920      	bls.n	80038e8 <Task_Run_TestMode+0x80>
					Led7TurnTime_Display(num/10, num%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <Task_Run_TestMode+0x290>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	4a94      	ldr	r2, [pc, #592]	; (8003afc <Task_Run_TestMode+0x294>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4618      	mov	r0, r3
 80038b6:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <Task_Run_TestMode+0x290>)
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	4b90      	ldr	r3, [pc, #576]	; (8003afc <Task_Run_TestMode+0x294>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	08d9      	lsrs	r1, r3, #3
 80038c2:	460b      	mov	r3, r1
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4619      	mov	r1, r3
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <Task_Run_TestMode+0x28c>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	00da      	lsls	r2, r3, #3
 80038da:	4b86      	ldr	r3, [pc, #536]	; (8003af4 <Task_Run_TestMode+0x28c>)
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	f7fd f99e 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 80038e8:	2064      	movs	r0, #100	; 0x64
 80038ea:	f000 fda5 	bl	8004438 <delay_ms>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE){
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	487f      	ldr	r0, [pc, #508]	; (8003af0 <Task_Run_TestMode+0x288>)
 80038f2:	f002 f9f5 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d0ca      	beq.n	8003892 <Task_Run_TestMode+0x2a>
			}
			if(button_cnt_t > 20){
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <Task_Run_TestMode+0x28c>)
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2b14      	cmp	r3, #20
 8003902:	d904      	bls.n	800390e <Task_Run_TestMode+0xa6>
				button_cnt_t = 0;
 8003904:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]
				return 1;
 800390a:	2301      	movs	r3, #1
 800390c:	e0ed      	b.n	8003aea <Task_Run_TestMode+0x282>
			}
			button_cnt_t = 0;
 800390e:	4b79      	ldr	r3, [pc, #484]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003910:	2200      	movs	r2, #0
 8003912:	801a      	strh	r2, [r3, #0]

			lxl_mask = (lxl_mask>>1)&0x0F;
 8003914:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4b77      	ldr	r3, [pc, #476]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003924:	701a      	strb	r2, [r3, #0]
			Task_led_xl(0, lxl_mask);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	2000      	movs	r0, #0
 800392e:	f000 fb05 	bl	8003f3c <Task_led_xl>
			if(lxl_mask == 0)
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <Task_Run_TestMode+0xd8>
				lxl_mask = 0x1F;
 800393a:	4b71      	ldr	r3, [pc, #452]	; (8003b00 <Task_Run_TestMode+0x298>)
 800393c:	221f      	movs	r2, #31
 800393e:	701a      	strb	r2, [r3, #0]

			num++;
 8003940:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <Task_Run_TestMode+0x290>)
 800394a:	701a      	strb	r2, [r3, #0]
			if(num > 9)
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <Task_Run_TestMode+0x290>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b09      	cmp	r3, #9
 8003952:	d902      	bls.n	800395a <Task_Run_TestMode+0xf2>
				num = 0;
 8003954:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
			Task_TestMode_Display(num);
 800395a:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <Task_Run_TestMode+0x290>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff feea 	bl	8003738 <Task_TestMode_Display>
 8003964:	e0c0      	b.n	8003ae8 <Task_Run_TestMode+0x280>
		}
	}
	else if ((MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (POWER_BUT_VAL == BUTTON_ACTIVE) || (IRcode != 0))
 8003966:	2120      	movs	r1, #32
 8003968:	4861      	ldr	r0, [pc, #388]	; (8003af0 <Task_Run_TestMode+0x288>)
 800396a:	f002 f9b9 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	d019      	beq.n	80039a8 <Task_Run_TestMode+0x140>
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	485e      	ldr	r0, [pc, #376]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003978:	f002 f9b2 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d012      	beq.n	80039a8 <Task_Run_TestMode+0x140>
 8003982:	2102      	movs	r1, #2
 8003984:	485a      	ldr	r0, [pc, #360]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003986:	f002 f9ab 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d00b      	beq.n	80039a8 <Task_Run_TestMode+0x140>
 8003990:	2101      	movs	r1, #1
 8003992:	4857      	ldr	r0, [pc, #348]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003994:	f002 f9a4 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d004      	beq.n	80039a8 <Task_Run_TestMode+0x140>
 800399e:	4b59      	ldr	r3, [pc, #356]	; (8003b04 <Task_Run_TestMode+0x29c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80a0 	beq.w	8003ae8 <Task_Run_TestMode+0x280>
	{
		delay_ms((int)BUTTON_DELAY);
 80039a8:	2014      	movs	r0, #20
 80039aa:	f000 fd45 	bl	8004438 <delay_ms>
		if((MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (POWER_BUT_VAL == BUTTON_ACTIVE) || (IRcode != 0))
 80039ae:	2120      	movs	r1, #32
 80039b0:	484f      	ldr	r0, [pc, #316]	; (8003af0 <Task_Run_TestMode+0x288>)
 80039b2:	f002 f995 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d018      	beq.n	80039ee <Task_Run_TestMode+0x186>
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	484c      	ldr	r0, [pc, #304]	; (8003af0 <Task_Run_TestMode+0x288>)
 80039c0:	f002 f98e 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d011      	beq.n	80039ee <Task_Run_TestMode+0x186>
 80039ca:	2102      	movs	r1, #2
 80039cc:	4848      	ldr	r0, [pc, #288]	; (8003af0 <Task_Run_TestMode+0x288>)
 80039ce:	f002 f987 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d00a      	beq.n	80039ee <Task_Run_TestMode+0x186>
 80039d8:	2101      	movs	r1, #1
 80039da:	4845      	ldr	r0, [pc, #276]	; (8003af0 <Task_Run_TestMode+0x288>)
 80039dc:	f002 f980 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d003      	beq.n	80039ee <Task_Run_TestMode+0x186>
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <Task_Run_TestMode+0x29c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d07c      	beq.n	8003ae8 <Task_Run_TestMode+0x280>
		{
			IRcode = 0;
 80039ee:	4b45      	ldr	r3, [pc, #276]	; (8003b04 <Task_Run_TestMode+0x29c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

			lxl_mask = (lxl_mask>>1)&0x0F;
 80039f4:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <Task_Run_TestMode+0x298>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003a04:	701a      	strb	r2, [r3, #0]
			Task_led_xl(0, lxl_mask);
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f000 fa95 	bl	8003f3c <Task_led_xl>
			if(lxl_mask == 0)
 8003a12:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <Task_Run_TestMode+0x1b8>
				lxl_mask = 0x1F;
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <Task_Run_TestMode+0x298>)
 8003a1c:	221f      	movs	r2, #31
 8003a1e:	701a      	strb	r2, [r3, #0]

			num++;
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a2a:	701a      	strb	r2, [r3, #0]
			if(num > 9)
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d902      	bls.n	8003a3a <Task_Run_TestMode+0x1d2>
				num = 0;
 8003a34:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
			Task_TestMode_Display(num);
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe7a 	bl	8003738 <Task_TestMode_Display>
			while((POWER_BUT_VAL == BUTTON_ACTIVE) || (MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (PLUS_BUT_VAL == BUTTON_ACTIVE))
 8003a44:	e02d      	b.n	8003aa2 <Task_Run_TestMode+0x23a>
			{
				button_cnt_t++;
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003a50:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	2b14      	cmp	r3, #20
 8003a58:	d920      	bls.n	8003a9c <Task_Run_TestMode+0x234>
					Led7TurnTime_Display(num/10, num%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003a5a:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4a27      	ldr	r2, [pc, #156]	; (8003afc <Task_Run_TestMode+0x294>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <Task_Run_TestMode+0x290>)
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <Task_Run_TestMode+0x294>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	08d9      	lsrs	r1, r3, #3
 8003a76:	460b      	mov	r3, r1
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	00da      	lsls	r2, r3, #3
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <Task_Run_TestMode+0x28c>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	f7fd f8c4 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8003a9c:	2064      	movs	r0, #100	; 0x64
 8003a9e:	f000 fccb 	bl	8004438 <delay_ms>
			while((POWER_BUT_VAL == BUTTON_ACTIVE) || (MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (PLUS_BUT_VAL == BUTTON_ACTIVE))
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4812      	ldr	r0, [pc, #72]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003aa6:	f002 f91b 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d0ca      	beq.n	8003a46 <Task_Run_TestMode+0x1de>
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	480f      	ldr	r0, [pc, #60]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003ab4:	f002 f914 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d0c3      	beq.n	8003a46 <Task_Run_TestMode+0x1de>
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	480b      	ldr	r0, [pc, #44]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003ac2:	f002 f90d 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d0bc      	beq.n	8003a46 <Task_Run_TestMode+0x1de>
 8003acc:	2102      	movs	r1, #2
 8003ace:	4808      	ldr	r0, [pc, #32]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003ad0:	f002 f906 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d0b5      	beq.n	8003a46 <Task_Run_TestMode+0x1de>
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	4804      	ldr	r0, [pc, #16]	; (8003af0 <Task_Run_TestMode+0x288>)
 8003ade:	f002 f8ff 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d0ae      	beq.n	8003a46 <Task_Run_TestMode+0x1de>
			}
		}
	}
	return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40010c00 	.word	0x40010c00
 8003af4:	200000cc 	.word	0x200000cc
 8003af8:	20000132 	.word	0x20000132
 8003afc:	cccccccd 	.word	0xcccccccd
 8003b00:	20000019 	.word	0x20000019
 8003b04:	200000c8 	.word	0x200000c8

08003b08 <Task_100ms>:

void Task_100ms(void)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af02      	add	r7, sp, #8
	if(task100ms_flag == 0)
 8003b0e:	4ba3      	ldr	r3, [pc, #652]	; (8003d9c <Task_100ms+0x294>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 81e2 	beq.w	8003ede <Task_100ms+0x3d6>
		return;
	task100ms_flag = 0;
 8003b1a:	4ba0      	ldr	r3, [pc, #640]	; (8003d9c <Task_100ms+0x294>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
	if(IRcode == IR_STOP_CODE)
 8003b20:	4b9f      	ldr	r3, [pc, #636]	; (8003da0 <Task_100ms+0x298>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a9f      	ldr	r2, [pc, #636]	; (8003da4 <Task_100ms+0x29c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d113      	bne.n	8003b52 <Task_100ms+0x4a>
	{
		IRcode = 0;
 8003b2a:	4b9d      	ldr	r3, [pc, #628]	; (8003da0 <Task_100ms+0x298>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
		buzzer_stt = 1;
 8003b30:	4b9d      	ldr	r3, [pc, #628]	; (8003da8 <Task_100ms+0x2a0>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
		if(stop_time)
 8003b36:	4b9d      	ldr	r3, [pc, #628]	; (8003dac <Task_100ms+0x2a4>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <Task_100ms+0x3e>
			stop_time = 0;
 8003b3e:	4b9b      	ldr	r3, [pc, #620]	; (8003dac <Task_100ms+0x2a4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e005      	b.n	8003b52 <Task_100ms+0x4a>
		else{
			temp_s = 0;
 8003b46:	4b9a      	ldr	r3, [pc, #616]	; (8003db0 <Task_100ms+0x2a8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	801a      	strh	r2, [r3, #0]
			stop_time = 1;
 8003b4c:	4b97      	ldr	r3, [pc, #604]	; (8003dac <Task_100ms+0x2a4>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
//	else if(buzzer_stt == 0){
//		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
//		buzzer_stt = 0xFF;
//	}

	if(stop_time)
 8003b52:	4b96      	ldr	r3, [pc, #600]	; (8003dac <Task_100ms+0x2a4>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 81c3 	bne.w	8003ee2 <Task_100ms+0x3da>
		return;

	temp_s++;
 8003b5c:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <Task_100ms+0x2a8>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b92      	ldr	r3, [pc, #584]	; (8003db0 <Task_100ms+0x2a8>)
 8003b66:	801a      	strh	r2, [r3, #0]
	if(temp_s>=600)
 8003b68:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <Task_100ms+0x2a8>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003b70:	d302      	bcc.n	8003b78 <Task_100ms+0x70>
		temp_s = 0;
 8003b72:	4b8f      	ldr	r3, [pc, #572]	; (8003db0 <Task_100ms+0x2a8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]

	if((temp_s%10) == 0){
 8003b78:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <Task_100ms+0x2a8>)
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	4b8d      	ldr	r3, [pc, #564]	; (8003db4 <Task_100ms+0x2ac>)
 8003b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b82:	08d9      	lsrs	r1, r3, #3
 8003b84:	460b      	mov	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 813a 	bne.w	8003e0a <Task_100ms+0x302>
		if(PlayCfg.Parameter.mode_signed){
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <Task_100ms+0x2b0>)
 8003b98:	7a1b      	ldrb	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d05c      	beq.n	8003c58 <Task_100ms+0x150>
			if (rount_time_s>0){
 8003b9e:	4b87      	ldr	r3, [pc, #540]	; (8003dbc <Task_100ms+0x2b4>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80ae 	beq.w	8003d04 <Task_100ms+0x1fc>
				rount_time_s--;
 8003ba8:	4b84      	ldr	r3, [pc, #528]	; (8003dbc <Task_100ms+0x2b4>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <Task_100ms+0x2b4>)
 8003bb2:	801a      	strh	r2, [r3, #0]
				Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <Task_100ms+0x2b4>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	4a81      	ldr	r2, [pc, #516]	; (8003dc0 <Task_100ms+0x2b8>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4b7d      	ldr	r3, [pc, #500]	; (8003dbc <Task_100ms+0x2b4>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	4a7e      	ldr	r2, [pc, #504]	; (8003dc4 <Task_100ms+0x2bc>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	4b78      	ldr	r3, [pc, #480]	; (8003db4 <Task_100ms+0x2ac>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	08d9      	lsrs	r1, r3, #3
 8003bda:	460b      	mov	r3, r1
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461c      	mov	r4, r3
 8003be8:	4b74      	ldr	r3, [pc, #464]	; (8003dbc <Task_100ms+0x2b4>)
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <Task_100ms+0x2bc>)
 8003bee:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf2:	0959      	lsrs	r1, r3, #5
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a5b      	subs	r3, r3, r1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	4a6c      	ldr	r2, [pc, #432]	; (8003db4 <Task_100ms+0x2ac>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	4b6b      	ldr	r3, [pc, #428]	; (8003dbc <Task_100ms+0x2b4>)
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <Task_100ms+0x2bc>)
 8003c12:	fba3 1302 	umull	r1, r3, r3, r2
 8003c16:	0959      	lsrs	r1, r3, #5
 8003c18:	460b      	mov	r3, r1
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a5b      	subs	r3, r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <Task_100ms+0x2ac>)
 8003c26:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2a:	08d9      	lsrs	r1, r3, #3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	462a      	mov	r2, r5
 8003c42:	4621      	mov	r1, r4
 8003c44:	f7fd f8d2 	bl	8000dec <Led7RoundTime_Display>
				if(rount_time_s == 0){
 8003c48:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <Task_100ms+0x2b4>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d159      	bne.n	8003d04 <Task_100ms+0x1fc>
					buzzer_stt = 15;
 8003c50:	4b55      	ldr	r3, [pc, #340]	; (8003da8 <Task_100ms+0x2a0>)
 8003c52:	220f      	movs	r2, #15
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e055      	b.n	8003d04 <Task_100ms+0x1fc>
				}
			}
		}
		else{
			if(rount_time_s/60 <= 99){
 8003c58:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <Task_100ms+0x2b4>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d84f      	bhi.n	8003d04 <Task_100ms+0x1fc>
				rount_time_s++;
 8003c64:	4b55      	ldr	r3, [pc, #340]	; (8003dbc <Task_100ms+0x2b4>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <Task_100ms+0x2b4>)
 8003c6e:	801a      	strh	r2, [r3, #0]
				Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 8003c70:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <Task_100ms+0x2b4>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <Task_100ms+0x2b8>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <Task_100ms+0x2b4>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	4a4f      	ldr	r2, [pc, #316]	; (8003dc4 <Task_100ms+0x2bc>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <Task_100ms+0x2ac>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	08d9      	lsrs	r1, r3, #3
 8003c96:	460b      	mov	r3, r1
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461c      	mov	r4, r3
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <Task_100ms+0x2b4>)
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <Task_100ms+0x2bc>)
 8003caa:	fba3 1302 	umull	r1, r3, r3, r2
 8003cae:	0959      	lsrs	r1, r3, #5
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a5b      	subs	r3, r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4a3d      	ldr	r2, [pc, #244]	; (8003db4 <Task_100ms+0x2ac>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461d      	mov	r5, r3
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <Task_100ms+0x2b4>)
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <Task_100ms+0x2bc>)
 8003cce:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd2:	0959      	lsrs	r1, r3, #5
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a5b      	subs	r3, r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <Task_100ms+0x2ac>)
 8003ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce6:	08d9      	lsrs	r1, r3, #3
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4621      	mov	r1, r4
 8003d00:	f7fd f874 	bl	8000dec <Led7RoundTime_Display>
			}
		}

		if(turn_time_s > 0){
 8003d04:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d07e      	beq.n	8003e0a <Task_100ms+0x302>
			turn_time_s--;
 8003d0c:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d16:	801a      	strh	r2, [r3, #0]
			if(turn_time_s>=16){
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	2b0f      	cmp	r3, #15
 8003d1e:	d919      	bls.n	8003d54 <Task_100ms+0x24c>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <Task_100ms+0x2ac>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	08db      	lsrs	r3, r3, #3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <Task_100ms+0x2ac>)
 8003d36:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3a:	08d9      	lsrs	r1, r3, #3
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	f7fc ff69 	bl	8000c24 <Led7TurnTime_Display>
 8003d52:	e05a      	b.n	8003e0a <Task_100ms+0x302>
			}
			else if(turn_time_s>7){
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	2b07      	cmp	r3, #7
 8003d5a:	d937      	bls.n	8003dcc <Task_100ms+0x2c4>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, (turn_time_s%8));
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <Task_100ms+0x2ac>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	08db      	lsrs	r3, r3, #3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d6e:	881a      	ldrh	r2, [r3, #0]
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <Task_100ms+0x2ac>)
 8003d72:	fba3 1302 	umull	r1, r3, r3, r2
 8003d76:	08d9      	lsrs	r1, r3, #3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <Task_100ms+0x2c0>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	2208      	movs	r2, #8
 8003d90:	f7fc ff48 	bl	8000c24 <Led7TurnTime_Display>
				buzzer_stt = 1;
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <Task_100ms+0x2a0>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e036      	b.n	8003e0a <Task_100ms+0x302>
 8003d9c:	200000c6 	.word	0x200000c6
 8003da0:	200000c8 	.word	0x200000c8
 8003da4:	00920920 	.word	0x00920920
 8003da8:	20000016 	.word	0x20000016
 8003dac:	20000130 	.word	0x20000130
 8003db0:	2000012e 	.word	0x2000012e
 8003db4:	cccccccd 	.word	0xcccccccd
 8003db8:	200000d0 	.word	0x200000d0
 8003dbc:	200000de 	.word	0x200000de
 8003dc0:	1b4e81b5 	.word	0x1b4e81b5
 8003dc4:	88888889 	.word	0x88888889
 8003dc8:	200000dc 	.word	0x200000dc
			}
			else{
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, turn_time_s%8, 0);
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <Task_100ms+0x3e0>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	4a46      	ldr	r2, [pc, #280]	; (8003eec <Task_100ms+0x3e4>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	08db      	lsrs	r3, r3, #3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <Task_100ms+0x3e0>)
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	4b42      	ldr	r3, [pc, #264]	; (8003eec <Task_100ms+0x3e4>)
 8003de2:	fba3 1302 	umull	r1, r3, r3, r2
 8003de6:	08d9      	lsrs	r1, r3, #3
 8003de8:	460b      	mov	r3, r1
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <Task_100ms+0x3e0>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f7fc ff10 	bl	8000c24 <Led7TurnTime_Display>
				buzzer_stt = 1;
 8003e04:	4b3a      	ldr	r3, [pc, #232]	; (8003ef0 <Task_100ms+0x3e8>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(((temp_s%5) == 0) && ((temp_s%10) != 0) && (temp_s != 0))
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <Task_100ms+0x3ec>)
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <Task_100ms+0x3e4>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	0899      	lsrs	r1, r3, #2
 8003e16:	460b      	mov	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d15f      	bne.n	8003ee4 <Task_100ms+0x3dc>
 8003e24:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <Task_100ms+0x3ec>)
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <Task_100ms+0x3e4>)
 8003e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2e:	08d9      	lsrs	r1, r3, #3
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d051      	beq.n	8003ee4 <Task_100ms+0x3dc>
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <Task_100ms+0x3ec>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d04d      	beq.n	8003ee4 <Task_100ms+0x3dc>
	{
		Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 0);
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <Task_100ms+0x3f0>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <Task_100ms+0x3f4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4618      	mov	r0, r3
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <Task_100ms+0x3f0>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <Task_100ms+0x3f8>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <Task_100ms+0x3e4>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	08d9      	lsrs	r1, r3, #3
 8003e6e:	460b      	mov	r3, r1
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <Task_100ms+0x3f0>)
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <Task_100ms+0x3f8>)
 8003e82:	fba3 1302 	umull	r1, r3, r3, r2
 8003e86:	0959      	lsrs	r1, r3, #5
 8003e88:	460b      	mov	r3, r1
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a5b      	subs	r3, r3, r1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <Task_100ms+0x3e4>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <Task_100ms+0x3f0>)
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <Task_100ms+0x3f8>)
 8003ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eaa:	0959      	lsrs	r1, r3, #5
 8003eac:	460b      	mov	r3, r1
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a5b      	subs	r3, r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <Task_100ms+0x3e4>)
 8003eba:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebe:	08d9      	lsrs	r1, r3, #3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	f7fc ff88 	bl	8000dec <Led7RoundTime_Display>
 8003edc:	e002      	b.n	8003ee4 <Task_100ms+0x3dc>
		return;
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <Task_100ms+0x3dc>
		return;
 8003ee2:	bf00      	nop
	}
}
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee8:	200000dc 	.word	0x200000dc
 8003eec:	cccccccd 	.word	0xcccccccd
 8003ef0:	20000016 	.word	0x20000016
 8003ef4:	2000012e 	.word	0x2000012e
 8003ef8:	200000de 	.word	0x200000de
 8003efc:	1b4e81b5 	.word	0x1b4e81b5
 8003f00:	88888889 	.word	0x88888889

08003f04 <Task_Clear_Display>:

void Task_Clear_Display(uint8_t addr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	printf("ADDR%d%dEEEEEEEEEEEEEEEE\n", (int)addr, (int)DATA_LED7_TYPE);
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4619      	mov	r1, r3
 8003f14:	4807      	ldr	r0, [pc, #28]	; (8003f34 <Task_Clear_Display+0x30>)
 8003f16:	f003 fcbf 	bl	8007898 <iprintf>
	printf("ADDR%d%d\n", (int)addr, (int)UPDATE_LED7_TYPE);
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4805      	ldr	r0, [pc, #20]	; (8003f38 <Task_Clear_Display+0x34>)
 8003f22:	f003 fcb9 	bl	8007898 <iprintf>
	delay_ms(200);
 8003f26:	20c8      	movs	r0, #200	; 0xc8
 8003f28:	f000 fa86 	bl	8004438 <delay_ms>
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	080088fc 	.word	0x080088fc
 8003f38:	08008918 	.word	0x08008918

08003f3c <Task_led_xl>:

void Task_led_xl(uint8_t addr, uint8_t state)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	460a      	mov	r2, r1
 8003f46:	71fb      	strb	r3, [r7, #7]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71bb      	strb	r3, [r7, #6]
	printf("ADDR%d%d%c\n", addr, DATA_LEDXL_TYPE, (int)state+48);
 8003f4c:	79f9      	ldrb	r1, [r7, #7]
 8003f4e:	79bb      	ldrb	r3, [r7, #6]
 8003f50:	3330      	adds	r3, #48	; 0x30
 8003f52:	2203      	movs	r2, #3
 8003f54:	4803      	ldr	r0, [pc, #12]	; (8003f64 <Task_led_xl+0x28>)
 8003f56:	f003 fc9f 	bl	8007898 <iprintf>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	08008924 	.word	0x08008924

08003f68 <Task_Led_StartPoint>:

void Task_Led_StartPoint(uint8_t tram, uint8_t chuc, uint8_t donvi)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
 8003f72:	460b      	mov	r3, r1
 8003f74:	71bb      	strb	r3, [r7, #6]
 8003f76:	4613      	mov	r3, r2
 8003f78:	717b      	strb	r3, [r7, #5]
	if(donvi == 12){
 8003f7a:	797b      	ldrb	r3, [r7, #5]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d104      	bne.n	8003f8a <Task_Led_StartPoint+0x22>
		printf("ADDR5%dEEE\n", DATA_LED7_TYPE);
 8003f80:	2101      	movs	r1, #1
 8003f82:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <Task_Led_StartPoint+0x6c>)
 8003f84:	f003 fc88 	bl	8007898 <iprintf>
 8003f88:	e01c      	b.n	8003fc4 <Task_Led_StartPoint+0x5c>
	}
	else if(donvi == 11){
 8003f8a:	797b      	ldrb	r3, [r7, #5]
 8003f8c:	2b0b      	cmp	r3, #11
 8003f8e:	d106      	bne.n	8003f9e <Task_Led_StartPoint+0x36>
		printf("ADDR5%dE%dD\n", DATA_LED7_TYPE, chuc);
 8003f90:	79bb      	ldrb	r3, [r7, #6]
 8003f92:	461a      	mov	r2, r3
 8003f94:	2101      	movs	r1, #1
 8003f96:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <Task_Led_StartPoint+0x70>)
 8003f98:	f003 fc7e 	bl	8007898 <iprintf>
 8003f9c:	e012      	b.n	8003fc4 <Task_Led_StartPoint+0x5c>
	}
	else if(donvi == 10){
 8003f9e:	797b      	ldrb	r3, [r7, #5]
 8003fa0:	2b0a      	cmp	r3, #10
 8003fa2:	d106      	bne.n	8003fb2 <Task_Led_StartPoint+0x4a>
		printf("ADDR5%dE%dE\n", DATA_LED7_TYPE, chuc);
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2101      	movs	r1, #1
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <Task_Led_StartPoint+0x74>)
 8003fac:	f003 fc74 	bl	8007898 <iprintf>
 8003fb0:	e008      	b.n	8003fc4 <Task_Led_StartPoint+0x5c>
	}
	else{
		printf("ADDR5%d%d%d%d\n", DATA_LED7_TYPE, (int)tram, (int)chuc, (int)donvi);
 8003fb2:	79fa      	ldrb	r2, [r7, #7]
 8003fb4:	79b9      	ldrb	r1, [r7, #6]
 8003fb6:	797b      	ldrb	r3, [r7, #5]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <Task_Led_StartPoint+0x78>)
 8003fc0:	f003 fc6a 	bl	8007898 <iprintf>
	}
	printf("ADDR52\n");
 8003fc4:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <Task_Led_StartPoint+0x7c>)
 8003fc6:	f003 fced 	bl	80079a4 <puts>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	08008930 	.word	0x08008930
 8003fd8:	0800893c 	.word	0x0800893c
 8003fdc:	0800894c 	.word	0x0800894c
 8003fe0:	0800895c 	.word	0x0800895c
 8003fe4:	0800896c 	.word	0x0800896c

08003fe8 <Task_Blink_Line>:

void Task_Blink_Line(uint8_t addr, uint8_t state, uint8_t line)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	71bb      	strb	r3, [r7, #6]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	717b      	strb	r3, [r7, #5]
	printf("ADDR%d%d%d%d\n", (int)addr, (int)UPDATE_BLINK_STATE, (int)state, (int)line);
 8003ffa:	79f9      	ldrb	r1, [r7, #7]
 8003ffc:	79ba      	ldrb	r2, [r7, #6]
 8003ffe:	797b      	ldrb	r3, [r7, #5]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	2204      	movs	r2, #4
 8004006:	4803      	ldr	r0, [pc, #12]	; (8004014 <Task_Blink_Line+0x2c>)
 8004008:	f003 fc46 	bl	8007898 <iprintf>
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08008974 	.word	0x08008974

08004018 <Task_Buzzer_Enable>:

void Task_Buzzer_Enable(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
	buzzer_stt = 1;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <Task_Buzzer_Enable+0x14>)
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000016 	.word	0x20000016

08004030 <Task_Upload_Display>:
/* Private function -----------------------------------------------*/
static void Task_Upload_Display(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e007      	b.n	800404c <Task_Upload_Display+0x1c>
	{
		update_led7_data(i);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f819 	bl	8004078 <update_led7_data>
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3301      	adds	r3, #1
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <Task_Upload_Display+0x40>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4293      	cmp	r3, r2
 8004056:	dbf1      	blt.n	800403c <Task_Upload_Display+0xc>
	}
	printf("ADDR0%d\n", (int)UPDATE_LED7_TYPE);
 8004058:	2102      	movs	r1, #2
 800405a:	4806      	ldr	r0, [pc, #24]	; (8004074 <Task_Upload_Display+0x44>)
 800405c:	f003 fc1c 	bl	8007898 <iprintf>
	delay_ms(300);
 8004060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004064:	f000 f9e8 	bl	8004438 <delay_ms>
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200000d0 	.word	0x200000d0
 8004074:	080088f0 	.word	0x080088f0

08004078 <update_led7_data>:

static void update_led7_data(uint8_t player_num)
{
 8004078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af06      	add	r7, sp, #24
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
			(int)Player[player_num].addr,
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4a23      	ldr	r2, [pc, #140]	; (8004114 <update_led7_data+0x9c>)
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	3301      	adds	r3, #1
 800408e:	781b      	ldrb	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 8004090:	4698      	mov	r8, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	1c5c      	adds	r4, r3, #1
			(int)DATA_LED7_TYPE,
			(int)(player_num+1),
			(int)Player[player_num].point,
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <update_led7_data+0x9c>)
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4413      	add	r3, r2
 800409e:	3308      	adds	r3, #8
 80040a0:	881b      	ldrh	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80040a2:	461d      	mov	r5, r3
			(int)(Player[player_num].average*100),
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <update_led7_data+0x9c>)
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4919      	ldr	r1, [pc, #100]	; (8004118 <update_led7_data+0xa0>)
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fb9e 	bl	80007f4 <__aeabi_fmul>
 80040b8:	4603      	mov	r3, r0
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fcea 	bl	8000a94 <__aeabi_f2iz>
 80040c0:	4601      	mov	r1, r0
			(int)Player[player_num].max_hit_get_point,
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	4a13      	ldr	r2, [pc, #76]	; (8004114 <update_led7_data+0x9c>)
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	4413      	add	r3, r2
 80040ca:	330a      	adds	r3, #10
 80040cc:	881b      	ldrh	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80040ce:	461e      	mov	r6, r3
			Player[player_num].sum_signed==0?'E':'D',
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	4a10      	ldr	r2, [pc, #64]	; (8004114 <update_led7_data+0x9c>)
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	4413      	add	r3, r2
 80040d8:	3302      	adds	r3, #2
 80040da:	781b      	ldrb	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <update_led7_data+0x6c>
 80040e0:	2345      	movs	r3, #69	; 0x45
 80040e2:	e000      	b.n	80040e6 <update_led7_data+0x6e>
 80040e4:	2344      	movs	r3, #68	; 0x44
			(int)Player[player_num].sum_point);
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	480a      	ldr	r0, [pc, #40]	; (8004114 <update_led7_data+0x9c>)
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	4402      	add	r2, r0
 80040ee:	320c      	adds	r2, #12
 80040f0:	8812      	ldrh	r2, [r2, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80040f2:	9204      	str	r2, [sp, #16]
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	9602      	str	r6, [sp, #8]
 80040f8:	9101      	str	r1, [sp, #4]
 80040fa:	9500      	str	r5, [sp, #0]
 80040fc:	4623      	mov	r3, r4
 80040fe:	2201      	movs	r2, #1
 8004100:	4641      	mov	r1, r8
 8004102:	4806      	ldr	r0, [pc, #24]	; (800411c <update_led7_data+0xa4>)
 8004104:	f003 fbc8 	bl	8007898 <iprintf>
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004112:	bf00      	nop
 8004114:	200000ec 	.word	0x200000ec
 8004118:	42c80000 	.word	0x42c80000
 800411c:	08008984 	.word	0x08008984

08004120 <get_player_available>:

static uint8_t get_player_available(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
	uint8_t player = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	e00d      	b.n	800414c <get_player_available+0x2c>
	{
		if(Player[i].point > 0){
 8004130:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <get_player_available+0x44>)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	4413      	add	r3, r2
 8004138:	3308      	adds	r3, #8
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <get_player_available+0x26>
			player++;
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	3301      	adds	r3, #1
 8004144:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <get_player_available+0x48>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4293      	cmp	r3, r2
 8004156:	dbeb      	blt.n	8004130 <get_player_available+0x10>
		}
	}
	return player;
 8004158:	79fb      	ldrb	r3, [r7, #7]
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	200000ec 	.word	0x200000ec
 8004168:	200000d0 	.word	0x200000d0

0800416c <get_next_user>:

static uint8_t get_next_user(uint8_t current_play)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_user_buff[4];
	int i, j;

	if(PlayCfg.Parameter.mode_signed == 0)
 8004176:	4b43      	ldr	r3, [pc, #268]	; (8004284 <get_next_user+0x118>)
 8004178:	7a1b      	ldrb	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <get_next_user+0x28>
	{
		return (current_play+1)%PlayCfg.Parameter.playing_mode;
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	3301      	adds	r3, #1
 8004182:	4a40      	ldr	r2, [pc, #256]	; (8004284 <get_next_user+0x118>)
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	fb93 f1f2 	sdiv	r1, r3, r2
 800418a:	fb01 f202 	mul.w	r2, r1, r2
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e072      	b.n	800427a <get_next_user+0x10e>
	}

	for(i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e022      	b.n	80041e0 <get_next_user+0x74>
	{
		for(j=0;j<PlayCfg.Parameter.playing_mode;j++)
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e016      	b.n	80041ce <get_next_user+0x62>
		{
			if(Player[j].addr == (i+1)){
 80041a0:	4a39      	ldr	r2, [pc, #228]	; (8004288 <get_next_user+0x11c>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	3301      	adds	r3, #1
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	3301      	adds	r3, #1
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d108      	bne.n	80041c8 <get_next_user+0x5c>
				temp_user_buff[i] = j;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	b2d9      	uxtb	r1, r3
 80041ba:	f107 020c 	add.w	r2, r7, #12
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	460a      	mov	r2, r1
 80041c4:	701a      	strb	r2, [r3, #0]
				break;
 80041c6:	e008      	b.n	80041da <get_next_user+0x6e>
		for(j=0;j<PlayCfg.Parameter.playing_mode;j++)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3301      	adds	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <get_next_user+0x118>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4293      	cmp	r3, r2
 80041d8:	dbe2      	blt.n	80041a0 <get_next_user+0x34>
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	4b28      	ldr	r3, [pc, #160]	; (8004284 <get_next_user+0x118>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	dbd6      	blt.n	800419a <get_next_user+0x2e>
			}
		}
	}
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e00a      	b.n	8004208 <get_next_user+0x9c>
		if(temp_user_buff[i] == current_play)
 80041f2:	f107 020c 	add.w	r2, r7, #12
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	79fa      	ldrb	r2, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d009      	beq.n	8004216 <get_next_user+0xaa>
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <get_next_user+0x118>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4293      	cmp	r3, r2
 8004212:	dbee      	blt.n	80041f2 <get_next_user+0x86>
 8004214:	e000      	b.n	8004218 <get_next_user+0xac>
			break;
 8004216:	bf00      	nop
	}

	for(j=1;j<PlayCfg.Parameter.playing_mode;j++){
 8004218:	2301      	movs	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e026      	b.n	800426c <get_next_user+0x100>
		if(Player[temp_user_buff[(i+j)%PlayCfg.Parameter.playing_mode]].point > 0)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <get_next_user+0x118>)
 8004226:	7812      	ldrb	r2, [r2, #0]
 8004228:	fb93 f1f2 	sdiv	r1, r3, r2
 800422c:	fb01 f202 	mul.w	r2, r1, r2
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	3318      	adds	r3, #24
 8004234:	443b      	add	r3, r7
 8004236:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <get_next_user+0x11c>)
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	3308      	adds	r3, #8
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <get_next_user+0xfa>
		 return temp_user_buff[(i+j)%PlayCfg.Parameter.playing_mode];
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <get_next_user+0x118>)
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	fb93 f1f2 	sdiv	r1, r3, r2
 8004256:	fb01 f202 	mul.w	r2, r1, r2
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	3318      	adds	r3, #24
 800425e:	443b      	add	r3, r7
 8004260:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004264:	e009      	b.n	800427a <get_next_user+0x10e>
	for(j=1;j<PlayCfg.Parameter.playing_mode;j++){
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <get_next_user+0x118>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4293      	cmp	r3, r2
 8004276:	dbd2      	blt.n	800421e <get_next_user+0xb2>
	}

	return 0xFF;
 8004278:	23ff      	movs	r3, #255	; 0xff
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	200000d0 	.word	0x200000d0
 8004288:	200000ec 	.word	0x200000ec

0800428c <update_rand_addr>:

static void update_rand_addr(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
	uint16_t rand_input = sys_millis;
 8004292:	4b66      	ldr	r3, [pc, #408]	; (800442c <update_rand_addr+0x1a0>)
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	81fb      	strh	r3, [r7, #14]
	uint8_t temp_user_buff[4];
	uint8_t temp_addr_buff[4];
	int i, j;
	for(i=0;i<(int)MAX_PLAYER_NUM;i++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e02a      	b.n	80042f4 <update_rand_addr+0x68>
	{
		for(j=0;j<(int)MAX_PLAYER_NUM;j++)
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e021      	b.n	80042e8 <update_rand_addr+0x5c>
		{
			if(Player[j].addr == (i+1)){
 80042a4:	4a62      	ldr	r2, [pc, #392]	; (8004430 <update_rand_addr+0x1a4>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	3301      	adds	r3, #1
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d113      	bne.n	80042e2 <update_rand_addr+0x56>
				temp_user_buff[i] = j;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	b2d9      	uxtb	r1, r3
 80042be:	f107 0208 	add.w	r2, r7, #8
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4413      	add	r3, r2
 80042c6:	460a      	mov	r2, r1
 80042c8:	701a      	strb	r2, [r3, #0]
				temp_addr_buff[i] = Player[j].addr;
 80042ca:	4a59      	ldr	r2, [pc, #356]	; (8004430 <update_rand_addr+0x1a4>)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	4413      	add	r3, r2
 80042d2:	3301      	adds	r3, #1
 80042d4:	7819      	ldrb	r1, [r3, #0]
 80042d6:	1d3a      	adds	r2, r7, #4
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	460a      	mov	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
				break;
 80042e0:	e005      	b.n	80042ee <update_rand_addr+0x62>
		for(j=0;j<(int)MAX_PLAYER_NUM;j++)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3301      	adds	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	ddda      	ble.n	80042a4 <update_rand_addr+0x18>
	for(i=0;i<(int)MAX_PLAYER_NUM;i++)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	ddd1      	ble.n	800429e <update_rand_addr+0x12>
			}
		}
	}

	Player[temp_user_buff[0]].addr = temp_addr_buff[1];
 80042fa:	7a3b      	ldrb	r3, [r7, #8]
 80042fc:	7979      	ldrb	r1, [r7, #5]
 80042fe:	4a4c      	ldr	r2, [pc, #304]	; (8004430 <update_rand_addr+0x1a4>)
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	3301      	adds	r3, #1
 8004306:	460a      	mov	r2, r1
 8004308:	701a      	strb	r2, [r3, #0]
	switch(rand_input%3)
 800430a:	89fa      	ldrh	r2, [r7, #14]
 800430c:	4b49      	ldr	r3, [pc, #292]	; (8004434 <update_rand_addr+0x1a8>)
 800430e:	fba3 1302 	umull	r1, r3, r3, r2
 8004312:	0859      	lsrs	r1, r3, #1
 8004314:	460b      	mov	r3, r1
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	440b      	add	r3, r1
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d04f      	beq.n	80043c2 <update_rand_addr+0x136>
 8004322:	2b02      	cmp	r3, #2
 8004324:	dc7d      	bgt.n	8004422 <update_rand_addr+0x196>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <update_rand_addr+0xa4>
 800432a:	2b01      	cmp	r3, #1
 800432c:	d019      	beq.n	8004362 <update_rand_addr+0xd6>
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
			}
			break;
		}
	}
}
 800432e:	e078      	b.n	8004422 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[0];
 8004330:	7a7b      	ldrb	r3, [r7, #9]
 8004332:	7939      	ldrb	r1, [r7, #4]
 8004334:	4a3e      	ldr	r2, [pc, #248]	; (8004430 <update_rand_addr+0x1a4>)
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	3301      	adds	r3, #1
 800433c:	460a      	mov	r2, r1
 800433e:	701a      	strb	r2, [r3, #0]
			Player[temp_user_buff[2]].addr = temp_addr_buff[3];
 8004340:	7abb      	ldrb	r3, [r7, #10]
 8004342:	79f9      	ldrb	r1, [r7, #7]
 8004344:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <update_rand_addr+0x1a4>)
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	3301      	adds	r3, #1
 800434c:	460a      	mov	r2, r1
 800434e:	701a      	strb	r2, [r3, #0]
			Player[temp_user_buff[3]].addr = temp_addr_buff[2];
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	79b9      	ldrb	r1, [r7, #6]
 8004354:	4a36      	ldr	r2, [pc, #216]	; (8004430 <update_rand_addr+0x1a4>)
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	3301      	adds	r3, #1
 800435c:	460a      	mov	r2, r1
 800435e:	701a      	strb	r2, [r3, #0]
			break;
 8004360:	e05f      	b.n	8004422 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[2];
 8004362:	7a7b      	ldrb	r3, [r7, #9]
 8004364:	79b9      	ldrb	r1, [r7, #6]
 8004366:	4a32      	ldr	r2, [pc, #200]	; (8004430 <update_rand_addr+0x1a4>)
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	3301      	adds	r3, #1
 800436e:	460a      	mov	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]
			if(rand_input%2 == 1){
 8004372:	89fb      	ldrh	r3, [r7, #14]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <update_rand_addr+0x114>
				Player[temp_user_buff[2]].addr = temp_addr_buff[0];
 800437e:	7abb      	ldrb	r3, [r7, #10]
 8004380:	7939      	ldrb	r1, [r7, #4]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <update_rand_addr+0x1a4>)
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	3301      	adds	r3, #1
 800438a:	460a      	mov	r2, r1
 800438c:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[3];
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	79f9      	ldrb	r1, [r7, #7]
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <update_rand_addr+0x1a4>)
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4413      	add	r3, r2
 8004398:	3301      	adds	r3, #1
 800439a:	460a      	mov	r2, r1
 800439c:	701a      	strb	r2, [r3, #0]
			break;
 800439e:	e040      	b.n	8004422 <update_rand_addr+0x196>
				Player[temp_user_buff[2]].addr = temp_addr_buff[3];
 80043a0:	7abb      	ldrb	r3, [r7, #10]
 80043a2:	79f9      	ldrb	r1, [r7, #7]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <update_rand_addr+0x1a4>)
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	3301      	adds	r3, #1
 80043ac:	460a      	mov	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
 80043b0:	7afb      	ldrb	r3, [r7, #11]
 80043b2:	7939      	ldrb	r1, [r7, #4]
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <update_rand_addr+0x1a4>)
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	3301      	adds	r3, #1
 80043bc:	460a      	mov	r2, r1
 80043be:	701a      	strb	r2, [r3, #0]
			break;
 80043c0:	e02f      	b.n	8004422 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[3];
 80043c2:	7a7b      	ldrb	r3, [r7, #9]
 80043c4:	79f9      	ldrb	r1, [r7, #7]
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <update_rand_addr+0x1a4>)
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	4413      	add	r3, r2
 80043cc:	3301      	adds	r3, #1
 80043ce:	460a      	mov	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]
			if(rand_input%2 == 0){
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <update_rand_addr+0x174>
				Player[temp_user_buff[2]].addr = temp_addr_buff[0];
 80043de:	7abb      	ldrb	r3, [r7, #10]
 80043e0:	7939      	ldrb	r1, [r7, #4]
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <update_rand_addr+0x1a4>)
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	4413      	add	r3, r2
 80043e8:	3301      	adds	r3, #1
 80043ea:	460a      	mov	r2, r1
 80043ec:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[2];
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	79b9      	ldrb	r1, [r7, #6]
 80043f2:	4a0f      	ldr	r2, [pc, #60]	; (8004430 <update_rand_addr+0x1a4>)
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4413      	add	r3, r2
 80043f8:	3301      	adds	r3, #1
 80043fa:	460a      	mov	r2, r1
 80043fc:	701a      	strb	r2, [r3, #0]
			break;
 80043fe:	e00f      	b.n	8004420 <update_rand_addr+0x194>
				Player[temp_user_buff[2]].addr = temp_addr_buff[2];
 8004400:	7abb      	ldrb	r3, [r7, #10]
 8004402:	79b9      	ldrb	r1, [r7, #6]
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <update_rand_addr+0x1a4>)
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	3301      	adds	r3, #1
 800440c:	460a      	mov	r2, r1
 800440e:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	7939      	ldrb	r1, [r7, #4]
 8004414:	4a06      	ldr	r2, [pc, #24]	; (8004430 <update_rand_addr+0x1a4>)
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	4413      	add	r3, r2
 800441a:	3301      	adds	r3, #1
 800441c:	460a      	mov	r2, r1
 800441e:	701a      	strb	r2, [r3, #0]
			break;
 8004420:	bf00      	nop
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	200000bc 	.word	0x200000bc
 8004430:	200000ec 	.word	0x200000ec
 8004434:	aaaaaaab 	.word	0xaaaaaaab

08004438 <delay_ms>:

void delay_ms(unsigned int x)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	static unsigned long uDelay = 0;
	uDelay = x;
 8004440:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <delay_ms+0x38>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6013      	str	r3, [r2, #0]
	bFlagDelay = 1;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <delay_ms+0x3c>)
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
	uCountDelay = 0;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <delay_ms+0x40>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
	while(uCountDelay<=uDelay)
 8004452:	bf00      	nop
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <delay_ms+0x40>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <delay_ms+0x38>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d9f9      	bls.n	8004454 <delay_ms+0x1c>
	{

	}
	bFlagDelay = 0;
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <delay_ms+0x3c>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	20000134 	.word	0x20000134
 8004474:	200000be 	.word	0x200000be
 8004478:	200000c0 	.word	0x200000c0

0800447c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004484:	1d39      	adds	r1, r7, #4
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	2201      	movs	r2, #1
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <__io_putchar+0x20>)
 800448e:	f002 fd46 	bl	8006f1e <HAL_UART_Transmit>
  return ch;
 8004492:	687b      	ldr	r3, [r7, #4]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200001c8 	.word	0x200001c8

080044a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044a6:	f000 fe6d 	bl	8005184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044aa:	f000 fa71 	bl	8004990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044ae:	f000 fb71 	bl	8004b94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80044b2:	f000 fb45 	bl	8004b40 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80044b6:	f000 faf7 	bl	8004aa8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80044ba:	f000 faa5 	bl	8004a08 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80044be:	48b3      	ldr	r0, [pc, #716]	; (800478c <main+0x2ec>)
 80044c0:	f002 f8e2 	bl	8006688 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80044c4:	4bb1      	ldr	r3, [pc, #708]	; (800478c <main+0x2ec>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Base_Start_IT(&htim2);
 80044cc:	48b0      	ldr	r0, [pc, #704]	; (8004790 <main+0x2f0>)
 80044ce:	f002 f925 	bl	800671c <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Task_User_1stInit(1);
 80044d2:	2001      	movs	r0, #1
 80044d4:	f7fd ffd0 	bl	8002478 <Task_User_1stInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch(eUserTask_State)
 80044d8:	4bae      	ldr	r3, [pc, #696]	; (8004794 <main+0x2f4>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d8fb      	bhi.n	80044d8 <main+0x38>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <main+0x48>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	080044fd 	.word	0x080044fd
 80044ec:	08004661 	.word	0x08004661
 80044f0:	080047a5 	.word	0x080047a5
 80044f4:	08004899 	.word	0x08004899
 80044f8:	0800486d 	.word	0x0800486d
	 {
		 case E_STATE_STARTUP:
		 {
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 80044fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004500:	48a5      	ldr	r0, [pc, #660]	; (8004798 <main+0x2f8>)
 8004502:	f001 fc1c 	bl	8005d3e <HAL_GPIO_TogglePin>

			 Led7TurnTime_Display(10, 10, 0, 0);
 8004506:	2300      	movs	r3, #0
 8004508:	2200      	movs	r2, #0
 800450a:	210a      	movs	r1, #10
 800450c:	200a      	movs	r0, #10
 800450e:	f7fc fb89 	bl	8000c24 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 8004512:	230a      	movs	r3, #10
 8004514:	220a      	movs	r2, #10
 8004516:	210a      	movs	r1, #10
 8004518:	200a      	movs	r0, #10
 800451a:	f7fc fbf7 	bl	8000d0c <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10, 0);
 800451e:	2300      	movs	r3, #0
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	230a      	movs	r3, #10
 8004524:	220a      	movs	r2, #10
 8004526:	210a      	movs	r1, #10
 8004528:	200a      	movs	r0, #10
 800452a:	f7fc fc5f 	bl	8000dec <Led7RoundTime_Display>

			 Task_Blink_Line(0, 0, 1);
 800452e:	2201      	movs	r2, #1
 8004530:	2100      	movs	r1, #0
 8004532:	2000      	movs	r0, #0
 8004534:	f7ff fd58 	bl	8003fe8 <Task_Blink_Line>
			 Task_Led_StartPoint(12, 12, 12);
 8004538:	220c      	movs	r2, #12
 800453a:	210c      	movs	r1, #12
 800453c:	200c      	movs	r0, #12
 800453e:	f7ff fd13 	bl	8003f68 <Task_Led_StartPoint>
			 Task_led_xl(0, 0x00);
 8004542:	2100      	movs	r1, #0
 8004544:	2000      	movs	r0, #0
 8004546:	f7ff fcf9 	bl	8003f3c <Task_led_xl>
			 Task_Clear_Display(0);
 800454a:	2000      	movs	r0, #0
 800454c:	f7ff fcda 	bl	8003f04 <Task_Clear_Display>
			 Task_Buzzer_Enable();
 8004550:	f7ff fd62 	bl	8004018 <Task_Buzzer_Enable>

			 while(1)
			 {
				 //Task_100ms();
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004554:	2101      	movs	r1, #1
 8004556:	4891      	ldr	r0, [pc, #580]	; (800479c <main+0x2fc>)
 8004558:	f001 fbc2 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d139      	bne.n	80045d6 <main+0x136>
					 delay_ms(BUTTON_DELAY);
 8004562:	2014      	movs	r0, #20
 8004564:	f7ff ff68 	bl	8004438 <delay_ms>
					 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004568:	2101      	movs	r1, #1
 800456a:	488c      	ldr	r0, [pc, #560]	; (800479c <main+0x2fc>)
 800456c:	f001 fbb8 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d16d      	bne.n	8004652 <main+0x1b2>
						 while(POWER_BUT_VAL == BUTTON_ACTIVE)
 8004576:	e01a      	b.n	80045ae <main+0x10e>
						 {
							 button_press_cnt++;
 8004578:	4b89      	ldr	r3, [pc, #548]	; (80047a0 <main+0x300>)
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b87      	ldr	r3, [pc, #540]	; (80047a0 <main+0x300>)
 8004582:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004584:	4b86      	ldr	r3, [pc, #536]	; (80047a0 <main+0x300>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	2b14      	cmp	r3, #20
 800458a:	d90d      	bls.n	80045a8 <main+0x108>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 800458c:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <main+0x300>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	00da      	lsls	r2, r3, #3
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <main+0x300>)
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	210a      	movs	r1, #10
 80045a2:	200a      	movs	r0, #10
 80045a4:	f7fc fb3e 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 80045a8:	2064      	movs	r0, #100	; 0x64
 80045aa:	f7ff ff45 	bl	8004438 <delay_ms>
						 while(POWER_BUT_VAL == BUTTON_ACTIVE)
 80045ae:	2101      	movs	r1, #1
 80045b0:	487a      	ldr	r0, [pc, #488]	; (800479c <main+0x2fc>)
 80045b2:	f001 fb95 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d0dd      	beq.n	8004578 <main+0xd8>
						 }
						 if(button_press_cnt > 20){
 80045bc:	4b78      	ldr	r3, [pc, #480]	; (80047a0 <main+0x300>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	2b14      	cmp	r3, #20
 80045c2:	d904      	bls.n	80045ce <main+0x12e>
							 Task_Buzzer_Enable();
 80045c4:	f7ff fd28 	bl	8004018 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_POWER_ON;
 80045c8:	4b72      	ldr	r3, [pc, #456]	; (8004794 <main+0x2f4>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 80045ce:	4b74      	ldr	r3, [pc, #464]	; (80047a0 <main+0x300>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e03d      	b.n	8004652 <main+0x1b2>
					 }
				 }
				 else if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	4870      	ldr	r0, [pc, #448]	; (800479c <main+0x2fc>)
 80045da:	f001 fb81 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d136      	bne.n	8004652 <main+0x1b2>
					 delay_ms((int)BUTTON_DELAY);
 80045e4:	2014      	movs	r0, #20
 80045e6:	f7ff ff27 	bl	8004438 <delay_ms>
					 if(PLUS_BUT_VAL ==BUTTON_ACTIVE){
 80045ea:	2180      	movs	r1, #128	; 0x80
 80045ec:	486b      	ldr	r0, [pc, #428]	; (800479c <main+0x2fc>)
 80045ee:	f001 fb77 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d12c      	bne.n	8004652 <main+0x1b2>
						 while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 80045f8:	e01a      	b.n	8004630 <main+0x190>
						 {
							 button_press_cnt++;
 80045fa:	4b69      	ldr	r3, [pc, #420]	; (80047a0 <main+0x300>)
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	4b67      	ldr	r3, [pc, #412]	; (80047a0 <main+0x300>)
 8004604:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004606:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <main+0x300>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b14      	cmp	r3, #20
 800460c:	d90d      	bls.n	800462a <main+0x18a>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 800460e:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <main+0x300>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	00da      	lsls	r2, r3, #3
 8004618:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <main+0x300>)
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	210a      	movs	r1, #10
 8004624:	200a      	movs	r0, #10
 8004626:	f7fc fafd 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 800462a:	2064      	movs	r0, #100	; 0x64
 800462c:	f7ff ff04 	bl	8004438 <delay_ms>
						 while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	485a      	ldr	r0, [pc, #360]	; (800479c <main+0x2fc>)
 8004634:	f001 fb54 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d0dd      	beq.n	80045fa <main+0x15a>
						 }
						 if(button_press_cnt > 20){
 800463e:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <main+0x300>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	2b14      	cmp	r3, #20
 8004644:	d902      	bls.n	800464c <main+0x1ac>
							 eUserTask_State = E_STATE_RUN_MODE;
 8004646:	4b53      	ldr	r3, [pc, #332]	; (8004794 <main+0x2f4>)
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 800464c:	4b54      	ldr	r3, [pc, #336]	; (80047a0 <main+0x300>)
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]
//						 }
//						 button_press_cnt = 0;
//					 }
//				 }

				 if(eUserTask_State!=E_STATE_STARTUP){
 8004652:	4b50      	ldr	r3, [pc, #320]	; (8004794 <main+0x2f4>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d100      	bne.n	800465c <main+0x1bc>
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 800465a:	e77b      	b.n	8004554 <main+0xb4>
					 break;
 800465c:	bf00      	nop
				 }
			 }
			 break;
 800465e:	e18d      	b.n	800497c <main+0x4dc>
		 }

		 case E_STATE_POWER_ON:
		 {
			 //Send data ON LXL
			 Task_Round_Init();
 8004660:	f7fd ff46 	bl	80024f0 <Task_Round_Init>
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8004664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004668:	484b      	ldr	r0, [pc, #300]	; (8004798 <main+0x2f8>)
 800466a:	f001 fb68 	bl	8005d3e <HAL_GPIO_TogglePin>
			 while(1)
			 {
				 Task_100ms();
 800466e:	f7ff fa4b 	bl	8003b08 <Task_100ms>
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004672:	2101      	movs	r1, #1
 8004674:	4849      	ldr	r0, [pc, #292]	; (800479c <main+0x2fc>)
 8004676:	f001 fb33 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d13d      	bne.n	80046fc <main+0x25c>
					 delay_ms((int)BUTTON_DELAY);
 8004680:	2014      	movs	r0, #20
 8004682:	f7ff fed9 	bl	8004438 <delay_ms>
					 if (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004686:	2101      	movs	r1, #1
 8004688:	4844      	ldr	r0, [pc, #272]	; (800479c <main+0x2fc>)
 800468a:	f001 fb29 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d173      	bne.n	800477c <main+0x2dc>
						 while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004694:	e01a      	b.n	80046cc <main+0x22c>
							 button_press_cnt++;
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <main+0x300>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <main+0x300>)
 80046a0:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <main+0x300>)
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	2b14      	cmp	r3, #20
 80046a8:	d90d      	bls.n	80046c6 <main+0x226>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <main+0x300>)
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	00da      	lsls	r2, r3, #3
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <main+0x300>)
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	210a      	movs	r1, #10
 80046c0:	200a      	movs	r0, #10
 80046c2:	f7fc faaf 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 80046c6:	2064      	movs	r0, #100	; 0x64
 80046c8:	f7ff feb6 	bl	8004438 <delay_ms>
						 while (POWER_BUT_VAL == BUTTON_ACTIVE){
 80046cc:	2101      	movs	r1, #1
 80046ce:	4833      	ldr	r0, [pc, #204]	; (800479c <main+0x2fc>)
 80046d0:	f001 fb06 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d0dd      	beq.n	8004696 <main+0x1f6>
						 }
						 if (button_press_cnt > 20){
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <main+0x300>)
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	2b14      	cmp	r3, #20
 80046e0:	d903      	bls.n	80046ea <main+0x24a>
							 eUserTask_State = E_STATE_STARTUP;
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <main+0x2f4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e004      	b.n	80046f4 <main+0x254>
						 }
						 else {
							 Task_Buzzer_Enable();
 80046ea:	f7ff fc95 	bl	8004018 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_PLAYING;
 80046ee:	4b29      	ldr	r3, [pc, #164]	; (8004794 <main+0x2f4>)
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 80046f4:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <main+0x300>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e03f      	b.n	800477c <main+0x2dc>
					 }
				 }
				 else if(MODE_BUT_VAL == BUTTON_ACTIVE){
 80046fc:	2102      	movs	r1, #2
 80046fe:	4827      	ldr	r0, [pc, #156]	; (800479c <main+0x2fc>)
 8004700:	f001 faee 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d138      	bne.n	800477c <main+0x2dc>
					 delay_ms((int)BUTTON_DELAY);
 800470a:	2014      	movs	r0, #20
 800470c:	f7ff fe94 	bl	8004438 <delay_ms>
					 if (MODE_BUT_VAL == BUTTON_ACTIVE){
 8004710:	2102      	movs	r1, #2
 8004712:	4822      	ldr	r0, [pc, #136]	; (800479c <main+0x2fc>)
 8004714:	f001 fae4 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12e      	bne.n	800477c <main+0x2dc>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 800471e:	e01a      	b.n	8004756 <main+0x2b6>
						 {
							 button_press_cnt++;
 8004720:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <main+0x300>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <main+0x300>)
 800472a:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 800472c:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <main+0x300>)
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	2b14      	cmp	r3, #20
 8004732:	d90d      	bls.n	8004750 <main+0x2b0>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004734:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <main+0x300>)
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <main+0x300>)
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	210a      	movs	r1, #10
 800474a:	200a      	movs	r0, #10
 800474c:	f7fc fa6a 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004750:	2064      	movs	r0, #100	; 0x64
 8004752:	f7ff fe71 	bl	8004438 <delay_ms>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004756:	2102      	movs	r1, #2
 8004758:	4810      	ldr	r0, [pc, #64]	; (800479c <main+0x2fc>)
 800475a:	f001 fac1 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d0dd      	beq.n	8004720 <main+0x280>
						 }
						 if(button_press_cnt > 20){
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <main+0x300>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	2b14      	cmp	r3, #20
 800476a:	d904      	bls.n	8004776 <main+0x2d6>
							 Task_Buzzer_Enable();
 800476c:	f7ff fc54 	bl	8004018 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_CFG_MODE;
 8004770:	4b08      	ldr	r3, [pc, #32]	; (8004794 <main+0x2f4>)
 8004772:	2203      	movs	r2, #3
 8004774:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <main+0x300>)
 8004778:	2200      	movs	r2, #0
 800477a:	801a      	strh	r2, [r3, #0]
					 }
				 }

				 if(eUserTask_State!=E_STATE_POWER_ON)
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <main+0x2f4>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d100      	bne.n	8004786 <main+0x2e6>
				 Task_100ms();
 8004784:	e773      	b.n	800466e <main+0x1ce>
					 break;
 8004786:	bf00      	nop
			 }
			 break;
 8004788:	e0f8      	b.n	800497c <main+0x4dc>
 800478a:	bf00      	nop
 800478c:	20000138 	.word	0x20000138
 8004790:	20000180 	.word	0x20000180
 8004794:	2000020c 	.word	0x2000020c
 8004798:	40010800 	.word	0x40010800
 800479c:	40010c00 	.word	0x40010c00
 80047a0:	2000020e 	.word	0x2000020e
		 }

		 case E_STATE_PLAYING:
		 {
			 HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80047a4:	2108      	movs	r1, #8
 80047a6:	4876      	ldr	r0, [pc, #472]	; (8004980 <main+0x4e0>)
 80047a8:	f001 fac9 	bl	8005d3e <HAL_GPIO_TogglePin>

			 while(1)
			 {
				Playing_Stt = Task_Playing();
 80047ac:	f7fe f814 	bl	80027d8 <Task_Playing>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b73      	ldr	r3, [pc, #460]	; (8004984 <main+0x4e4>)
 80047b6:	701a      	strb	r2, [r3, #0]
				if(Playing_Stt == 0x01)			//Next Rout
 80047b8:	4b72      	ldr	r3, [pc, #456]	; (8004984 <main+0x4e4>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d103      	bne.n	80047c8 <main+0x328>
					eUserTask_State = E_STATE_POWER_ON;
 80047c0:	4b71      	ldr	r3, [pc, #452]	; (8004988 <main+0x4e8>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e007      	b.n	80047d8 <main+0x338>
				else if(Playing_Stt == 0xFF)	//Winner -> Reset
 80047c8:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <main+0x4e4>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2bff      	cmp	r3, #255	; 0xff
 80047ce:	d103      	bne.n	80047d8 <main+0x338>
					Task_led_xl(0, 0x0F);
 80047d0:	210f      	movs	r1, #15
 80047d2:	2000      	movs	r0, #0
 80047d4:	f7ff fbb2 	bl	8003f3c <Task_led_xl>

				Task_100ms();
 80047d8:	f7ff f996 	bl	8003b08 <Task_100ms>
				if(POWER_BUT_VAL == BUTTON_ACTIVE){
 80047dc:	2101      	movs	r1, #1
 80047de:	4868      	ldr	r0, [pc, #416]	; (8004980 <main+0x4e0>)
 80047e0:	f001 fa7e 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d139      	bne.n	800485e <main+0x3be>
					delay_ms((int)BUTTON_DELAY);
 80047ea:	2014      	movs	r0, #20
 80047ec:	f7ff fe24 	bl	8004438 <delay_ms>
					if (POWER_BUT_VAL == BUTTON_ACTIVE){
 80047f0:	2101      	movs	r1, #1
 80047f2:	4863      	ldr	r0, [pc, #396]	; (8004980 <main+0x4e0>)
 80047f4:	f001 fa74 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d12f      	bne.n	800485e <main+0x3be>
						while (POWER_BUT_VAL == BUTTON_ACTIVE){
 80047fe:	e01a      	b.n	8004836 <main+0x396>
							button_press_cnt++;
 8004800:	4b62      	ldr	r3, [pc, #392]	; (800498c <main+0x4ec>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	4b60      	ldr	r3, [pc, #384]	; (800498c <main+0x4ec>)
 800480a:	801a      	strh	r2, [r3, #0]
							if(button_press_cnt > 20){
 800480c:	4b5f      	ldr	r3, [pc, #380]	; (800498c <main+0x4ec>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	2b14      	cmp	r3, #20
 8004812:	d90d      	bls.n	8004830 <main+0x390>
								Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004814:	4b5d      	ldr	r3, [pc, #372]	; (800498c <main+0x4ec>)
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	00da      	lsls	r2, r3, #3
 800481e:	4b5b      	ldr	r3, [pc, #364]	; (800498c <main+0x4ec>)
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	210a      	movs	r1, #10
 800482a:	200a      	movs	r0, #10
 800482c:	f7fc f9fa 	bl	8000c24 <Led7TurnTime_Display>
							}
							delay_ms(100);
 8004830:	2064      	movs	r0, #100	; 0x64
 8004832:	f7ff fe01 	bl	8004438 <delay_ms>
						while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004836:	2101      	movs	r1, #1
 8004838:	4851      	ldr	r0, [pc, #324]	; (8004980 <main+0x4e0>)
 800483a:	f001 fa51 	bl	8005ce0 <HAL_GPIO_ReadPin>
 800483e:	4603      	mov	r3, r0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d0dd      	beq.n	8004800 <main+0x360>
						}
						if(button_press_cnt > 20){
 8004844:	4b51      	ldr	r3, [pc, #324]	; (800498c <main+0x4ec>)
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	2b14      	cmp	r3, #20
 800484a:	d905      	bls.n	8004858 <main+0x3b8>
							Task_User_1stInit(0);
 800484c:	2000      	movs	r0, #0
 800484e:	f7fd fe13 	bl	8002478 <Task_User_1stInit>
							eUserTask_State = E_STATE_STARTUP;
 8004852:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <main+0x4e8>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
						}
						button_press_cnt = 0;
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <main+0x4ec>)
 800485a:	2200      	movs	r2, #0
 800485c:	801a      	strh	r2, [r3, #0]
					}
				}

				if(eUserTask_State!=E_STATE_PLAYING)
 800485e:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <main+0x4e8>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d100      	bne.n	8004868 <main+0x3c8>
				Playing_Stt = Task_Playing();
 8004866:	e7a1      	b.n	80047ac <main+0x30c>
					break;
 8004868:	bf00      	nop
			 }
			 break;
 800486a:	e087      	b.n	800497c <main+0x4dc>
		 }
		 case E_STATE_RUN_MODE:
		 {
			 Task_led_xl(0, 0x0F);
 800486c:	210f      	movs	r1, #15
 800486e:	2000      	movs	r0, #0
 8004870:	f7ff fb64 	bl	8003f3c <Task_led_xl>
			 Task_TestMode_Display(0);
 8004874:	2000      	movs	r0, #0
 8004876:	f7fe ff5f 	bl	8003738 <Task_TestMode_Display>
			 while(1){
				if(Task_Run_TestMode()){
 800487a:	f7fe fff5 	bl	8003868 <Task_Run_TestMode>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <main+0x3ea>
					eUserTask_State = E_STATE_STARTUP;
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <main+0x4e8>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
				}
				if(eUserTask_State!=E_STATE_RUN_MODE)
 800488a:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <main+0x4e8>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d100      	bne.n	8004894 <main+0x3f4>
				if(Task_Run_TestMode()){
 8004892:	e7f2      	b.n	800487a <main+0x3da>
					break;
 8004894:	bf00      	nop
			 }
			 break;
 8004896:	e071      	b.n	800497c <main+0x4dc>
		 }
		 case E_STATE_CFG_MODE:
		 {
			 Task_Read_Cfg();
 8004898:	f7fc fde2 	bl	8001460 <Task_Read_Cfg>
			 Led7TurnTime_Display(10, 10, 0, 0);
 800489c:	2300      	movs	r3, #0
 800489e:	2200      	movs	r2, #0
 80048a0:	210a      	movs	r1, #10
 80048a2:	200a      	movs	r0, #10
 80048a4:	f7fc f9be 	bl	8000c24 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 80048a8:	230a      	movs	r3, #10
 80048aa:	220a      	movs	r2, #10
 80048ac:	210a      	movs	r1, #10
 80048ae:	200a      	movs	r0, #10
 80048b0:	f7fc fa2c 	bl	8000d0c <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10, 0);
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	230a      	movs	r3, #10
 80048ba:	220a      	movs	r2, #10
 80048bc:	210a      	movs	r1, #10
 80048be:	200a      	movs	r0, #10
 80048c0:	f7fc fa94 	bl	8000dec <Led7RoundTime_Display>

			 Task_Led_StartPoint(12, 12, 12);
 80048c4:	220c      	movs	r2, #12
 80048c6:	210c      	movs	r1, #12
 80048c8:	200c      	movs	r0, #12
 80048ca:	f7ff fb4d 	bl	8003f68 <Task_Led_StartPoint>
			 Task_led_xl(0, 0x00);
 80048ce:	2100      	movs	r1, #0
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7ff fb33 	bl	8003f3c <Task_led_xl>
			 Task_Clear_Display(0);
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7ff fb14 	bl	8003f04 <Task_Clear_Display>
			 while(1)
			 {
				 Task_Mode_Cfg();
 80048dc:	f7fc fdfc 	bl	80014d8 <Task_Mode_Cfg>
				 Task_100ms();
 80048e0:	f7ff f912 	bl	8003b08 <Task_100ms>
				 if(MODE_BUT_VAL == BUTTON_ACTIVE){
 80048e4:	2102      	movs	r1, #2
 80048e6:	4826      	ldr	r0, [pc, #152]	; (8004980 <main+0x4e0>)
 80048e8:	f001 f9fa 	bl	8005ce0 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d13d      	bne.n	800496e <main+0x4ce>
					 delay_ms((int)BUTTON_DELAY);
 80048f2:	2014      	movs	r0, #20
 80048f4:	f7ff fda0 	bl	8004438 <delay_ms>
					 if (MODE_BUT_VAL == BUTTON_ACTIVE){
 80048f8:	2102      	movs	r1, #2
 80048fa:	4821      	ldr	r0, [pc, #132]	; (8004980 <main+0x4e0>)
 80048fc:	f001 f9f0 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d133      	bne.n	800496e <main+0x4ce>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004906:	e01a      	b.n	800493e <main+0x49e>
						 {
							 button_press_cnt++;
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <main+0x4ec>)
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <main+0x4ec>)
 8004912:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004914:	4b1d      	ldr	r3, [pc, #116]	; (800498c <main+0x4ec>)
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2b14      	cmp	r3, #20
 800491a:	d90d      	bls.n	8004938 <main+0x498>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <main+0x4ec>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	00da      	lsls	r2, r3, #3
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <main+0x4ec>)
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	210a      	movs	r1, #10
 8004932:	200a      	movs	r0, #10
 8004934:	f7fc f976 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004938:	2064      	movs	r0, #100	; 0x64
 800493a:	f7ff fd7d 	bl	8004438 <delay_ms>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 800493e:	2102      	movs	r1, #2
 8004940:	480f      	ldr	r0, [pc, #60]	; (8004980 <main+0x4e0>)
 8004942:	f001 f9cd 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0dd      	beq.n	8004908 <main+0x468>
						 }
						 if(button_press_cnt > 20){
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <main+0x4ec>)
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	2b14      	cmp	r3, #20
 8004952:	d909      	bls.n	8004968 <main+0x4c8>
							 Task_Buzzer_Enable();
 8004954:	f7ff fb60 	bl	8004018 <Task_Buzzer_Enable>
							 Task_User_1stInit(0);
 8004958:	2000      	movs	r0, #0
 800495a:	f7fd fd8d 	bl	8002478 <Task_User_1stInit>
							Task_Save_Cfg();
 800495e:	f7fc fdad 	bl	80014bc <Task_Save_Cfg>
							eUserTask_State = E_STATE_POWER_ON;
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <main+0x4e8>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <main+0x4ec>)
 800496a:	2200      	movs	r2, #0
 800496c:	801a      	strh	r2, [r3, #0]
					 }
				 }
				 if(eUserTask_State!=E_STATE_CFG_MODE)
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <main+0x4e8>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d100      	bne.n	8004978 <main+0x4d8>
				 Task_Mode_Cfg();
 8004976:	e7b1      	b.n	80048dc <main+0x43c>
					break;
 8004978:	bf00      	nop
			 }
			 break;
 800497a:	bf00      	nop
	 switch(eUserTask_State)
 800497c:	e5ac      	b.n	80044d8 <main+0x38>
 800497e:	bf00      	nop
 8004980:	40010c00 	.word	0x40010c00
 8004984:	2000020d 	.word	0x2000020d
 8004988:	2000020c 	.word	0x2000020c
 800498c:	2000020e 	.word	0x2000020e

08004990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b090      	sub	sp, #64	; 0x40
 8004994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004996:	f107 0318 	add.w	r3, r7, #24
 800499a:	2228      	movs	r2, #40	; 0x28
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f002 ff72 	bl	8007888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049b2:	2302      	movs	r3, #2
 80049b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049b6:	2301      	movs	r3, #1
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049ba:	2310      	movs	r3, #16
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049c2:	f107 0318 	add.w	r3, r7, #24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f9f4 	bl	8005db4 <HAL_RCC_OscConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80049d2:	f000 f959 	bl	8004c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049d6:	230f      	movs	r3, #15
 80049d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 fc62 	bl	80062b8 <HAL_RCC_ClockConfig>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80049fa:	f000 f945 	bl	8004c88 <Error_Handler>
  }
}
 80049fe:	bf00      	nop
 8004a00:	3740      	adds	r7, #64	; 0x40
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a0e:	f107 0308 	add.w	r3, r7, #8
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	609a      	str	r2, [r3, #8]
 8004a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a26:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <MX_TIM1_Init+0x9c>)
 8004a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a2c:	2207      	movs	r2, #7
 8004a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a50:	4813      	ldr	r0, [pc, #76]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a52:	f001 fdc9 	bl	80065e8 <HAL_TIM_Base_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004a5c:	f000 f914 	bl	8004c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a66:	f107 0308 	add.w	r3, r7, #8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a6e:	f001 ffaf 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004a78:	f000 f906 	bl	8004c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a84:	463b      	mov	r3, r7
 8004a86:	4619      	mov	r1, r3
 8004a88:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_TIM1_Init+0x98>)
 8004a8a:	f002 f98b 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004a94:	f000 f8f8 	bl	8004c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004a98:	bf00      	nop
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000138 	.word	0x20000138
 8004aa4:	40012c00 	.word	0x40012c00

08004aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004abc:	463b      	mov	r3, r7
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ace:	224f      	movs	r2, #79	; 0x4f
 8004ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ada:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ade:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004aec:	4813      	ldr	r0, [pc, #76]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004aee:	f001 fd7b 	bl	80065e8 <HAL_TIM_Base_Init>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004af8:	f000 f8c6 	bl	8004c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4619      	mov	r1, r3
 8004b08:	480c      	ldr	r0, [pc, #48]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004b0a:	f001 ff61 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004b14:	f000 f8b8 	bl	8004c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b20:	463b      	mov	r3, r7
 8004b22:	4619      	mov	r1, r3
 8004b24:	4805      	ldr	r0, [pc, #20]	; (8004b3c <MX_TIM2_Init+0x94>)
 8004b26:	f002 f93d 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004b30:	f000 f8aa 	bl	8004c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b34:	bf00      	nop
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000180 	.word	0x20000180

08004b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <MX_USART3_UART_Init+0x50>)
 8004b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b66:	220c      	movs	r2, #12
 8004b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b76:	4805      	ldr	r0, [pc, #20]	; (8004b8c <MX_USART3_UART_Init+0x4c>)
 8004b78:	f002 f984 	bl	8006e84 <HAL_UART_Init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b82:	f000 f881 	bl	8004c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200001c8 	.word	0x200001c8
 8004b90:	40004800 	.word	0x40004800

08004b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
 8004ba6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba8:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	4a32      	ldr	r2, [pc, #200]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6193      	str	r3, [r2, #24]
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004bc6:	f043 0308 	orr.w	r3, r3, #8
 8004bca:	6193      	str	r3, [r2, #24]
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <MX_GPIO_Init+0xe4>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO1_Pin|IO2_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8004bde:	4827      	ldr	r0, [pc, #156]	; (8004c7c <MX_GPIO_Init+0xe8>)
 8004be0:	f001 f895 	bl	8005d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 8004be4:	2200      	movs	r2, #0
 8004be6:	f24f 1118 	movw	r1, #61720	; 0xf118
 8004bea:	4825      	ldr	r0, [pc, #148]	; (8004c80 <MX_GPIO_Init+0xec>)
 8004bec:	f001 f88f 	bl	8005d0e <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IO1_Pin IO2_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = IO1_Pin|IO2_Pin|LED_Y_Pin;
 8004bf0:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8004bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	4619      	mov	r1, r3
 8004c08:	481c      	ldr	r0, [pc, #112]	; (8004c7c <MX_GPIO_Init+0xe8>)
 8004c0a:	f000 fee5 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin
                           BTN_5_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin
 8004c0e:	23e3      	movs	r3, #227	; 0xe3
 8004c10:	60bb      	str	r3, [r7, #8]
                          |BTN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c16:	2302      	movs	r3, #2
 8004c18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1a:	f107 0308 	add.w	r3, r7, #8
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4817      	ldr	r0, [pc, #92]	; (8004c80 <MX_GPIO_Init+0xec>)
 8004c22:	f000 fed9 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_1_Pin DIO_1_Pin CLK_2_Pin DIO_2_Pin
                           LED_R_Pin LED_G_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 8004c26:	f24f 1318 	movw	r3, #61720	; 0xf118
 8004c2a:	60bb      	str	r3, [r7, #8]
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2302      	movs	r3, #2
 8004c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4810      	ldr	r0, [pc, #64]	; (8004c80 <MX_GPIO_Init+0xec>)
 8004c40:	f000 feca 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IR_SIGNAL_Pin;
 8004c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <MX_GPIO_Init+0xf0>)
 8004c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IR_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004c52:	f107 0308 	add.w	r3, r7, #8
 8004c56:	4619      	mov	r1, r3
 8004c58:	4808      	ldr	r0, [pc, #32]	; (8004c7c <MX_GPIO_Init+0xe8>)
 8004c5a:	f000 febd 	bl	80059d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2100      	movs	r1, #0
 8004c62:	2028      	movs	r0, #40	; 0x28
 8004c64:	f000 fbc7 	bl	80053f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c68:	2028      	movs	r0, #40	; 0x28
 8004c6a:	f000 fbe0 	bl	800542e <HAL_NVIC_EnableIRQ>

}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40010800 	.word	0x40010800
 8004c80:	40010c00 	.word	0x40010c00
 8004c84:	10310000 	.word	0x10310000

08004c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c8c:	b672      	cpsid	i
}
 8004c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c90:	e7fe      	b.n	8004c90 <Error_Handler+0x8>
	...

08004c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6193      	str	r3, [r2, #24]
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	61d3      	str	r3, [r2, #28]
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_MspInit+0x5c>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_MspInit+0x60>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <HAL_MspInit+0x60>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40010000 	.word	0x40010000

08004cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_Base_MspInit+0x68>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10c      	bne.n	8004d24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d14:	6193      	str	r3, [r2, #24]
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004d22:	e018      	b.n	8004d56 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d113      	bne.n	8004d56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	61d3      	str	r3, [r2, #28]
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_TIM_Base_MspInit+0x6c>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2101      	movs	r1, #1
 8004d4a:	201c      	movs	r0, #28
 8004d4c:	f000 fb53 	bl	80053f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d50:	201c      	movs	r0, #28
 8004d52:	f000 fb6c 	bl	800542e <HAL_NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <HAL_UART_MspInit+0x9c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d139      	bne.n	8004dfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d92:	61d3      	str	r3, [r2, #28]
 8004d94:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004da6:	f043 0308 	orr.w	r3, r3, #8
 8004daa:	6193      	str	r3, [r2, #24]
 8004dac:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <HAL_UART_MspInit+0xa0>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc6:	f107 0310 	add.w	r3, r7, #16
 8004dca:	4619      	mov	r1, r3
 8004dcc:	480f      	ldr	r0, [pc, #60]	; (8004e0c <HAL_UART_MspInit+0xa4>)
 8004dce:	f000 fe03 	bl	80059d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	4619      	mov	r1, r3
 8004de6:	4809      	ldr	r0, [pc, #36]	; (8004e0c <HAL_UART_MspInit+0xa4>)
 8004de8:	f000 fdf6 	bl	80059d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8004dec:	2200      	movs	r2, #0
 8004dee:	2102      	movs	r1, #2
 8004df0:	2027      	movs	r0, #39	; 0x27
 8004df2:	f000 fb00 	bl	80053f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004df6:	2027      	movs	r0, #39	; 0x27
 8004df8:	f000 fb19 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004dfc:	bf00      	nop
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40004800 	.word	0x40004800
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40010c00 	.word	0x40010c00

08004e10 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sys_millis++;
 8004e14:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e20:	801a      	strh	r2, [r3, #0]
	if(bFlagDelay==1)
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <SysTick_Handler+0x94>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <SysTick_Handler+0x28>
		uCountDelay++;
 8004e2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <SysTick_Handler+0x98>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <SysTick_Handler+0x98>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e002      	b.n	8004e3e <SysTick_Handler+0x2e>
	else
		uCountDelay=0;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <SysTick_Handler+0x98>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

	if(sys_millis==10000)	sys_millis = 0;
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <SysTick_Handler+0x42>
 8004e4c:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	801a      	strh	r2, [r3, #0]
	if(sys_millis%TASK1 == 0)	Task1_Flag = 1;
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <SysTick_Handler+0x9c>)
 8004e5a:	fba2 1203 	umull	r1, r2, r2, r3
 8004e5e:	0952      	lsrs	r2, r2, #5
 8004e60:	2164      	movs	r1, #100	; 0x64
 8004e62:	fb01 f202 	mul.w	r2, r1, r2
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <SysTick_Handler+0x64>
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <SysTick_Handler+0xa0>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
	if(sys_millis%TASK2 == 0)	Task2_Flag = 1;
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <SysTick_Handler+0x90>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <SysTick_Handler+0x9c>)
 8004e7c:	fba2 1203 	umull	r1, r2, r2, r3
 8004e80:	0952      	lsrs	r2, r2, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f202 	mul.w	r2, r1, r2
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <SysTick_Handler+0x86>
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <SysTick_Handler+0xa4>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e96:	f000 f9bb 	bl	8005210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200000bc 	.word	0x200000bc
 8004ea4:	200000be 	.word	0x200000be
 8004ea8:	200000c0 	.word	0x200000c0
 8004eac:	51eb851f 	.word	0x51eb851f
 8004eb0:	200000c4 	.word	0x200000c4
 8004eb4:	200000c5 	.word	0x200000c5

08004eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//Task_100ms();
	task100ms_flag = 1;
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <TIM2_IRQHandler+0x60>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
	if((buzzer_stt > 0) && (buzzer_stt != 0xFF)){
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d012      	beq.n	8004ef2 <TIM2_IRQHandler+0x3a>
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2bff      	cmp	r3, #255	; 0xff
 8004ed4:	d00d      	beq.n	8004ef2 <TIM2_IRQHandler+0x3a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004edc:	4810      	ldr	r0, [pc, #64]	; (8004f20 <TIM2_IRQHandler+0x68>)
 8004ede:	f000 ff16 	bl	8005d0e <HAL_GPIO_WritePin>
		buzzer_stt--;
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e00d      	b.n	8004f0e <TIM2_IRQHandler+0x56>
	}
	else if(buzzer_stt == 0){
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <TIM2_IRQHandler+0x56>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f02:	4807      	ldr	r0, [pc, #28]	; (8004f20 <TIM2_IRQHandler+0x68>)
 8004f04:	f000 ff03 	bl	8005d0e <HAL_GPIO_WritePin>
		buzzer_stt = 0xFF;
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <TIM2_IRQHandler+0x64>)
 8004f0a:	22ff      	movs	r2, #255	; 0xff
 8004f0c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f0e:	4805      	ldr	r0, [pc, #20]	; (8004f24 <TIM2_IRQHandler+0x6c>)
 8004f10:	f001 fc56 	bl	80067c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	200000c6 	.word	0x200000c6
 8004f1c:	20000016 	.word	0x20000016
 8004f20:	40010c00 	.word	0x40010c00
 8004f24:	20000180 	.word	0x20000180

08004f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004f2c:	4802      	ldr	r0, [pc, #8]	; (8004f38 <USART3_IRQHandler+0x10>)
 8004f2e:	f002 f889 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200001c8 	.word	0x200001c8

08004f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(HAL_GPIO_ReadPin(IR_SIGNAL_GPIO_Port, IR_SIGNAL_Pin) == GPIO_PIN_RESET)
 8004f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f44:	4824      	ldr	r0, [pc, #144]	; (8004fd8 <EXTI15_10_IRQHandler+0x9c>)
 8004f46:	f000 fecb 	bl	8005ce0 <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <EXTI15_10_IRQHandler+0x1e>
	{
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <EXTI15_10_IRQHandler+0xa0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
 8004f58:	e037      	b.n	8004fca <EXTI15_10_IRQHandler+0x8e>
	}
	else
	{
		if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <EXTI15_10_IRQHandler+0xa0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f64:	d90d      	bls.n	8004f82 <EXTI15_10_IRQHandler+0x46>
		{
			tempCode |= (1UL << (31-bitIndex));   // write 1
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f72:	fa23 f202 	lsr.w	r2, r3, r2
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e00c      	b.n	8004f9c <EXTI15_10_IRQHandler+0x60>
		}
		else
		{
			tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f8e:	40d3      	lsrs	r3, r2
 8004f90:	43da      	mvns	r2, r3
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4013      	ands	r3, r2
 8004f98:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004f9a:	6013      	str	r3, [r2, #0]
		}

		bitIndex++;
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004fa8:	701a      	strb	r2, [r3, #0]
		if(bitIndex == 24)
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b18      	cmp	r3, #24
 8004fb2:	d10a      	bne.n	8004fca <EXTI15_10_IRQHandler+0x8e>
		{
			IRcode = tempCode >> 8; // Second last 8 bits
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <EXTI15_10_IRQHandler+0xac>)
 8004fbc:	6013      	str	r3, [r2, #0]
			 //Do your main work HERE
			//printf("IR Code 0x%x\n", (int)IRcode);

			tempCode = 0;
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <EXTI15_10_IRQHandler+0xa8>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <EXTI15_10_IRQHandler+0xa4>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_SIGNAL_Pin);
 8004fca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fce:	f000 fecf 	bl	8005d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40010800 	.word	0x40010800
 8004fdc:	20000138 	.word	0x20000138
 8004fe0:	20000214 	.word	0x20000214
 8004fe4:	20000210 	.word	0x20000210
 8004fe8:	200000c8 	.word	0x200000c8

08004fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e00a      	b.n	8005014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ffe:	f3af 8000 	nop.w
 8005002:	4601      	mov	r1, r0
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	60ba      	str	r2, [r7, #8]
 800500a:	b2ca      	uxtb	r2, r1
 800500c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3301      	adds	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	dbf0      	blt.n	8004ffe <_read+0x12>
  }

  return len;
 800501c:	687b      	ldr	r3, [r7, #4]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e009      	b.n	800504c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	60ba      	str	r2, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fa1b 	bl	800447c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3301      	adds	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	dbf1      	blt.n	8005038 <_write+0x12>
  }
  return len;
 8005054:	687b      	ldr	r3, [r7, #4]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <_close>:

int _close(int file)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005084:	605a      	str	r2, [r3, #4]
  return 0;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <_isatty>:

int _isatty(int file)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
	...

080050c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <_sbrk+0x5c>)
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <_sbrk+0x60>)
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <_sbrk+0x64>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <_sbrk+0x64>)
 80050de:	4a12      	ldr	r2, [pc, #72]	; (8005128 <_sbrk+0x68>)
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <_sbrk+0x64>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d207      	bcs.n	8005100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050f0:	f002 fba0 	bl	8007834 <__errno>
 80050f4:	4603      	mov	r3, r0
 80050f6:	220c      	movs	r2, #12
 80050f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	e009      	b.n	8005114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <_sbrk+0x64>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <_sbrk+0x64>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <_sbrk+0x64>)
 8005110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20005000 	.word	0x20005000
 8005120:	00000400 	.word	0x00000400
 8005124:	20000218 	.word	0x20000218
 8005128:	20000250 	.word	0x20000250

0800512c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800513a:	490d      	ldr	r1, [pc, #52]	; (8005170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800513e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005140:	e002      	b.n	8005148 <LoopCopyDataInit>

08005142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005146:	3304      	adds	r3, #4

08005148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800514a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800514c:	d3f9      	bcc.n	8005142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005150:	4c0a      	ldr	r4, [pc, #40]	; (800517c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005154:	e001      	b.n	800515a <LoopFillZerobss>

08005156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005158:	3204      	adds	r2, #4

0800515a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800515a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800515c:	d3fb      	bcc.n	8005156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800515e:	f7ff ffe5 	bl	800512c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005162:	f002 fb6d 	bl	8007840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005166:	f7ff f99b 	bl	80044a0 <main>
  bx lr
 800516a:	4770      	bx	lr
  ldr r0, =_sdata
 800516c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005170:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005174:	08008ab0 	.word	0x08008ab0
  ldr r2, =_sbss
 8005178:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800517c:	20000250 	.word	0x20000250

08005180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005180:	e7fe      	b.n	8005180 <ADC1_2_IRQHandler>
	...

08005184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_Init+0x28>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a07      	ldr	r2, [pc, #28]	; (80051ac <HAL_Init+0x28>)
 800518e:	f043 0310 	orr.w	r3, r3, #16
 8005192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005194:	2003      	movs	r0, #3
 8005196:	f000 f923 	bl	80053e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800519a:	200f      	movs	r0, #15
 800519c:	f000 f808 	bl	80051b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051a0:	f7ff fd78 	bl	8004c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40022000 	.word	0x40022000

080051b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051b8:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_InitTick+0x54>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_InitTick+0x58>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f93b 	bl	800544a <HAL_SYSTICK_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e00e      	b.n	80051fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b0f      	cmp	r3, #15
 80051e2:	d80a      	bhi.n	80051fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051e4:	2200      	movs	r2, #0
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	f000 f903 	bl	80053f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051f0:	4a06      	ldr	r2, [pc, #24]	; (800520c <HAL_InitTick+0x5c>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	2000001c 	.word	0x2000001c
 8005208:	20000024 	.word	0x20000024
 800520c:	20000020 	.word	0x20000020

08005210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_IncTick+0x1c>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_IncTick+0x20>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4413      	add	r3, r2
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <HAL_IncTick+0x20>)
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	20000024 	.word	0x20000024
 8005230:	2000021c 	.word	0x2000021c

08005234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return uwTick;
 8005238:	4b02      	ldr	r3, [pc, #8]	; (8005244 <HAL_GetTick+0x10>)
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	2000021c 	.word	0x2000021c

08005248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	60d3      	str	r3, [r2, #12]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 0307 	and.w	r3, r3, #7
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db0b      	blt.n	80052d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	f003 021f 	and.w	r2, r3, #31
 80052c4:	4906      	ldr	r1, [pc, #24]	; (80052e0 <__NVIC_EnableIRQ+0x34>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	2001      	movs	r0, #1
 80052ce:	fa00 f202 	lsl.w	r2, r0, r2
 80052d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	e000e100 	.word	0xe000e100

080052e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	6039      	str	r1, [r7, #0]
 80052ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	db0a      	blt.n	800530e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	490c      	ldr	r1, [pc, #48]	; (8005330 <__NVIC_SetPriority+0x4c>)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	440b      	add	r3, r1
 8005308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800530c:	e00a      	b.n	8005324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4908      	ldr	r1, [pc, #32]	; (8005334 <__NVIC_SetPriority+0x50>)
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	3b04      	subs	r3, #4
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	440b      	add	r3, r1
 8005322:	761a      	strb	r2, [r3, #24]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e100 	.word	0xe000e100
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	bf28      	it	cs
 8005356:	2304      	movcs	r3, #4
 8005358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3304      	adds	r3, #4
 800535e:	2b06      	cmp	r3, #6
 8005360:	d902      	bls.n	8005368 <NVIC_EncodePriority+0x30>
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3b03      	subs	r3, #3
 8005366:	e000      	b.n	800536a <NVIC_EncodePriority+0x32>
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	401a      	ands	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005380:	f04f 31ff 	mov.w	r1, #4294967295
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43d9      	mvns	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005390:	4313      	orrs	r3, r2
         );
}
 8005392:	4618      	mov	r0, r3
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ac:	d301      	bcc.n	80053b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ae:	2301      	movs	r3, #1
 80053b0:	e00f      	b.n	80053d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <SysTick_Config+0x40>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ba:	210f      	movs	r1, #15
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	f7ff ff90 	bl	80052e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <SysTick_Config+0x40>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ca:	4b04      	ldr	r3, [pc, #16]	; (80053dc <SysTick_Config+0x40>)
 80053cc:	2207      	movs	r2, #7
 80053ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	e000e010 	.word	0xe000e010

080053e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff2d 	bl	8005248 <__NVIC_SetPriorityGrouping>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005408:	f7ff ff42 	bl	8005290 <__NVIC_GetPriorityGrouping>
 800540c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	f7ff ff90 	bl	8005338 <NVIC_EncodePriority>
 8005418:	4602      	mov	r2, r0
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff5f 	bl	80052e4 <__NVIC_SetPriority>
}
 8005426:	bf00      	nop
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff ff35 	bl	80052ac <__NVIC_EnableIRQ>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ffa2 	bl	800539c <SysTick_Config>
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005474:	2b02      	cmp	r3, #2
 8005476:	d008      	beq.n	800548a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2204      	movs	r2, #4
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e020      	b.n	80054cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 020e 	bic.w	r2, r2, #14
 8005498:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2101      	movs	r1, #1
 80054b4:	fa01 f202 	lsl.w	r2, r1, r2
 80054b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d005      	beq.n	80054fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e051      	b.n	800559e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 020e 	bic.w	r2, r2, #14
 8005508:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_DMA_Abort_IT+0xd0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d029      	beq.n	8005578 <HAL_DMA_Abort_IT+0xa0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_DMA_Abort_IT+0xd4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <HAL_DMA_Abort_IT+0x9c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_DMA_Abort_IT+0xd8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01a      	beq.n	800556e <HAL_DMA_Abort_IT+0x96>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_DMA_Abort_IT+0xdc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d012      	beq.n	8005568 <HAL_DMA_Abort_IT+0x90>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_DMA_Abort_IT+0xe0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00a      	beq.n	8005562 <HAL_DMA_Abort_IT+0x8a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_DMA_Abort_IT+0xe4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d102      	bne.n	800555c <HAL_DMA_Abort_IT+0x84>
 8005556:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800555a:	e00e      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 800555c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005560:	e00b      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 8005562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005566:	e008      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 8005568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800556c:	e005      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	e002      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 8005574:	2310      	movs	r3, #16
 8005576:	e000      	b.n	800557a <HAL_DMA_Abort_IT+0xa2>
 8005578:	2301      	movs	r3, #1
 800557a:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <HAL_DMA_Abort_IT+0xe8>)
 800557c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
    } 
  }
  return status;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40020008 	.word	0x40020008
 80055ac:	4002001c 	.word	0x4002001c
 80055b0:	40020030 	.word	0x40020030
 80055b4:	40020044 	.word	0x40020044
 80055b8:	40020058 	.word	0x40020058
 80055bc:	4002006c 	.word	0x4002006c
 80055c0:	40020000 	.word	0x40020000

080055c4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055de:	4b2f      	ldr	r3, [pc, #188]	; (800569c <HAL_FLASH_Program+0xd8>)
 80055e0:	7e1b      	ldrb	r3, [r3, #24]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_FLASH_Program+0x26>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e054      	b.n	8005694 <HAL_FLASH_Program+0xd0>
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_FLASH_Program+0xd8>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055f4:	f000 f8b2 	bl	800575c <FLASH_WaitForLastOperation>
 80055f8:	4603      	mov	r3, r0
 80055fa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d144      	bne.n	800568c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d102      	bne.n	800560e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005608:	2301      	movs	r3, #1
 800560a:	757b      	strb	r3, [r7, #21]
 800560c:	e007      	b.n	800561e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d102      	bne.n	800561a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005614:	2302      	movs	r3, #2
 8005616:	757b      	strb	r3, [r7, #21]
 8005618:	e001      	b.n	800561e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800561a:	2304      	movs	r3, #4
 800561c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800561e:	2300      	movs	r3, #0
 8005620:	75bb      	strb	r3, [r7, #22]
 8005622:	e02d      	b.n	8005680 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	005a      	lsls	r2, r3, #1
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	eb02 0c03 	add.w	ip, r2, r3
 800562e:	7dbb      	ldrb	r3, [r7, #22]
 8005630:	0119      	lsls	r1, r3, #4
 8005632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005636:	f1c1 0620 	rsb	r6, r1, #32
 800563a:	f1a1 0020 	sub.w	r0, r1, #32
 800563e:	fa22 f401 	lsr.w	r4, r2, r1
 8005642:	fa03 f606 	lsl.w	r6, r3, r6
 8005646:	4334      	orrs	r4, r6
 8005648:	fa23 f000 	lsr.w	r0, r3, r0
 800564c:	4304      	orrs	r4, r0
 800564e:	fa23 f501 	lsr.w	r5, r3, r1
 8005652:	b2a3      	uxth	r3, r4
 8005654:	4619      	mov	r1, r3
 8005656:	4660      	mov	r0, ip
 8005658:	f000 f864 	bl	8005724 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800565c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005660:	f000 f87c 	bl	800575c <FLASH_WaitForLastOperation>
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <HAL_FLASH_Program+0xdc>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <HAL_FLASH_Program+0xdc>)
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800567a:	7dbb      	ldrb	r3, [r7, #22]
 800567c:	3301      	adds	r3, #1
 800567e:	75bb      	strb	r3, [r7, #22]
 8005680:	7dba      	ldrb	r2, [r7, #22]
 8005682:	7d7b      	ldrb	r3, [r7, #21]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3cd      	bcc.n	8005624 <HAL_FLASH_Program+0x60>
 8005688:	e000      	b.n	800568c <HAL_FLASH_Program+0xc8>
      {
        break;
 800568a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <HAL_FLASH_Program+0xd8>)
 800568e:	2200      	movs	r2, #0
 8005690:	761a      	strb	r2, [r3, #24]

  return status;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569c:	20000220 	.word	0x20000220
 80056a0:	40022000 	.word	0x40022000

080056a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_FLASH_Unlock+0x40>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_FLASH_Unlock+0x40>)
 80056bc:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_FLASH_Unlock+0x44>)
 80056be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056c0:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_FLASH_Unlock+0x40>)
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <HAL_FLASH_Unlock+0x48>)
 80056c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_FLASH_Unlock+0x40>)
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80056d6:	79fb      	ldrb	r3, [r7, #7]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40022000 	.word	0x40022000
 80056e8:	45670123 	.word	0x45670123
 80056ec:	cdef89ab 	.word	0xcdef89ab

080056f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_FLASH_Lock+0x1c>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_FLASH_Lock+0x1c>)
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40022000 	.word	0x40022000

08005710 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <HAL_FLASH_GetError+0x10>)
 8005716:	69db      	ldr	r3, [r3, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	20000220 	.word	0x20000220

08005724 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <FLASH_Program_HalfWord+0x30>)
 8005732:	2200      	movs	r2, #0
 8005734:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005736:	4b08      	ldr	r3, [pc, #32]	; (8005758 <FLASH_Program_HalfWord+0x34>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	4a07      	ldr	r2, [pc, #28]	; (8005758 <FLASH_Program_HalfWord+0x34>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	801a      	strh	r2, [r3, #0]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000220 	.word	0x20000220
 8005758:	40022000 	.word	0x40022000

0800575c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005764:	f7ff fd66 	bl	8005234 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800576a:	e010      	b.n	800578e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d00c      	beq.n	800578e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <FLASH_WaitForLastOperation+0x2e>
 800577a:	f7ff fd5b 	bl	8005234 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d201      	bcs.n	800578e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e025      	b.n	80057da <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e8      	bne.n	800576c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 80057a8:	2220      	movs	r2, #32
 80057aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80057ac:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80057c4:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <FLASH_WaitForLastOperation+0x88>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80057d0:	f000 f80a 	bl	80057e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40022000 	.word	0x40022000

080057e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <FLASH_SetErrorCode+0x98>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005808:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f043 0310 	orr.w	r3, r3, #16
 8005810:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	4a17      	ldr	r2, [pc, #92]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005828:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f043 0304 	orr.w	r3, r3, #4
 8005830:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <FLASH_SetErrorCode+0x9c>)
 8005848:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <FLASH_SetErrorCode+0x98>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f240 1201 	movw	r2, #257	; 0x101
 800585c:	4293      	cmp	r3, r2
 800585e:	d106      	bne.n	800586e <FLASH_SetErrorCode+0x86>
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	61d3      	str	r3, [r2, #28]
}  
 800586c:	e002      	b.n	8005874 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800586e:	4a04      	ldr	r2, [pc, #16]	; (8005880 <FLASH_SetErrorCode+0x98>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60d3      	str	r3, [r2, #12]
}  
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40022000 	.word	0x40022000
 8005884:	20000220 	.word	0x20000220

08005888 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800589a:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <HAL_FLASHEx_Erase+0xd0>)
 800589c:	7e1b      	ldrb	r3, [r3, #24]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_FLASHEx_Erase+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e053      	b.n	800594e <HAL_FLASHEx_Erase+0xc6>
 80058a6:	4b2c      	ldr	r3, [pc, #176]	; (8005958 <HAL_FLASHEx_Erase+0xd0>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d116      	bne.n	80058e2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80058b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058b8:	f7ff ff50 	bl	800575c <FLASH_WaitForLastOperation>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d141      	bne.n	8005946 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80058c2:	2001      	movs	r0, #1
 80058c4:	f000 f84c 	bl	8005960 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058cc:	f7ff ff46 	bl	800575c <FLASH_WaitForLastOperation>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <HAL_FLASHEx_Erase+0xd4>)
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	4a20      	ldr	r2, [pc, #128]	; (800595c <HAL_FLASHEx_Erase+0xd4>)
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	6113      	str	r3, [r2, #16]
 80058e0:	e031      	b.n	8005946 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80058e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058e6:	f7ff ff39 	bl	800575c <FLASH_WaitForLastOperation>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d12a      	bne.n	8005946 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	e019      	b.n	8005934 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005900:	68b8      	ldr	r0, [r7, #8]
 8005902:	f000 f849 	bl	8005998 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005906:	f24c 3050 	movw	r0, #50000	; 0xc350
 800590a:	f7ff ff27 	bl	800575c <FLASH_WaitForLastOperation>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <HAL_FLASHEx_Erase+0xd4>)
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <HAL_FLASHEx_Erase+0xd4>)
 8005918:	f023 0302 	bic.w	r3, r3, #2
 800591c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	601a      	str	r2, [r3, #0]
            break;
 800592a:	e00c      	b.n	8005946 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	029a      	lsls	r2, r3, #10
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3dc      	bcc.n	8005900 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <HAL_FLASHEx_Erase+0xd0>)
 8005948:	2200      	movs	r2, #0
 800594a:	761a      	strb	r2, [r3, #24]

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000220 	.word	0x20000220
 800595c:	40022000 	.word	0x40022000

08005960 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005968:	4b09      	ldr	r3, [pc, #36]	; (8005990 <FLASH_MassErase+0x30>)
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <FLASH_MassErase+0x34>)
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <FLASH_MassErase+0x34>)
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <FLASH_MassErase+0x34>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <FLASH_MassErase+0x34>)
 8005980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005984:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr
 8005990:	20000220 	.word	0x20000220
 8005994:	40022000 	.word	0x40022000

08005998 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <FLASH_PageErase+0x38>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <FLASH_PageErase+0x3c>)
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <FLASH_PageErase+0x3c>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80059b2:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <FLASH_PageErase+0x3c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <FLASH_PageErase+0x3c>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <FLASH_PageErase+0x3c>)
 80059be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000220 	.word	0x20000220
 80059d4:	40022000 	.word	0x40022000

080059d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d8:	b480      	push	{r7}
 80059da:	b08b      	sub	sp, #44	; 0x2c
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059e6:	2300      	movs	r3, #0
 80059e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ea:	e169      	b.n	8005cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80059ec:	2201      	movs	r2, #1
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f040 8158 	bne.w	8005cba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4a9a      	ldr	r2, [pc, #616]	; (8005c78 <HAL_GPIO_Init+0x2a0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d05e      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
 8005a14:	4a98      	ldr	r2, [pc, #608]	; (8005c78 <HAL_GPIO_Init+0x2a0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d875      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a1a:	4a98      	ldr	r2, [pc, #608]	; (8005c7c <HAL_GPIO_Init+0x2a4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d058      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
 8005a20:	4a96      	ldr	r2, [pc, #600]	; (8005c7c <HAL_GPIO_Init+0x2a4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d86f      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a26:	4a96      	ldr	r2, [pc, #600]	; (8005c80 <HAL_GPIO_Init+0x2a8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d052      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
 8005a2c:	4a94      	ldr	r2, [pc, #592]	; (8005c80 <HAL_GPIO_Init+0x2a8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d869      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a32:	4a94      	ldr	r2, [pc, #592]	; (8005c84 <HAL_GPIO_Init+0x2ac>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04c      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
 8005a38:	4a92      	ldr	r2, [pc, #584]	; (8005c84 <HAL_GPIO_Init+0x2ac>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d863      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a3e:	4a92      	ldr	r2, [pc, #584]	; (8005c88 <HAL_GPIO_Init+0x2b0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d046      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
 8005a44:	4a90      	ldr	r2, [pc, #576]	; (8005c88 <HAL_GPIO_Init+0x2b0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d85d      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a4a:	2b12      	cmp	r3, #18
 8005a4c:	d82a      	bhi.n	8005aa4 <HAL_GPIO_Init+0xcc>
 8005a4e:	2b12      	cmp	r3, #18
 8005a50:	d859      	bhi.n	8005b06 <HAL_GPIO_Init+0x12e>
 8005a52:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <HAL_GPIO_Init+0x80>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005ad3 	.word	0x08005ad3
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	08005abf 	.word	0x08005abf
 8005a64:	08005b01 	.word	0x08005b01
 8005a68:	08005b07 	.word	0x08005b07
 8005a6c:	08005b07 	.word	0x08005b07
 8005a70:	08005b07 	.word	0x08005b07
 8005a74:	08005b07 	.word	0x08005b07
 8005a78:	08005b07 	.word	0x08005b07
 8005a7c:	08005b07 	.word	0x08005b07
 8005a80:	08005b07 	.word	0x08005b07
 8005a84:	08005b07 	.word	0x08005b07
 8005a88:	08005b07 	.word	0x08005b07
 8005a8c:	08005b07 	.word	0x08005b07
 8005a90:	08005b07 	.word	0x08005b07
 8005a94:	08005b07 	.word	0x08005b07
 8005a98:	08005b07 	.word	0x08005b07
 8005a9c:	08005ab5 	.word	0x08005ab5
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <HAL_GPIO_Init+0x2b4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005aaa:	e02c      	b.n	8005b06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	623b      	str	r3, [r7, #32]
          break;
 8005ab2:	e029      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	623b      	str	r3, [r7, #32]
          break;
 8005abc:	e024      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	623b      	str	r3, [r7, #32]
          break;
 8005ac6:	e01f      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	330c      	adds	r3, #12
 8005ace:	623b      	str	r3, [r7, #32]
          break;
 8005ad0:	e01a      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005ada:	2304      	movs	r3, #4
 8005adc:	623b      	str	r3, [r7, #32]
          break;
 8005ade:	e013      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ae8:	2308      	movs	r3, #8
 8005aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	611a      	str	r2, [r3, #16]
          break;
 8005af2:	e009      	b.n	8005b08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005af4:	2308      	movs	r3, #8
 8005af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	615a      	str	r2, [r3, #20]
          break;
 8005afe:	e003      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b00:	2300      	movs	r3, #0
 8005b02:	623b      	str	r3, [r7, #32]
          break;
 8005b04:	e000      	b.n	8005b08 <HAL_GPIO_Init+0x130>
          break;
 8005b06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2bff      	cmp	r3, #255	; 0xff
 8005b0c:	d801      	bhi.n	8005b12 <HAL_GPIO_Init+0x13a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	e001      	b.n	8005b16 <HAL_GPIO_Init+0x13e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d802      	bhi.n	8005b24 <HAL_GPIO_Init+0x14c>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	e002      	b.n	8005b2a <HAL_GPIO_Init+0x152>
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	3b08      	subs	r3, #8
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	210f      	movs	r1, #15
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	431a      	orrs	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80b1 	beq.w	8005cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b58:	4b4d      	ldr	r3, [pc, #308]	; (8005c90 <HAL_GPIO_Init+0x2b8>)
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	4a4c      	ldr	r2, [pc, #304]	; (8005c90 <HAL_GPIO_Init+0x2b8>)
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	6193      	str	r3, [r2, #24]
 8005b64:	4b4a      	ldr	r3, [pc, #296]	; (8005c90 <HAL_GPIO_Init+0x2b8>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b70:	4a48      	ldr	r2, [pc, #288]	; (8005c94 <HAL_GPIO_Init+0x2bc>)
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	3302      	adds	r3, #2
 8005b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	220f      	movs	r2, #15
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <HAL_GPIO_Init+0x2c0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_GPIO_Init+0x1ec>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3f      	ldr	r2, [pc, #252]	; (8005c9c <HAL_GPIO_Init+0x2c4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_GPIO_Init+0x1e8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3e      	ldr	r2, [pc, #248]	; (8005ca0 <HAL_GPIO_Init+0x2c8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <HAL_GPIO_Init+0x1e4>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <HAL_GPIO_Init+0x2cc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_GPIO_Init+0x1e0>
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e006      	b.n	8005bc6 <HAL_GPIO_Init+0x1ee>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	e004      	b.n	8005bc6 <HAL_GPIO_Init+0x1ee>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e002      	b.n	8005bc6 <HAL_GPIO_Init+0x1ee>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_GPIO_Init+0x1ee>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	f002 0203 	and.w	r2, r2, #3
 8005bcc:	0092      	lsls	r2, r2, #2
 8005bce:	4093      	lsls	r3, r2
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005bd6:	492f      	ldr	r1, [pc, #188]	; (8005c94 <HAL_GPIO_Init+0x2bc>)
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	3302      	adds	r3, #2
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	492c      	ldr	r1, [pc, #176]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	e006      	b.n	8005c0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	4928      	ldr	r1, [pc, #160]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c18:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4922      	ldr	r1, [pc, #136]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	e006      	b.n	8005c34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	491e      	ldr	r1, [pc, #120]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4918      	ldr	r1, [pc, #96]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]
 8005c4c:	e006      	b.n	8005c5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	4914      	ldr	r1, [pc, #80]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d021      	beq.n	8005cac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <HAL_GPIO_Init+0x2d0>)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60cb      	str	r3, [r1, #12]
 8005c74:	e021      	b.n	8005cba <HAL_GPIO_Init+0x2e2>
 8005c76:	bf00      	nop
 8005c78:	10320000 	.word	0x10320000
 8005c7c:	10310000 	.word	0x10310000
 8005c80:	10220000 	.word	0x10220000
 8005c84:	10210000 	.word	0x10210000
 8005c88:	10120000 	.word	0x10120000
 8005c8c:	10110000 	.word	0x10110000
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40010800 	.word	0x40010800
 8005c9c:	40010c00 	.word	0x40010c00
 8005ca0:	40011000 	.word	0x40011000
 8005ca4:	40011400 	.word	0x40011400
 8005ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_GPIO_Init+0x304>)
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	4909      	ldr	r1, [pc, #36]	; (8005cdc <HAL_GPIO_Init+0x304>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f47f ae8e 	bne.w	80059ec <HAL_GPIO_Init+0x14>
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	372c      	adds	r7, #44	; 0x2c
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	887b      	ldrh	r3, [r7, #2]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	e001      	b.n	8005d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	807b      	strh	r3, [r7, #2]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d1e:	787b      	ldrb	r3, [r7, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d2a:	e003      	b.n	8005d34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	041a      	lsls	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	611a      	str	r2, [r3, #16]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d50:	887a      	ldrh	r2, [r7, #2]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4013      	ands	r3, r2
 8005d56:	041a      	lsls	r2, r3, #16
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	43d9      	mvns	r1, r3
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d86:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f806 	bl	8005da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40010400 	.word	0x40010400

08005da0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e272      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8087 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dd4:	4b92      	ldr	r3, [pc, #584]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d00c      	beq.n	8005dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005de0:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d112      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
 8005dec:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfa:	4b89      	ldr	r3, [pc, #548]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d06c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d168      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e24c      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCC_OscConfig+0x76>
 8005e1c:	4b80      	ldr	r3, [pc, #512]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7f      	ldr	r2, [pc, #508]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02e      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x98>
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b78      	ldr	r3, [pc, #480]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a77      	ldr	r2, [pc, #476]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e01d      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0xbc>
 8005e56:	4b72      	ldr	r3, [pc, #456]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a71      	ldr	r2, [pc, #452]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6e      	ldr	r2, [pc, #440]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a67      	ldr	r2, [pc, #412]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7ff f9d0 	bl	8005234 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e98:	f7ff f9cc 	bl	8005234 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e200      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	4b5d      	ldr	r3, [pc, #372]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0xe4>
 8005eb6:	e014      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7ff f9bc 	bl	8005234 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7ff f9b8 	bl	8005234 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1ec      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed2:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x10c>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d063      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005efa:	4b49      	ldr	r3, [pc, #292]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d11c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e1c0      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	e03a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4e:	f7ff f971 	bl	8005234 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f56:	f7ff f96d 	bl	8005234 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e1a1      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4927      	ldr	r1, [pc, #156]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	e015      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7ff f950 	bl	8005234 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f98:	f7ff f94c 	bl	8005234 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e180      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d03a      	beq.n	8006038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d019      	beq.n	8005ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7ff f930 	bl	8005234 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd8:	f7ff f92c 	bl	8005234 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e160      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f000 fad8 	bl	80065ac <RCC_Delay>
 8005ffc:	e01c      	b.n	8006038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006004:	f7ff f916 	bl	8005234 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600a:	e00f      	b.n	800602c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600c:	f7ff f912 	bl	8005234 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d908      	bls.n	800602c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e146      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	42420000 	.word	0x42420000
 8006028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	4b92      	ldr	r3, [pc, #584]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e9      	bne.n	800600c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80a6 	beq.w	8006192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604a:	4b8b      	ldr	r3, [pc, #556]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006056:	4b88      	ldr	r3, [pc, #544]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4a87      	ldr	r2, [pc, #540]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	61d3      	str	r3, [r2, #28]
 8006062:	4b85      	ldr	r3, [pc, #532]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b7f      	ldr	r3, [pc, #508]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7e      	ldr	r2, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7ff f8d3 	bl	8005234 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7ff f8cf 	bl	8005234 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b64      	cmp	r3, #100	; 0x64
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e103      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b75      	ldr	r3, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <HAL_RCC_OscConfig+0x312>
 80060b8:	4b6f      	ldr	r3, [pc, #444]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	4a6e      	ldr	r2, [pc, #440]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6213      	str	r3, [r2, #32]
 80060c4:	e02d      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x334>
 80060ce:	4b6a      	ldr	r3, [pc, #424]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4a69      	ldr	r2, [pc, #420]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6213      	str	r3, [r2, #32]
 80060da:	4b67      	ldr	r3, [pc, #412]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	4a66      	ldr	r2, [pc, #408]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	6213      	str	r3, [r2, #32]
 80060e6:	e01c      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d10c      	bne.n	800610a <HAL_RCC_OscConfig+0x356>
 80060f0:	4b61      	ldr	r3, [pc, #388]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	4a60      	ldr	r2, [pc, #384]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	6213      	str	r3, [r2, #32]
 80060fc:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6213      	str	r3, [r2, #32]
 8006108:	e00b      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 800610a:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4a5a      	ldr	r2, [pc, #360]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6213      	str	r3, [r2, #32]
 8006116:	4b58      	ldr	r3, [pc, #352]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4a57      	ldr	r2, [pc, #348]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d015      	beq.n	8006156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7ff f883 	bl	8005234 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	e00a      	b.n	8006148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006132:	f7ff f87f 	bl	8005234 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006140:	4293      	cmp	r3, r2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e0b1      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0ee      	beq.n	8006132 <HAL_RCC_OscConfig+0x37e>
 8006154:	e014      	b.n	8006180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7ff f86d 	bl	8005234 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7ff f869 	bl	8005234 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e09b      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ee      	bne.n	800615e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b3c      	ldr	r3, [pc, #240]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4a3b      	ldr	r2, [pc, #236]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800618c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8087 	beq.w	80062aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d061      	beq.n	800626c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d146      	bne.n	800623e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b0:	4b33      	ldr	r3, [pc, #204]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7ff f83d 	bl	8005234 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061be:	f7ff f839 	bl	8005234 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e06d      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d108      	bne.n	80061f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4921      	ldr	r1, [pc, #132]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f8:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a19      	ldr	r1, [r3, #32]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	430b      	orrs	r3, r1
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006216:	f7ff f80d 	bl	8005234 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621e:	f7ff f809 	bl	8005234 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e03d      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x46a>
 800623c:	e035      	b.n	80062aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fe fff6 	bl	8005234 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fe fff2 	bl	8005234 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e026      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x498>
 800626a:	e01e      	b.n	80062aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e019      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
 8006278:	40021000 	.word	0x40021000
 800627c:	40007000 	.word	0x40007000
 8006280:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_RCC_OscConfig+0x500>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	429a      	cmp	r2, r3
 8006296:	d106      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40021000 	.word	0x40021000

080062b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0d0      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b67      	ldr	r3, [pc, #412]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4965      	ldr	r1, [pc, #404]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b8      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800631e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800632c:	4b53      	ldr	r3, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d040      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07f      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006376:	4b41      	ldr	r3, [pc, #260]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e073      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06b      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f023 0203 	bic.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4936      	ldr	r1, [pc, #216]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a8:	f7fe ff44 	bl	8005234 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b0:	f7fe ff40 	bl	8005234 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e053      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 020c 	and.w	r2, r3, #12
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1eb      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d210      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 0207 	bic.w	r2, r3, #7
 80063ee:	4922      	ldr	r1, [pc, #136]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e032      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006446:	f000 f821 	bl	800648c <HAL_RCC_GetSysClockFreq>
 800644a:	4602      	mov	r2, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490a      	ldr	r1, [pc, #40]	; (8006480 <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1cc>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_ClockConfig+0x1d0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fea2 	bl	80051b0 <HAL_InitTick>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40022000 	.word	0x40022000
 800647c:	40021000 	.word	0x40021000
 8006480:	080089f8 	.word	0x080089f8
 8006484:	2000001c 	.word	0x2000001c
 8006488:	20000020 	.word	0x20000020

0800648c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	b490      	push	{r4, r7}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_RCC_GetSysClockFreq+0xac>)
 8006494:	1d3c      	adds	r4, r7, #4
 8006496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800649c:	f240 2301 	movw	r3, #513	; 0x201
 80064a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d002      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x40>
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d003      	beq.n	80064d2 <HAL_RCC_GetSysClockFreq+0x46>
 80064ca:	e02b      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064cc:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ce:	623b      	str	r3, [r7, #32]
      break;
 80064d0:	e02b      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	0c9b      	lsrs	r3, r3, #18
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	3328      	adds	r3, #40	; 0x28
 80064dc:	443b      	add	r3, r7
 80064de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d012      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	0c5b      	lsrs	r3, r3, #17
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	3328      	adds	r3, #40	; 0x28
 80064fa:	443b      	add	r3, r7
 80064fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006500:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006506:	fb03 f202 	mul.w	r2, r3, r2
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e004      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	623b      	str	r3, [r7, #32]
      break;
 8006522:	e002      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006526:	623b      	str	r3, [r7, #32]
      break;
 8006528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652a:	6a3b      	ldr	r3, [r7, #32]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bc90      	pop	{r4, r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	080089a8 	.word	0x080089a8
 800653c:	40021000 	.word	0x40021000
 8006540:	007a1200 	.word	0x007a1200
 8006544:	003d0900 	.word	0x003d0900

08006548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <HAL_RCC_GetHCLKFreq+0x10>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	2000001c 	.word	0x2000001c

0800655c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006560:	f7ff fff2 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4903      	ldr	r1, [pc, #12]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	08008a08 	.word	0x08008a08

08006584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006588:	f7ff ffde 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	0adb      	lsrs	r3, r3, #11
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4903      	ldr	r1, [pc, #12]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40021000 	.word	0x40021000
 80065a8:	08008a08 	.word	0x08008a08

080065ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <RCC_Delay+0x34>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0a      	ldr	r2, [pc, #40]	; (80065e4 <RCC_Delay+0x38>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	0a5b      	lsrs	r3, r3, #9
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065c8:	bf00      	nop
  }
  while (Delay --);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1e5a      	subs	r2, r3, #1
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f9      	bne.n	80065c8 <RCC_Delay+0x1c>
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	2000001c 	.word	0x2000001c
 80065e4:	10624dd3 	.word	0x10624dd3

080065e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e041      	b.n	800667e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fb72 	bl	8004cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f000 fac4 	bl	8006bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e032      	b.n	8006706 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_TIM_Base_Start+0x88>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_TIM_Base_Start+0x48>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ba:	d009      	beq.n	80066d0 <HAL_TIM_Base_Start+0x48>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a14      	ldr	r2, [pc, #80]	; (8006714 <HAL_TIM_Base_Start+0x8c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_TIM_Base_Start+0x48>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <HAL_TIM_Base_Start+0x90>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d111      	bne.n	80066f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d010      	beq.n	8006704 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	e007      	b.n	8006704 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800

0800671c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d001      	beq.n	8006734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e03a      	b.n	80067aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_TIM_Base_Start_IT+0x98>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_TIM_Base_Start_IT+0x58>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675e:	d009      	beq.n	8006774 <HAL_TIM_Base_Start_IT+0x58>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_TIM_Base_Start_IT+0x58>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <HAL_TIM_Base_Start_IT+0xa0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d111      	bne.n	8006798 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b06      	cmp	r3, #6
 8006784:	d010      	beq.n	80067a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0201 	orr.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006796:	e007      	b.n	80067a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr
 80067b4:	40012c00 	.word	0x40012c00
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800

080067c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d122      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d11b      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0202 	mvn.w	r2, #2
 80067ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9ba 	bl	8006b7c <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9ad 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9bc 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d122      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d11b      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0204 	mvn.w	r2, #4
 8006840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f990 	bl	8006b7c <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f983 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f992 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b08      	cmp	r3, #8
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b08      	cmp	r3, #8
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0208 	mvn.w	r2, #8
 8006894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2204      	movs	r2, #4
 800689a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f966 	bl	8006b7c <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f959 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f968 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2208      	movs	r2, #8
 80068ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f93c 	bl	8006b7c <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f92f 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f93e 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0201 	mvn.w	r2, #1
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f90a 	bl	8006b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695c:	2b80      	cmp	r3, #128	; 0x80
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa81 	bl	8006e72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f902 	bl	8006ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0220 	mvn.w	r2, #32
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa4c 	bl	8006e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_TIM_ConfigClockSource+0x18>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e0b3      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x180>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a20:	d03e      	beq.n	8006aa0 <HAL_TIM_ConfigClockSource+0xd0>
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	f200 8087 	bhi.w	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2e:	f000 8085 	beq.w	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a36:	d87f      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a38:	2b70      	cmp	r3, #112	; 0x70
 8006a3a:	d01a      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0xa2>
 8006a3c:	2b70      	cmp	r3, #112	; 0x70
 8006a3e:	d87b      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a40:	2b60      	cmp	r3, #96	; 0x60
 8006a42:	d050      	beq.n	8006ae6 <HAL_TIM_ConfigClockSource+0x116>
 8006a44:	2b60      	cmp	r3, #96	; 0x60
 8006a46:	d877      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a48:	2b50      	cmp	r3, #80	; 0x50
 8006a4a:	d03c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0xf6>
 8006a4c:	2b50      	cmp	r3, #80	; 0x50
 8006a4e:	d873      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d058      	beq.n	8006b06 <HAL_TIM_ConfigClockSource+0x136>
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d86f      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a58:	2b30      	cmp	r3, #48	; 0x30
 8006a5a:	d064      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x156>
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d86b      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d060      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x156>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d867      	bhi.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d05c      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x156>
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d05a      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a70:	e062      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6899      	ldr	r1, [r3, #8]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f000 f970 	bl	8006d66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
      break;
 8006a9e:	e04e      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6899      	ldr	r1, [r3, #8]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f000 f959 	bl	8006d66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac2:	609a      	str	r2, [r3, #8]
      break;
 8006ac4:	e03b      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6859      	ldr	r1, [r3, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f000 f8d0 	bl	8006c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2150      	movs	r1, #80	; 0x50
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f927 	bl	8006d32 <TIM_ITRx_SetConfig>
      break;
 8006ae4:	e02b      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6859      	ldr	r1, [r3, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f000 f8ee 	bl	8006cd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2160      	movs	r1, #96	; 0x60
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f917 	bl	8006d32 <TIM_ITRx_SetConfig>
      break;
 8006b04:	e01b      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f000 f8b0 	bl	8006c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2140      	movs	r1, #64	; 0x40
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f907 	bl	8006d32 <TIM_ITRx_SetConfig>
      break;
 8006b24:	e00b      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f000 f8fe 	bl	8006d32 <TIM_ITRx_SetConfig>
        break;
 8006b36:	e002      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b38:	bf00      	nop
 8006b3a:	e000      	b.n	8006b3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
	...

08006bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a29      	ldr	r2, [pc, #164]	; (8006c6c <TIM_Base_SetConfig+0xb8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_Base_SetConfig+0x30>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd2:	d007      	beq.n	8006be4 <TIM_Base_SetConfig+0x30>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <TIM_Base_SetConfig+0xbc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0x30>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <TIM_Base_SetConfig+0xc0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d108      	bne.n	8006bf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <TIM_Base_SetConfig+0xb8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0x62>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0x62>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <TIM_Base_SetConfig+0xbc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0x62>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a18      	ldr	r2, [pc, #96]	; (8006c74 <TIM_Base_SetConfig+0xc0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <TIM_Base_SetConfig+0xb8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800

08006c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 030a 	bic.w	r3, r3, #10
 8006cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f023 0210 	bic.w	r2, r3, #16
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	031b      	lsls	r3, r3, #12
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	621a      	str	r2, [r3, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr

08006d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f043 0307 	orr.w	r3, r3, #7
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	609a      	str	r2, [r3, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	021a      	lsls	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	609a      	str	r2, [r3, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e046      	b.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d009      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d10c      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800

08006e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e03f      	b.n	8006f16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fd ff5c 	bl	8004d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2224      	movs	r2, #36	; 0x24
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc25 	bl	8007718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b08a      	sub	sp, #40	; 0x28
 8006f22:	af02      	add	r7, sp, #8
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d17c      	bne.n	8007038 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_UART_Transmit+0x2c>
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e075      	b.n	800703a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_UART_Transmit+0x3e>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e06e      	b.n	800703a <HAL_UART_Transmit+0x11c>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2221      	movs	r2, #33	; 0x21
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f72:	f7fe f95f 	bl	8005234 <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d108      	bne.n	8006fa0 <HAL_UART_Transmit+0x82>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e003      	b.n	8006fa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fb0:	e02a      	b.n	8007008 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fa11 	bl	80073e4 <UART_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e036      	b.n	800703a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10b      	bne.n	8006fea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e007      	b.n	8006ffa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	781a      	ldrb	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1cf      	bne.n	8006fb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	2140      	movs	r1, #64	; 0x40
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f9e1 	bl	80073e4 <UART_WaitOnFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e000      	b.n	800703a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007038:	2302      	movs	r3, #2
  }
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	; 0x28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10d      	bne.n	8007096 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <HAL_UART_IRQHandler+0x52>
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa99 	bl	80075c6 <UART_Receive_IT>
      return;
 8007094:	e17b      	b.n	800738e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80b1 	beq.w	8007200 <HAL_UART_IRQHandler+0x1bc>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_UART_IRQHandler+0x70>
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80a6 	beq.w	8007200 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_UART_IRQHandler+0x90>
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_UART_IRQHandler+0xb0>
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	f043 0202 	orr.w	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_UART_IRQHandler+0xd0>
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	f043 0204 	orr.w	r2, r3, #4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00f      	beq.n	800713e <HAL_UART_IRQHandler+0xfa>
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_UART_IRQHandler+0xee>
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0208 	orr.w	r2, r3, #8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 811e 	beq.w	8007384 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <HAL_UART_IRQHandler+0x11e>
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa32 	bl	80075c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <HAL_UART_IRQHandler+0x146>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d031      	beq.n	80071ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f974 	bl	8007478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d023      	beq.n	80071e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d013      	beq.n	80071de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	4a76      	ldr	r2, [pc, #472]	; (8007394 <HAL_UART_IRQHandler+0x350>)
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe f988 	bl	80054d8 <HAL_DMA_Abort_IT>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	e00e      	b.n	80071fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8ec 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	e00a      	b.n	80071fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f8e8 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	e006      	b.n	80071fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8e4 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071fa:	e0c3      	b.n	8007384 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	bf00      	nop
    return;
 80071fe:	e0c1      	b.n	8007384 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	2b01      	cmp	r3, #1
 8007206:	f040 80a1 	bne.w	800734c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 809b 	beq.w	800734c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8095 	beq.w	800734c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d04e      	beq.n	80072e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007250:	8a3b      	ldrh	r3, [r7, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8098 	beq.w	8007388 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800725c:	8a3a      	ldrh	r2, [r7, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	f080 8092 	bcs.w	8007388 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8a3a      	ldrh	r2, [r7, #16]
 8007268:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	2b20      	cmp	r3, #32
 8007272:	d02b      	beq.n	80072cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007282:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0210 	bic.w	r2, r2, #16
 80072c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f8cb 	bl	8005462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f876 	bl	80073ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072e2:	e051      	b.n	8007388 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d047      	beq.n	800738c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80072fc:	8a7b      	ldrh	r3, [r7, #18]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d044      	beq.n	800738c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007310:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0210 	bic.w	r2, r2, #16
 800733e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007340:	8a7b      	ldrh	r3, [r7, #18]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f842 	bl	80073ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800734a:	e01f      	b.n	800738c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_UART_IRQHandler+0x324>
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8c9 	bl	80074f8 <UART_Transmit_IT>
    return;
 8007366:	e012      	b.n	800738e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <HAL_UART_IRQHandler+0x34a>
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f90a 	bl	8007596 <UART_EndTransmit_IT>
    return;
 8007382:	e004      	b.n	800738e <HAL_UART_IRQHandler+0x34a>
    return;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <HAL_UART_IRQHandler+0x34a>
      return;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <HAL_UART_IRQHandler+0x34a>
      return;
 800738c:	bf00      	nop
  }
}
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	080074d1 	.word	0x080074d1

08007398 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr

080073bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f4:	e02c      	b.n	8007450 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fc:	d028      	beq.n	8007450 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <UART_WaitOnFlagUntilTimeout+0x30>
 8007404:	f7fd ff16 	bl	8005234 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d21d      	bcs.n	8007450 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007422:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e00f      	b.n	8007470 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4013      	ands	r3, r2
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	bf0c      	ite	eq
 8007460:	2301      	moveq	r3, #1
 8007462:	2300      	movne	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	429a      	cmp	r2, r3
 800746c:	d0c3      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800748e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d107      	bne.n	80074b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0210 	bic.w	r2, r2, #16
 80074b6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff ff66 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b21      	cmp	r3, #33	; 0x21
 800750a:	d13e      	bne.n	800758a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d114      	bne.n	8007540 <UART_Transmit_IT+0x48>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d110      	bne.n	8007540 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007532:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	1c9a      	adds	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	621a      	str	r2, [r3, #32]
 800753e:	e008      	b.n	8007552 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6211      	str	r1, [r2, #32]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29b      	uxth	r3, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4619      	mov	r1, r3
 8007560:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10f      	bne.n	8007586 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff feee 	bl	8007398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b22      	cmp	r3, #34	; 0x22
 80075d8:	f040 8099 	bne.w	800770e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d117      	bne.n	8007616 <UART_Receive_IT+0x50>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d113      	bne.n	8007616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007604:	b29a      	uxth	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	629a      	str	r2, [r3, #40]	; 0x28
 8007614:	e026      	b.n	8007664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d007      	beq.n	800763a <UART_Receive_IT+0x74>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <UART_Receive_IT+0x82>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e008      	b.n	800765a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	b2da      	uxtb	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4619      	mov	r1, r3
 8007672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007674:	2b00      	cmp	r3, #0
 8007676:	d148      	bne.n	800770a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0220 	bic.w	r2, r2, #32
 8007686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d123      	bne.n	8007700 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0210 	bic.w	r2, r2, #16
 80076cc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d10a      	bne.n	80076f2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe68 	bl	80073ce <HAL_UARTEx_RxEventCallback>
 80076fe:	e002      	b.n	8007706 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe52 	bl	80073aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e002      	b.n	8007710 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e000      	b.n	8007710 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800770e:	2302      	movs	r3, #2
  }
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007752:	f023 030c 	bic.w	r3, r3, #12
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	430b      	orrs	r3, r1
 800775e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2c      	ldr	r2, [pc, #176]	; (800782c <UART_SetConfig+0x114>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d103      	bne.n	8007788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007780:	f7fe ff00 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	e002      	b.n	800778e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007788:	f7fe fee8 	bl	800655c <HAL_RCC_GetPCLK1Freq>
 800778c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009a      	lsls	r2, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	4a22      	ldr	r2, [pc, #136]	; (8007830 <UART_SetConfig+0x118>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	0119      	lsls	r1, r3, #4
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009a      	lsls	r2, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077c4:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <UART_SetConfig+0x118>)
 80077c6:	fba3 0302 	umull	r0, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2064      	movs	r0, #100	; 0x64
 80077ce:	fb00 f303 	mul.w	r3, r0, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	; 0x32
 80077d8:	4a15      	ldr	r2, [pc, #84]	; (8007830 <UART_SetConfig+0x118>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077e4:	4419      	add	r1, r3
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009a      	lsls	r2, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <UART_SetConfig+0x118>)
 80077fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2064      	movs	r0, #100	; 0x64
 8007806:	fb00 f303 	mul.w	r3, r0, r3
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	3332      	adds	r3, #50	; 0x32
 8007810:	4a07      	ldr	r2, [pc, #28]	; (8007830 <UART_SetConfig+0x118>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	440a      	add	r2, r1
 8007822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40013800 	.word	0x40013800
 8007830:	51eb851f 	.word	0x51eb851f

08007834 <__errno>:
 8007834:	4b01      	ldr	r3, [pc, #4]	; (800783c <__errno+0x8>)
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000028 	.word	0x20000028

08007840 <__libc_init_array>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	2600      	movs	r6, #0
 8007844:	4d0c      	ldr	r5, [pc, #48]	; (8007878 <__libc_init_array+0x38>)
 8007846:	4c0d      	ldr	r4, [pc, #52]	; (800787c <__libc_init_array+0x3c>)
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	42a6      	cmp	r6, r4
 800784e:	d109      	bne.n	8007864 <__libc_init_array+0x24>
 8007850:	f001 f82c 	bl	80088ac <_init>
 8007854:	2600      	movs	r6, #0
 8007856:	4d0a      	ldr	r5, [pc, #40]	; (8007880 <__libc_init_array+0x40>)
 8007858:	4c0a      	ldr	r4, [pc, #40]	; (8007884 <__libc_init_array+0x44>)
 800785a:	1b64      	subs	r4, r4, r5
 800785c:	10a4      	asrs	r4, r4, #2
 800785e:	42a6      	cmp	r6, r4
 8007860:	d105      	bne.n	800786e <__libc_init_array+0x2e>
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	f855 3b04 	ldr.w	r3, [r5], #4
 8007868:	4798      	blx	r3
 800786a:	3601      	adds	r6, #1
 800786c:	e7ee      	b.n	800784c <__libc_init_array+0xc>
 800786e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007872:	4798      	blx	r3
 8007874:	3601      	adds	r6, #1
 8007876:	e7f2      	b.n	800785e <__libc_init_array+0x1e>
 8007878:	08008aa8 	.word	0x08008aa8
 800787c:	08008aa8 	.word	0x08008aa8
 8007880:	08008aa8 	.word	0x08008aa8
 8007884:	08008aac 	.word	0x08008aac

08007888 <memset>:
 8007888:	4603      	mov	r3, r0
 800788a:	4402      	add	r2, r0
 800788c:	4293      	cmp	r3, r2
 800788e:	d100      	bne.n	8007892 <memset+0xa>
 8007890:	4770      	bx	lr
 8007892:	f803 1b01 	strb.w	r1, [r3], #1
 8007896:	e7f9      	b.n	800788c <memset+0x4>

08007898 <iprintf>:
 8007898:	b40f      	push	{r0, r1, r2, r3}
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <iprintf+0x2c>)
 800789c:	b513      	push	{r0, r1, r4, lr}
 800789e:	681c      	ldr	r4, [r3, #0]
 80078a0:	b124      	cbz	r4, 80078ac <iprintf+0x14>
 80078a2:	69a3      	ldr	r3, [r4, #24]
 80078a4:	b913      	cbnz	r3, 80078ac <iprintf+0x14>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 fa5a 	bl	8007d60 <__sinit>
 80078ac:	ab05      	add	r3, sp, #20
 80078ae:	4620      	mov	r0, r4
 80078b0:	9a04      	ldr	r2, [sp, #16]
 80078b2:	68a1      	ldr	r1, [r4, #8]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f000 fc5d 	bl	8008174 <_vfiprintf_r>
 80078ba:	b002      	add	sp, #8
 80078bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c0:	b004      	add	sp, #16
 80078c2:	4770      	bx	lr
 80078c4:	20000028 	.word	0x20000028

080078c8 <_puts_r>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	460e      	mov	r6, r1
 80078cc:	4605      	mov	r5, r0
 80078ce:	b118      	cbz	r0, 80078d8 <_puts_r+0x10>
 80078d0:	6983      	ldr	r3, [r0, #24]
 80078d2:	b90b      	cbnz	r3, 80078d8 <_puts_r+0x10>
 80078d4:	f000 fa44 	bl	8007d60 <__sinit>
 80078d8:	69ab      	ldr	r3, [r5, #24]
 80078da:	68ac      	ldr	r4, [r5, #8]
 80078dc:	b913      	cbnz	r3, 80078e4 <_puts_r+0x1c>
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fa3e 	bl	8007d60 <__sinit>
 80078e4:	4b2c      	ldr	r3, [pc, #176]	; (8007998 <_puts_r+0xd0>)
 80078e6:	429c      	cmp	r4, r3
 80078e8:	d120      	bne.n	800792c <_puts_r+0x64>
 80078ea:	686c      	ldr	r4, [r5, #4]
 80078ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d405      	bmi.n	80078fe <_puts_r+0x36>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	0598      	lsls	r0, r3, #22
 80078f6:	d402      	bmi.n	80078fe <_puts_r+0x36>
 80078f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fa:	f000 facf 	bl	8007e9c <__retarget_lock_acquire_recursive>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	0719      	lsls	r1, r3, #28
 8007902:	d51d      	bpl.n	8007940 <_puts_r+0x78>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	b1db      	cbz	r3, 8007940 <_puts_r+0x78>
 8007908:	3e01      	subs	r6, #1
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007910:	3b01      	subs	r3, #1
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	bb39      	cbnz	r1, 8007966 <_puts_r+0x9e>
 8007916:	2b00      	cmp	r3, #0
 8007918:	da38      	bge.n	800798c <_puts_r+0xc4>
 800791a:	4622      	mov	r2, r4
 800791c:	210a      	movs	r1, #10
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f848 	bl	80079b4 <__swbuf_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d011      	beq.n	800794c <_puts_r+0x84>
 8007928:	250a      	movs	r5, #10
 800792a:	e011      	b.n	8007950 <_puts_r+0x88>
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <_puts_r+0xd4>)
 800792e:	429c      	cmp	r4, r3
 8007930:	d101      	bne.n	8007936 <_puts_r+0x6e>
 8007932:	68ac      	ldr	r4, [r5, #8]
 8007934:	e7da      	b.n	80078ec <_puts_r+0x24>
 8007936:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <_puts_r+0xd8>)
 8007938:	429c      	cmp	r4, r3
 800793a:	bf08      	it	eq
 800793c:	68ec      	ldreq	r4, [r5, #12]
 800793e:	e7d5      	b.n	80078ec <_puts_r+0x24>
 8007940:	4621      	mov	r1, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f888 	bl	8007a58 <__swsetup_r>
 8007948:	2800      	cmp	r0, #0
 800794a:	d0dd      	beq.n	8007908 <_puts_r+0x40>
 800794c:	f04f 35ff 	mov.w	r5, #4294967295
 8007950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d405      	bmi.n	8007962 <_puts_r+0x9a>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d402      	bmi.n	8007962 <_puts_r+0x9a>
 800795c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795e:	f000 fa9e 	bl	8007e9e <__retarget_lock_release_recursive>
 8007962:	4628      	mov	r0, r5
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	2b00      	cmp	r3, #0
 8007968:	da04      	bge.n	8007974 <_puts_r+0xac>
 800796a:	69a2      	ldr	r2, [r4, #24]
 800796c:	429a      	cmp	r2, r3
 800796e:	dc06      	bgt.n	800797e <_puts_r+0xb6>
 8007970:	290a      	cmp	r1, #10
 8007972:	d004      	beq.n	800797e <_puts_r+0xb6>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	7019      	strb	r1, [r3, #0]
 800797c:	e7c5      	b.n	800790a <_puts_r+0x42>
 800797e:	4622      	mov	r2, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f817 	bl	80079b4 <__swbuf_r>
 8007986:	3001      	adds	r0, #1
 8007988:	d1bf      	bne.n	800790a <_puts_r+0x42>
 800798a:	e7df      	b.n	800794c <_puts_r+0x84>
 800798c:	250a      	movs	r5, #10
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	701d      	strb	r5, [r3, #0]
 8007996:	e7db      	b.n	8007950 <_puts_r+0x88>
 8007998:	08008a34 	.word	0x08008a34
 800799c:	08008a54 	.word	0x08008a54
 80079a0:	08008a14 	.word	0x08008a14

080079a4 <puts>:
 80079a4:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <puts+0xc>)
 80079a6:	4601      	mov	r1, r0
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	f7ff bf8d 	b.w	80078c8 <_puts_r>
 80079ae:	bf00      	nop
 80079b0:	20000028 	.word	0x20000028

080079b4 <__swbuf_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	4605      	mov	r5, r0
 80079bc:	b118      	cbz	r0, 80079c6 <__swbuf_r+0x12>
 80079be:	6983      	ldr	r3, [r0, #24]
 80079c0:	b90b      	cbnz	r3, 80079c6 <__swbuf_r+0x12>
 80079c2:	f000 f9cd 	bl	8007d60 <__sinit>
 80079c6:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <__swbuf_r+0x98>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	d12b      	bne.n	8007a24 <__swbuf_r+0x70>
 80079cc:	686c      	ldr	r4, [r5, #4]
 80079ce:	69a3      	ldr	r3, [r4, #24]
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d52f      	bpl.n	8007a38 <__swbuf_r+0x84>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b36b      	cbz	r3, 8007a38 <__swbuf_r+0x84>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	b2f6      	uxtb	r6, r6
 80079e2:	1ac0      	subs	r0, r0, r3
 80079e4:	6963      	ldr	r3, [r4, #20]
 80079e6:	4637      	mov	r7, r6
 80079e8:	4283      	cmp	r3, r0
 80079ea:	dc04      	bgt.n	80079f6 <__swbuf_r+0x42>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f922 	bl	8007c38 <_fflush_r>
 80079f4:	bb30      	cbnz	r0, 8007a44 <__swbuf_r+0x90>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3001      	adds	r0, #1
 80079fa:	3b01      	subs	r3, #1
 80079fc:	60a3      	str	r3, [r4, #8]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	701e      	strb	r6, [r3, #0]
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x62>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d506      	bpl.n	8007a20 <__swbuf_r+0x6c>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d104      	bne.n	8007a20 <__swbuf_r+0x6c>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f90d 	bl	8007c38 <_fflush_r>
 8007a1e:	b988      	cbnz	r0, 8007a44 <__swbuf_r+0x90>
 8007a20:	4638      	mov	r0, r7
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <__swbuf_r+0x9c>)
 8007a26:	429c      	cmp	r4, r3
 8007a28:	d101      	bne.n	8007a2e <__swbuf_r+0x7a>
 8007a2a:	68ac      	ldr	r4, [r5, #8]
 8007a2c:	e7cf      	b.n	80079ce <__swbuf_r+0x1a>
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <__swbuf_r+0xa0>)
 8007a30:	429c      	cmp	r4, r3
 8007a32:	bf08      	it	eq
 8007a34:	68ec      	ldreq	r4, [r5, #12]
 8007a36:	e7ca      	b.n	80079ce <__swbuf_r+0x1a>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f80c 	bl	8007a58 <__swsetup_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d0cb      	beq.n	80079dc <__swbuf_r+0x28>
 8007a44:	f04f 37ff 	mov.w	r7, #4294967295
 8007a48:	e7ea      	b.n	8007a20 <__swbuf_r+0x6c>
 8007a4a:	bf00      	nop
 8007a4c:	08008a34 	.word	0x08008a34
 8007a50:	08008a54 	.word	0x08008a54
 8007a54:	08008a14 	.word	0x08008a14

08007a58 <__swsetup_r>:
 8007a58:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <__swsetup_r+0xcc>)
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	681d      	ldr	r5, [r3, #0]
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	b125      	cbz	r5, 8007a6e <__swsetup_r+0x16>
 8007a64:	69ab      	ldr	r3, [r5, #24]
 8007a66:	b913      	cbnz	r3, 8007a6e <__swsetup_r+0x16>
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f979 	bl	8007d60 <__sinit>
 8007a6e:	4b2e      	ldr	r3, [pc, #184]	; (8007b28 <__swsetup_r+0xd0>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d10f      	bne.n	8007a94 <__swsetup_r+0x3c>
 8007a74:	686c      	ldr	r4, [r5, #4]
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a7c:	0719      	lsls	r1, r3, #28
 8007a7e:	d42c      	bmi.n	8007ada <__swsetup_r+0x82>
 8007a80:	06dd      	lsls	r5, r3, #27
 8007a82:	d411      	bmi.n	8007aa8 <__swsetup_r+0x50>
 8007a84:	2309      	movs	r3, #9
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	e03e      	b.n	8007b12 <__swsetup_r+0xba>
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <__swsetup_r+0xd4>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	d101      	bne.n	8007a9e <__swsetup_r+0x46>
 8007a9a:	68ac      	ldr	r4, [r5, #8]
 8007a9c:	e7eb      	b.n	8007a76 <__swsetup_r+0x1e>
 8007a9e:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <__swsetup_r+0xd8>)
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	bf08      	it	eq
 8007aa4:	68ec      	ldreq	r4, [r5, #12]
 8007aa6:	e7e6      	b.n	8007a76 <__swsetup_r+0x1e>
 8007aa8:	0758      	lsls	r0, r3, #29
 8007aaa:	d512      	bpl.n	8007ad2 <__swsetup_r+0x7a>
 8007aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aae:	b141      	cbz	r1, 8007ac2 <__swsetup_r+0x6a>
 8007ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	d002      	beq.n	8007abe <__swsetup_r+0x66>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 fa57 	bl	8007f6c <_free_r>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f043 0308 	orr.w	r3, r3, #8
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	b94b      	cbnz	r3, 8007af2 <__swsetup_r+0x9a>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae8:	d003      	beq.n	8007af2 <__swsetup_r+0x9a>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 f9fd 	bl	8007eec <__smakebuf_r>
 8007af2:	89a0      	ldrh	r0, [r4, #12]
 8007af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af8:	f010 0301 	ands.w	r3, r0, #1
 8007afc:	d00a      	beq.n	8007b14 <__swsetup_r+0xbc>
 8007afe:	2300      	movs	r3, #0
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	425b      	negs	r3, r3
 8007b06:	61a3      	str	r3, [r4, #24]
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	b943      	cbnz	r3, 8007b1e <__swsetup_r+0xc6>
 8007b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b10:	d1ba      	bne.n	8007a88 <__swsetup_r+0x30>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	0781      	lsls	r1, r0, #30
 8007b16:	bf58      	it	pl
 8007b18:	6963      	ldrpl	r3, [r4, #20]
 8007b1a:	60a3      	str	r3, [r4, #8]
 8007b1c:	e7f4      	b.n	8007b08 <__swsetup_r+0xb0>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e7f7      	b.n	8007b12 <__swsetup_r+0xba>
 8007b22:	bf00      	nop
 8007b24:	20000028 	.word	0x20000028
 8007b28:	08008a34 	.word	0x08008a34
 8007b2c:	08008a54 	.word	0x08008a54
 8007b30:	08008a14 	.word	0x08008a14

08007b34 <__sflush_r>:
 8007b34:	898a      	ldrh	r2, [r1, #12]
 8007b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b38:	4605      	mov	r5, r0
 8007b3a:	0710      	lsls	r0, r2, #28
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	d457      	bmi.n	8007bf0 <__sflush_r+0xbc>
 8007b40:	684b      	ldr	r3, [r1, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dc04      	bgt.n	8007b50 <__sflush_r+0x1c>
 8007b46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc01      	bgt.n	8007b50 <__sflush_r+0x1c>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d0fa      	beq.n	8007b4c <__sflush_r+0x18>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b5c:	682f      	ldr	r7, [r5, #0]
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	d032      	beq.n	8007bc8 <__sflush_r+0x94>
 8007b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	075a      	lsls	r2, r3, #29
 8007b68:	d505      	bpl.n	8007b76 <__sflush_r+0x42>
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	1ac0      	subs	r0, r0, r3
 8007b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b70:	b10b      	cbz	r3, 8007b76 <__sflush_r+0x42>
 8007b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b74:	1ac0      	subs	r0, r0, r3
 8007b76:	2300      	movs	r3, #0
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	47b0      	blx	r6
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	d106      	bne.n	8007b96 <__sflush_r+0x62>
 8007b88:	6829      	ldr	r1, [r5, #0]
 8007b8a:	291d      	cmp	r1, #29
 8007b8c:	d82c      	bhi.n	8007be8 <__sflush_r+0xb4>
 8007b8e:	4a29      	ldr	r2, [pc, #164]	; (8007c34 <__sflush_r+0x100>)
 8007b90:	40ca      	lsrs	r2, r1
 8007b92:	07d6      	lsls	r6, r2, #31
 8007b94:	d528      	bpl.n	8007be8 <__sflush_r+0xb4>
 8007b96:	2200      	movs	r2, #0
 8007b98:	6062      	str	r2, [r4, #4]
 8007b9a:	6922      	ldr	r2, [r4, #16]
 8007b9c:	04d9      	lsls	r1, r3, #19
 8007b9e:	6022      	str	r2, [r4, #0]
 8007ba0:	d504      	bpl.n	8007bac <__sflush_r+0x78>
 8007ba2:	1c42      	adds	r2, r0, #1
 8007ba4:	d101      	bne.n	8007baa <__sflush_r+0x76>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	b903      	cbnz	r3, 8007bac <__sflush_r+0x78>
 8007baa:	6560      	str	r0, [r4, #84]	; 0x54
 8007bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bae:	602f      	str	r7, [r5, #0]
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d0cb      	beq.n	8007b4c <__sflush_r+0x18>
 8007bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	d002      	beq.n	8007bc2 <__sflush_r+0x8e>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f9d5 	bl	8007f6c <_free_r>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8007bc6:	e7c2      	b.n	8007b4e <__sflush_r+0x1a>
 8007bc8:	6a21      	ldr	r1, [r4, #32]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	1c41      	adds	r1, r0, #1
 8007bd2:	d1c7      	bne.n	8007b64 <__sflush_r+0x30>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0c4      	beq.n	8007b64 <__sflush_r+0x30>
 8007bda:	2b1d      	cmp	r3, #29
 8007bdc:	d001      	beq.n	8007be2 <__sflush_r+0xae>
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d101      	bne.n	8007be6 <__sflush_r+0xb2>
 8007be2:	602f      	str	r7, [r5, #0]
 8007be4:	e7b2      	b.n	8007b4c <__sflush_r+0x18>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7ae      	b.n	8007b4e <__sflush_r+0x1a>
 8007bf0:	690f      	ldr	r7, [r1, #16]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d0aa      	beq.n	8007b4c <__sflush_r+0x18>
 8007bf6:	0793      	lsls	r3, r2, #30
 8007bf8:	bf18      	it	ne
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	680e      	ldr	r6, [r1, #0]
 8007bfe:	bf08      	it	eq
 8007c00:	694b      	ldreq	r3, [r1, #20]
 8007c02:	1bf6      	subs	r6, r6, r7
 8007c04:	600f      	str	r7, [r1, #0]
 8007c06:	608b      	str	r3, [r1, #8]
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	dd9f      	ble.n	8007b4c <__sflush_r+0x18>
 8007c0c:	4633      	mov	r3, r6
 8007c0e:	463a      	mov	r2, r7
 8007c10:	4628      	mov	r0, r5
 8007c12:	6a21      	ldr	r1, [r4, #32]
 8007c14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c18:	47e0      	blx	ip
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	dc06      	bgt.n	8007c2c <__sflush_r+0xf8>
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	e790      	b.n	8007b4e <__sflush_r+0x1a>
 8007c2c:	4407      	add	r7, r0
 8007c2e:	1a36      	subs	r6, r6, r0
 8007c30:	e7ea      	b.n	8007c08 <__sflush_r+0xd4>
 8007c32:	bf00      	nop
 8007c34:	20400001 	.word	0x20400001

08007c38 <_fflush_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	690b      	ldr	r3, [r1, #16]
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	b913      	cbnz	r3, 8007c48 <_fflush_r+0x10>
 8007c42:	2500      	movs	r5, #0
 8007c44:	4628      	mov	r0, r5
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	b118      	cbz	r0, 8007c52 <_fflush_r+0x1a>
 8007c4a:	6983      	ldr	r3, [r0, #24]
 8007c4c:	b90b      	cbnz	r3, 8007c52 <_fflush_r+0x1a>
 8007c4e:	f000 f887 	bl	8007d60 <__sinit>
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <_fflush_r+0x6c>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d11b      	bne.n	8007c90 <_fflush_r+0x58>
 8007c58:	686c      	ldr	r4, [r5, #4]
 8007c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ef      	beq.n	8007c42 <_fflush_r+0xa>
 8007c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c64:	07d0      	lsls	r0, r2, #31
 8007c66:	d404      	bmi.n	8007c72 <_fflush_r+0x3a>
 8007c68:	0599      	lsls	r1, r3, #22
 8007c6a:	d402      	bmi.n	8007c72 <_fflush_r+0x3a>
 8007c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6e:	f000 f915 	bl	8007e9c <__retarget_lock_acquire_recursive>
 8007c72:	4628      	mov	r0, r5
 8007c74:	4621      	mov	r1, r4
 8007c76:	f7ff ff5d 	bl	8007b34 <__sflush_r>
 8007c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	07da      	lsls	r2, r3, #31
 8007c80:	d4e0      	bmi.n	8007c44 <_fflush_r+0xc>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	059b      	lsls	r3, r3, #22
 8007c86:	d4dd      	bmi.n	8007c44 <_fflush_r+0xc>
 8007c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8a:	f000 f908 	bl	8007e9e <__retarget_lock_release_recursive>
 8007c8e:	e7d9      	b.n	8007c44 <_fflush_r+0xc>
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <_fflush_r+0x70>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <_fflush_r+0x62>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7df      	b.n	8007c5a <_fflush_r+0x22>
 8007c9a:	4b04      	ldr	r3, [pc, #16]	; (8007cac <_fflush_r+0x74>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7da      	b.n	8007c5a <_fflush_r+0x22>
 8007ca4:	08008a34 	.word	0x08008a34
 8007ca8:	08008a54 	.word	0x08008a54
 8007cac:	08008a14 	.word	0x08008a14

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	; 0x5c
 8007cce:	f7ff fddb 	bl	8007888 <memset>
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x38>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6263      	str	r3, [r4, #36]	; 0x24
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <std+0x3c>)
 8007cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <std+0x40>)
 8007cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ce0:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <std+0x44>)
 8007ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08008721 	.word	0x08008721
 8007cec:	08008743 	.word	0x08008743
 8007cf0:	0800877b 	.word	0x0800877b
 8007cf4:	0800879f 	.word	0x0800879f

08007cf8 <_cleanup_r>:
 8007cf8:	4901      	ldr	r1, [pc, #4]	; (8007d00 <_cleanup_r+0x8>)
 8007cfa:	f000 b8af 	b.w	8007e5c <_fwalk_reent>
 8007cfe:	bf00      	nop
 8007d00:	08007c39 	.word	0x08007c39

08007d04 <__sfmoreglue>:
 8007d04:	2268      	movs	r2, #104	; 0x68
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	1e4d      	subs	r5, r1, #1
 8007d0a:	4355      	muls	r5, r2
 8007d0c:	460e      	mov	r6, r1
 8007d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d12:	f000 f993 	bl	800803c <_malloc_r>
 8007d16:	4604      	mov	r4, r0
 8007d18:	b140      	cbz	r0, 8007d2c <__sfmoreglue+0x28>
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d20:	300c      	adds	r0, #12
 8007d22:	60a0      	str	r0, [r4, #8]
 8007d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d28:	f7ff fdae 	bl	8007888 <memset>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}

08007d30 <__sfp_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_acquire+0x8>)
 8007d32:	f000 b8b3 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	20000241 	.word	0x20000241

08007d3c <__sfp_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sfp_lock_release+0x8>)
 8007d3e:	f000 b8ae 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	20000241 	.word	0x20000241

08007d48 <__sinit_lock_acquire>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sinit_lock_acquire+0x8>)
 8007d4a:	f000 b8a7 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20000242 	.word	0x20000242

08007d54 <__sinit_lock_release>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__sinit_lock_release+0x8>)
 8007d56:	f000 b8a2 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20000242 	.word	0x20000242

08007d60 <__sinit>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	f7ff fff0 	bl	8007d48 <__sinit_lock_acquire>
 8007d68:	69a3      	ldr	r3, [r4, #24]
 8007d6a:	b11b      	cbz	r3, 8007d74 <__sinit+0x14>
 8007d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d70:	f7ff bff0 	b.w	8007d54 <__sinit_lock_release>
 8007d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d78:	6523      	str	r3, [r4, #80]	; 0x50
 8007d7a:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <__sinit+0x68>)
 8007d7c:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <__sinit+0x6c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	bf08      	it	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bf08      	it	eq
 8007d8c:	61a3      	streq	r3, [r4, #24]
 8007d8e:	f000 f81f 	bl	8007dd0 <__sfp>
 8007d92:	6060      	str	r0, [r4, #4]
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f81b 	bl	8007dd0 <__sfp>
 8007d9a:	60a0      	str	r0, [r4, #8]
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f817 	bl	8007dd0 <__sfp>
 8007da2:	2200      	movs	r2, #0
 8007da4:	2104      	movs	r1, #4
 8007da6:	60e0      	str	r0, [r4, #12]
 8007da8:	6860      	ldr	r0, [r4, #4]
 8007daa:	f7ff ff81 	bl	8007cb0 <std>
 8007dae:	2201      	movs	r2, #1
 8007db0:	2109      	movs	r1, #9
 8007db2:	68a0      	ldr	r0, [r4, #8]
 8007db4:	f7ff ff7c 	bl	8007cb0 <std>
 8007db8:	2202      	movs	r2, #2
 8007dba:	2112      	movs	r1, #18
 8007dbc:	68e0      	ldr	r0, [r4, #12]
 8007dbe:	f7ff ff77 	bl	8007cb0 <std>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	61a3      	str	r3, [r4, #24]
 8007dc6:	e7d1      	b.n	8007d6c <__sinit+0xc>
 8007dc8:	08008a10 	.word	0x08008a10
 8007dcc:	08007cf9 	.word	0x08007cf9

08007dd0 <__sfp>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	f7ff ffac 	bl	8007d30 <__sfp_lock_acquire>
 8007dd8:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <__sfp+0x84>)
 8007dda:	681e      	ldr	r6, [r3, #0]
 8007ddc:	69b3      	ldr	r3, [r6, #24]
 8007dde:	b913      	cbnz	r3, 8007de6 <__sfp+0x16>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ffbd 	bl	8007d60 <__sinit>
 8007de6:	3648      	adds	r6, #72	; 0x48
 8007de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	d503      	bpl.n	8007df8 <__sfp+0x28>
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	b30b      	cbz	r3, 8007e38 <__sfp+0x68>
 8007df4:	6836      	ldr	r6, [r6, #0]
 8007df6:	e7f7      	b.n	8007de8 <__sfp+0x18>
 8007df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dfc:	b9d5      	cbnz	r5, 8007e34 <__sfp+0x64>
 8007dfe:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <__sfp+0x88>)
 8007e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e04:	60e3      	str	r3, [r4, #12]
 8007e06:	6665      	str	r5, [r4, #100]	; 0x64
 8007e08:	f000 f847 	bl	8007e9a <__retarget_lock_init_recursive>
 8007e0c:	f7ff ff96 	bl	8007d3c <__sfp_lock_release>
 8007e10:	2208      	movs	r2, #8
 8007e12:	4629      	mov	r1, r5
 8007e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e1c:	6025      	str	r5, [r4, #0]
 8007e1e:	61a5      	str	r5, [r4, #24]
 8007e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e24:	f7ff fd30 	bl	8007888 <memset>
 8007e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e30:	4620      	mov	r0, r4
 8007e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e34:	3468      	adds	r4, #104	; 0x68
 8007e36:	e7d9      	b.n	8007dec <__sfp+0x1c>
 8007e38:	2104      	movs	r1, #4
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	f7ff ff62 	bl	8007d04 <__sfmoreglue>
 8007e40:	4604      	mov	r4, r0
 8007e42:	6030      	str	r0, [r6, #0]
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1d5      	bne.n	8007df4 <__sfp+0x24>
 8007e48:	f7ff ff78 	bl	8007d3c <__sfp_lock_release>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	e7ee      	b.n	8007e30 <__sfp+0x60>
 8007e52:	bf00      	nop
 8007e54:	08008a10 	.word	0x08008a10
 8007e58:	ffff0001 	.word	0xffff0001

08007e5c <_fwalk_reent>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	4606      	mov	r6, r0
 8007e62:	4688      	mov	r8, r1
 8007e64:	2700      	movs	r7, #0
 8007e66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e72:	d505      	bpl.n	8007e80 <_fwalk_reent+0x24>
 8007e74:	6824      	ldr	r4, [r4, #0]
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	d1f7      	bne.n	8007e6a <_fwalk_reent+0xe>
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e80:	89ab      	ldrh	r3, [r5, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d907      	bls.n	8007e96 <_fwalk_reent+0x3a>
 8007e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	d003      	beq.n	8007e96 <_fwalk_reent+0x3a>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	47c0      	blx	r8
 8007e94:	4307      	orrs	r7, r0
 8007e96:	3568      	adds	r5, #104	; 0x68
 8007e98:	e7e9      	b.n	8007e6e <_fwalk_reent+0x12>

08007e9a <__retarget_lock_init_recursive>:
 8007e9a:	4770      	bx	lr

08007e9c <__retarget_lock_acquire_recursive>:
 8007e9c:	4770      	bx	lr

08007e9e <__retarget_lock_release_recursive>:
 8007e9e:	4770      	bx	lr

08007ea0 <__swhatbuf_r>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	461d      	mov	r5, r3
 8007eae:	b096      	sub	sp, #88	; 0x58
 8007eb0:	da08      	bge.n	8007ec4 <__swhatbuf_r+0x24>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	061a      	lsls	r2, r3, #24
 8007ebc:	d410      	bmi.n	8007ee0 <__swhatbuf_r+0x40>
 8007ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec2:	e00e      	b.n	8007ee2 <__swhatbuf_r+0x42>
 8007ec4:	466a      	mov	r2, sp
 8007ec6:	f000 fc91 	bl	80087ec <_fstat_r>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	dbf1      	blt.n	8007eb2 <__swhatbuf_r+0x12>
 8007ece:	9a01      	ldr	r2, [sp, #4]
 8007ed0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ed4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ed8:	425a      	negs	r2, r3
 8007eda:	415a      	adcs	r2, r3
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	e7ee      	b.n	8007ebe <__swhatbuf_r+0x1e>
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	b016      	add	sp, #88	; 0x58
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007eec <__smakebuf_r>:
 8007eec:	898b      	ldrh	r3, [r1, #12]
 8007eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ef0:	079d      	lsls	r5, r3, #30
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	d507      	bpl.n	8007f08 <__smakebuf_r+0x1c>
 8007ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	6123      	str	r3, [r4, #16]
 8007f00:	2301      	movs	r3, #1
 8007f02:	6163      	str	r3, [r4, #20]
 8007f04:	b002      	add	sp, #8
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	466a      	mov	r2, sp
 8007f0a:	ab01      	add	r3, sp, #4
 8007f0c:	f7ff ffc8 	bl	8007ea0 <__swhatbuf_r>
 8007f10:	9900      	ldr	r1, [sp, #0]
 8007f12:	4605      	mov	r5, r0
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f891 	bl	800803c <_malloc_r>
 8007f1a:	b948      	cbnz	r0, 8007f30 <__smakebuf_r+0x44>
 8007f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f20:	059a      	lsls	r2, r3, #22
 8007f22:	d4ef      	bmi.n	8007f04 <__smakebuf_r+0x18>
 8007f24:	f023 0303 	bic.w	r3, r3, #3
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	e7e3      	b.n	8007ef8 <__smakebuf_r+0xc>
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <__smakebuf_r+0x7c>)
 8007f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	6020      	str	r0, [r4, #0]
 8007f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	9b00      	ldr	r3, [sp, #0]
 8007f40:	6120      	str	r0, [r4, #16]
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	b15b      	cbz	r3, 8007f60 <__smakebuf_r+0x74>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f4e:	f000 fc5f 	bl	8008810 <_isatty_r>
 8007f52:	b128      	cbz	r0, 8007f60 <__smakebuf_r+0x74>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	89a0      	ldrh	r0, [r4, #12]
 8007f62:	4305      	orrs	r5, r0
 8007f64:	81a5      	strh	r5, [r4, #12]
 8007f66:	e7cd      	b.n	8007f04 <__smakebuf_r+0x18>
 8007f68:	08007cf9 	.word	0x08007cf9

08007f6c <_free_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4605      	mov	r5, r0
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d040      	beq.n	8007ff6 <_free_r+0x8a>
 8007f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f78:	1f0c      	subs	r4, r1, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfb8      	it	lt
 8007f7e:	18e4      	addlt	r4, r4, r3
 8007f80:	f000 fc76 	bl	8008870 <__malloc_lock>
 8007f84:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <_free_r+0x8c>)
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	b933      	cbnz	r3, 8007f98 <_free_r+0x2c>
 8007f8a:	6063      	str	r3, [r4, #4]
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f94:	f000 bc72 	b.w	800887c <__malloc_unlock>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d908      	bls.n	8007fae <_free_r+0x42>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	1821      	adds	r1, r4, r0
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf01      	itttt	eq
 8007fa4:	6819      	ldreq	r1, [r3, #0]
 8007fa6:	685b      	ldreq	r3, [r3, #4]
 8007fa8:	1809      	addeq	r1, r1, r0
 8007faa:	6021      	streq	r1, [r4, #0]
 8007fac:	e7ed      	b.n	8007f8a <_free_r+0x1e>
 8007fae:	461a      	mov	r2, r3
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b10b      	cbz	r3, 8007fb8 <_free_r+0x4c>
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	d9fa      	bls.n	8007fae <_free_r+0x42>
 8007fb8:	6811      	ldr	r1, [r2, #0]
 8007fba:	1850      	adds	r0, r2, r1
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d10b      	bne.n	8007fd8 <_free_r+0x6c>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	1850      	adds	r0, r2, r1
 8007fc6:	4283      	cmp	r3, r0
 8007fc8:	6011      	str	r1, [r2, #0]
 8007fca:	d1e0      	bne.n	8007f8e <_free_r+0x22>
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	4401      	add	r1, r0
 8007fd2:	6011      	str	r1, [r2, #0]
 8007fd4:	6053      	str	r3, [r2, #4]
 8007fd6:	e7da      	b.n	8007f8e <_free_r+0x22>
 8007fd8:	d902      	bls.n	8007fe0 <_free_r+0x74>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	e7d6      	b.n	8007f8e <_free_r+0x22>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	1821      	adds	r1, r4, r0
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	bf01      	itttt	eq
 8007fe8:	6819      	ldreq	r1, [r3, #0]
 8007fea:	685b      	ldreq	r3, [r3, #4]
 8007fec:	1809      	addeq	r1, r1, r0
 8007fee:	6021      	streq	r1, [r4, #0]
 8007ff0:	6063      	str	r3, [r4, #4]
 8007ff2:	6054      	str	r4, [r2, #4]
 8007ff4:	e7cb      	b.n	8007f8e <_free_r+0x22>
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000244 	.word	0x20000244

08007ffc <sbrk_aligned>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4e0e      	ldr	r6, [pc, #56]	; (8008038 <sbrk_aligned+0x3c>)
 8008000:	460c      	mov	r4, r1
 8008002:	6831      	ldr	r1, [r6, #0]
 8008004:	4605      	mov	r5, r0
 8008006:	b911      	cbnz	r1, 800800e <sbrk_aligned+0x12>
 8008008:	f000 fb7a 	bl	8008700 <_sbrk_r>
 800800c:	6030      	str	r0, [r6, #0]
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fb75 	bl	8008700 <_sbrk_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d00a      	beq.n	8008030 <sbrk_aligned+0x34>
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d007      	beq.n	8008034 <sbrk_aligned+0x38>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fb6a 	bl	8008700 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d101      	bne.n	8008034 <sbrk_aligned+0x38>
 8008030:	f04f 34ff 	mov.w	r4, #4294967295
 8008034:	4620      	mov	r0, r4
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	20000248 	.word	0x20000248

0800803c <_malloc_r>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	1ccd      	adds	r5, r1, #3
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	2d00      	cmp	r5, #0
 8008050:	4607      	mov	r7, r0
 8008052:	db01      	blt.n	8008058 <_malloc_r+0x1c>
 8008054:	42a9      	cmp	r1, r5
 8008056:	d905      	bls.n	8008064 <_malloc_r+0x28>
 8008058:	230c      	movs	r3, #12
 800805a:	2600      	movs	r6, #0
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4630      	mov	r0, r6
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	4e2e      	ldr	r6, [pc, #184]	; (8008120 <_malloc_r+0xe4>)
 8008066:	f000 fc03 	bl	8008870 <__malloc_lock>
 800806a:	6833      	ldr	r3, [r6, #0]
 800806c:	461c      	mov	r4, r3
 800806e:	bb34      	cbnz	r4, 80080be <_malloc_r+0x82>
 8008070:	4629      	mov	r1, r5
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff ffc2 	bl	8007ffc <sbrk_aligned>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	4604      	mov	r4, r0
 800807c:	d14d      	bne.n	800811a <_malloc_r+0xde>
 800807e:	6834      	ldr	r4, [r6, #0]
 8008080:	4626      	mov	r6, r4
 8008082:	2e00      	cmp	r6, #0
 8008084:	d140      	bne.n	8008108 <_malloc_r+0xcc>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	4631      	mov	r1, r6
 800808a:	4638      	mov	r0, r7
 800808c:	eb04 0803 	add.w	r8, r4, r3
 8008090:	f000 fb36 	bl	8008700 <_sbrk_r>
 8008094:	4580      	cmp	r8, r0
 8008096:	d13a      	bne.n	800810e <_malloc_r+0xd2>
 8008098:	6821      	ldr	r1, [r4, #0]
 800809a:	3503      	adds	r5, #3
 800809c:	1a6d      	subs	r5, r5, r1
 800809e:	f025 0503 	bic.w	r5, r5, #3
 80080a2:	3508      	adds	r5, #8
 80080a4:	2d0c      	cmp	r5, #12
 80080a6:	bf38      	it	cc
 80080a8:	250c      	movcc	r5, #12
 80080aa:	4638      	mov	r0, r7
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7ff ffa5 	bl	8007ffc <sbrk_aligned>
 80080b2:	3001      	adds	r0, #1
 80080b4:	d02b      	beq.n	800810e <_malloc_r+0xd2>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	442b      	add	r3, r5
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	e00e      	b.n	80080dc <_malloc_r+0xa0>
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	1b52      	subs	r2, r2, r5
 80080c2:	d41e      	bmi.n	8008102 <_malloc_r+0xc6>
 80080c4:	2a0b      	cmp	r2, #11
 80080c6:	d916      	bls.n	80080f6 <_malloc_r+0xba>
 80080c8:	1961      	adds	r1, r4, r5
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	6025      	str	r5, [r4, #0]
 80080ce:	bf18      	it	ne
 80080d0:	6059      	strne	r1, [r3, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	bf08      	it	eq
 80080d6:	6031      	streq	r1, [r6, #0]
 80080d8:	5162      	str	r2, [r4, r5]
 80080da:	604b      	str	r3, [r1, #4]
 80080dc:	4638      	mov	r0, r7
 80080de:	f104 060b 	add.w	r6, r4, #11
 80080e2:	f000 fbcb 	bl	800887c <__malloc_unlock>
 80080e6:	f026 0607 	bic.w	r6, r6, #7
 80080ea:	1d23      	adds	r3, r4, #4
 80080ec:	1af2      	subs	r2, r6, r3
 80080ee:	d0b6      	beq.n	800805e <_malloc_r+0x22>
 80080f0:	1b9b      	subs	r3, r3, r6
 80080f2:	50a3      	str	r3, [r4, r2]
 80080f4:	e7b3      	b.n	800805e <_malloc_r+0x22>
 80080f6:	6862      	ldr	r2, [r4, #4]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	bf0c      	ite	eq
 80080fc:	6032      	streq	r2, [r6, #0]
 80080fe:	605a      	strne	r2, [r3, #4]
 8008100:	e7ec      	b.n	80080dc <_malloc_r+0xa0>
 8008102:	4623      	mov	r3, r4
 8008104:	6864      	ldr	r4, [r4, #4]
 8008106:	e7b2      	b.n	800806e <_malloc_r+0x32>
 8008108:	4634      	mov	r4, r6
 800810a:	6876      	ldr	r6, [r6, #4]
 800810c:	e7b9      	b.n	8008082 <_malloc_r+0x46>
 800810e:	230c      	movs	r3, #12
 8008110:	4638      	mov	r0, r7
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	f000 fbb2 	bl	800887c <__malloc_unlock>
 8008118:	e7a1      	b.n	800805e <_malloc_r+0x22>
 800811a:	6025      	str	r5, [r4, #0]
 800811c:	e7de      	b.n	80080dc <_malloc_r+0xa0>
 800811e:	bf00      	nop
 8008120:	20000244 	.word	0x20000244

08008124 <__sfputc_r>:
 8008124:	6893      	ldr	r3, [r2, #8]
 8008126:	b410      	push	{r4}
 8008128:	3b01      	subs	r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	6093      	str	r3, [r2, #8]
 800812e:	da07      	bge.n	8008140 <__sfputc_r+0x1c>
 8008130:	6994      	ldr	r4, [r2, #24]
 8008132:	42a3      	cmp	r3, r4
 8008134:	db01      	blt.n	800813a <__sfputc_r+0x16>
 8008136:	290a      	cmp	r1, #10
 8008138:	d102      	bne.n	8008140 <__sfputc_r+0x1c>
 800813a:	bc10      	pop	{r4}
 800813c:	f7ff bc3a 	b.w	80079b4 <__swbuf_r>
 8008140:	6813      	ldr	r3, [r2, #0]
 8008142:	1c58      	adds	r0, r3, #1
 8008144:	6010      	str	r0, [r2, #0]
 8008146:	7019      	strb	r1, [r3, #0]
 8008148:	4608      	mov	r0, r1
 800814a:	bc10      	pop	{r4}
 800814c:	4770      	bx	lr

0800814e <__sfputs_r>:
 800814e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1
 8008154:	4614      	mov	r4, r2
 8008156:	18d5      	adds	r5, r2, r3
 8008158:	42ac      	cmp	r4, r5
 800815a:	d101      	bne.n	8008160 <__sfputs_r+0x12>
 800815c:	2000      	movs	r0, #0
 800815e:	e007      	b.n	8008170 <__sfputs_r+0x22>
 8008160:	463a      	mov	r2, r7
 8008162:	4630      	mov	r0, r6
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	f7ff ffdc 	bl	8008124 <__sfputc_r>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d1f3      	bne.n	8008158 <__sfputs_r+0xa>
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008174 <_vfiprintf_r>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	460d      	mov	r5, r1
 800817a:	4614      	mov	r4, r2
 800817c:	4698      	mov	r8, r3
 800817e:	4606      	mov	r6, r0
 8008180:	b09d      	sub	sp, #116	; 0x74
 8008182:	b118      	cbz	r0, 800818c <_vfiprintf_r+0x18>
 8008184:	6983      	ldr	r3, [r0, #24]
 8008186:	b90b      	cbnz	r3, 800818c <_vfiprintf_r+0x18>
 8008188:	f7ff fdea 	bl	8007d60 <__sinit>
 800818c:	4b89      	ldr	r3, [pc, #548]	; (80083b4 <_vfiprintf_r+0x240>)
 800818e:	429d      	cmp	r5, r3
 8008190:	d11b      	bne.n	80081ca <_vfiprintf_r+0x56>
 8008192:	6875      	ldr	r5, [r6, #4]
 8008194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008196:	07d9      	lsls	r1, r3, #31
 8008198:	d405      	bmi.n	80081a6 <_vfiprintf_r+0x32>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	059a      	lsls	r2, r3, #22
 800819e:	d402      	bmi.n	80081a6 <_vfiprintf_r+0x32>
 80081a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a2:	f7ff fe7b 	bl	8007e9c <__retarget_lock_acquire_recursive>
 80081a6:	89ab      	ldrh	r3, [r5, #12]
 80081a8:	071b      	lsls	r3, r3, #28
 80081aa:	d501      	bpl.n	80081b0 <_vfiprintf_r+0x3c>
 80081ac:	692b      	ldr	r3, [r5, #16]
 80081ae:	b9eb      	cbnz	r3, 80081ec <_vfiprintf_r+0x78>
 80081b0:	4629      	mov	r1, r5
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff fc50 	bl	8007a58 <__swsetup_r>
 80081b8:	b1c0      	cbz	r0, 80081ec <_vfiprintf_r+0x78>
 80081ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081bc:	07dc      	lsls	r4, r3, #31
 80081be:	d50e      	bpl.n	80081de <_vfiprintf_r+0x6a>
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	b01d      	add	sp, #116	; 0x74
 80081c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ca:	4b7b      	ldr	r3, [pc, #492]	; (80083b8 <_vfiprintf_r+0x244>)
 80081cc:	429d      	cmp	r5, r3
 80081ce:	d101      	bne.n	80081d4 <_vfiprintf_r+0x60>
 80081d0:	68b5      	ldr	r5, [r6, #8]
 80081d2:	e7df      	b.n	8008194 <_vfiprintf_r+0x20>
 80081d4:	4b79      	ldr	r3, [pc, #484]	; (80083bc <_vfiprintf_r+0x248>)
 80081d6:	429d      	cmp	r5, r3
 80081d8:	bf08      	it	eq
 80081da:	68f5      	ldreq	r5, [r6, #12]
 80081dc:	e7da      	b.n	8008194 <_vfiprintf_r+0x20>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	0598      	lsls	r0, r3, #22
 80081e2:	d4ed      	bmi.n	80081c0 <_vfiprintf_r+0x4c>
 80081e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e6:	f7ff fe5a 	bl	8007e9e <__retarget_lock_release_recursive>
 80081ea:	e7e9      	b.n	80081c0 <_vfiprintf_r+0x4c>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9309      	str	r3, [sp, #36]	; 0x24
 80081f0:	2320      	movs	r3, #32
 80081f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f6:	2330      	movs	r3, #48	; 0x30
 80081f8:	f04f 0901 	mov.w	r9, #1
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80083c0 <_vfiprintf_r+0x24c>
 8008204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008208:	4623      	mov	r3, r4
 800820a:	469a      	mov	sl, r3
 800820c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008210:	b10a      	cbz	r2, 8008216 <_vfiprintf_r+0xa2>
 8008212:	2a25      	cmp	r2, #37	; 0x25
 8008214:	d1f9      	bne.n	800820a <_vfiprintf_r+0x96>
 8008216:	ebba 0b04 	subs.w	fp, sl, r4
 800821a:	d00b      	beq.n	8008234 <_vfiprintf_r+0xc0>
 800821c:	465b      	mov	r3, fp
 800821e:	4622      	mov	r2, r4
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f7ff ff93 	bl	800814e <__sfputs_r>
 8008228:	3001      	adds	r0, #1
 800822a:	f000 80aa 	beq.w	8008382 <_vfiprintf_r+0x20e>
 800822e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008230:	445a      	add	r2, fp
 8008232:	9209      	str	r2, [sp, #36]	; 0x24
 8008234:	f89a 3000 	ldrb.w	r3, [sl]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80a2 	beq.w	8008382 <_vfiprintf_r+0x20e>
 800823e:	2300      	movs	r3, #0
 8008240:	f04f 32ff 	mov.w	r2, #4294967295
 8008244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008248:	f10a 0a01 	add.w	sl, sl, #1
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	9307      	str	r3, [sp, #28]
 8008250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008254:	931a      	str	r3, [sp, #104]	; 0x68
 8008256:	4654      	mov	r4, sl
 8008258:	2205      	movs	r2, #5
 800825a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825e:	4858      	ldr	r0, [pc, #352]	; (80083c0 <_vfiprintf_r+0x24c>)
 8008260:	f000 faf8 	bl	8008854 <memchr>
 8008264:	9a04      	ldr	r2, [sp, #16]
 8008266:	b9d8      	cbnz	r0, 80082a0 <_vfiprintf_r+0x12c>
 8008268:	06d1      	lsls	r1, r2, #27
 800826a:	bf44      	itt	mi
 800826c:	2320      	movmi	r3, #32
 800826e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008272:	0713      	lsls	r3, r2, #28
 8008274:	bf44      	itt	mi
 8008276:	232b      	movmi	r3, #43	; 0x2b
 8008278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827c:	f89a 3000 	ldrb.w	r3, [sl]
 8008280:	2b2a      	cmp	r3, #42	; 0x2a
 8008282:	d015      	beq.n	80082b0 <_vfiprintf_r+0x13c>
 8008284:	4654      	mov	r4, sl
 8008286:	2000      	movs	r0, #0
 8008288:	f04f 0c0a 	mov.w	ip, #10
 800828c:	9a07      	ldr	r2, [sp, #28]
 800828e:	4621      	mov	r1, r4
 8008290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008294:	3b30      	subs	r3, #48	; 0x30
 8008296:	2b09      	cmp	r3, #9
 8008298:	d94e      	bls.n	8008338 <_vfiprintf_r+0x1c4>
 800829a:	b1b0      	cbz	r0, 80082ca <_vfiprintf_r+0x156>
 800829c:	9207      	str	r2, [sp, #28]
 800829e:	e014      	b.n	80082ca <_vfiprintf_r+0x156>
 80082a0:	eba0 0308 	sub.w	r3, r0, r8
 80082a4:	fa09 f303 	lsl.w	r3, r9, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	46a2      	mov	sl, r4
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	e7d2      	b.n	8008256 <_vfiprintf_r+0xe2>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	1d19      	adds	r1, r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	9103      	str	r1, [sp, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfbb      	ittet	lt
 80082bc:	425b      	neglt	r3, r3
 80082be:	f042 0202 	orrlt.w	r2, r2, #2
 80082c2:	9307      	strge	r3, [sp, #28]
 80082c4:	9307      	strlt	r3, [sp, #28]
 80082c6:	bfb8      	it	lt
 80082c8:	9204      	strlt	r2, [sp, #16]
 80082ca:	7823      	ldrb	r3, [r4, #0]
 80082cc:	2b2e      	cmp	r3, #46	; 0x2e
 80082ce:	d10c      	bne.n	80082ea <_vfiprintf_r+0x176>
 80082d0:	7863      	ldrb	r3, [r4, #1]
 80082d2:	2b2a      	cmp	r3, #42	; 0x2a
 80082d4:	d135      	bne.n	8008342 <_vfiprintf_r+0x1ce>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	3402      	adds	r4, #2
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9203      	str	r2, [sp, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfb8      	it	lt
 80082e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80083c4 <_vfiprintf_r+0x250>
 80082ee:	2203      	movs	r2, #3
 80082f0:	4650      	mov	r0, sl
 80082f2:	7821      	ldrb	r1, [r4, #0]
 80082f4:	f000 faae 	bl	8008854 <memchr>
 80082f8:	b140      	cbz	r0, 800830c <_vfiprintf_r+0x198>
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	eba0 000a 	sub.w	r0, r0, sl
 8008300:	fa03 f000 	lsl.w	r0, r3, r0
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	3401      	adds	r4, #1
 8008308:	4303      	orrs	r3, r0
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008310:	2206      	movs	r2, #6
 8008312:	482d      	ldr	r0, [pc, #180]	; (80083c8 <_vfiprintf_r+0x254>)
 8008314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008318:	f000 fa9c 	bl	8008854 <memchr>
 800831c:	2800      	cmp	r0, #0
 800831e:	d03f      	beq.n	80083a0 <_vfiprintf_r+0x22c>
 8008320:	4b2a      	ldr	r3, [pc, #168]	; (80083cc <_vfiprintf_r+0x258>)
 8008322:	bb1b      	cbnz	r3, 800836c <_vfiprintf_r+0x1f8>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	3307      	adds	r3, #7
 8008328:	f023 0307 	bic.w	r3, r3, #7
 800832c:	3308      	adds	r3, #8
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008332:	443b      	add	r3, r7
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
 8008336:	e767      	b.n	8008208 <_vfiprintf_r+0x94>
 8008338:	460c      	mov	r4, r1
 800833a:	2001      	movs	r0, #1
 800833c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008340:	e7a5      	b.n	800828e <_vfiprintf_r+0x11a>
 8008342:	2300      	movs	r3, #0
 8008344:	f04f 0c0a 	mov.w	ip, #10
 8008348:	4619      	mov	r1, r3
 800834a:	3401      	adds	r4, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	4620      	mov	r0, r4
 8008350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008354:	3a30      	subs	r2, #48	; 0x30
 8008356:	2a09      	cmp	r2, #9
 8008358:	d903      	bls.n	8008362 <_vfiprintf_r+0x1ee>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c5      	beq.n	80082ea <_vfiprintf_r+0x176>
 800835e:	9105      	str	r1, [sp, #20]
 8008360:	e7c3      	b.n	80082ea <_vfiprintf_r+0x176>
 8008362:	4604      	mov	r4, r0
 8008364:	2301      	movs	r3, #1
 8008366:	fb0c 2101 	mla	r1, ip, r1, r2
 800836a:	e7f0      	b.n	800834e <_vfiprintf_r+0x1da>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4630      	mov	r0, r6
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <_vfiprintf_r+0x25c>)
 8008376:	a904      	add	r1, sp, #16
 8008378:	f3af 8000 	nop.w
 800837c:	4607      	mov	r7, r0
 800837e:	1c78      	adds	r0, r7, #1
 8008380:	d1d6      	bne.n	8008330 <_vfiprintf_r+0x1bc>
 8008382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008384:	07d9      	lsls	r1, r3, #31
 8008386:	d405      	bmi.n	8008394 <_vfiprintf_r+0x220>
 8008388:	89ab      	ldrh	r3, [r5, #12]
 800838a:	059a      	lsls	r2, r3, #22
 800838c:	d402      	bmi.n	8008394 <_vfiprintf_r+0x220>
 800838e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008390:	f7ff fd85 	bl	8007e9e <__retarget_lock_release_recursive>
 8008394:	89ab      	ldrh	r3, [r5, #12]
 8008396:	065b      	lsls	r3, r3, #25
 8008398:	f53f af12 	bmi.w	80081c0 <_vfiprintf_r+0x4c>
 800839c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800839e:	e711      	b.n	80081c4 <_vfiprintf_r+0x50>
 80083a0:	ab03      	add	r3, sp, #12
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	462a      	mov	r2, r5
 80083a6:	4630      	mov	r0, r6
 80083a8:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <_vfiprintf_r+0x25c>)
 80083aa:	a904      	add	r1, sp, #16
 80083ac:	f000 f882 	bl	80084b4 <_printf_i>
 80083b0:	e7e4      	b.n	800837c <_vfiprintf_r+0x208>
 80083b2:	bf00      	nop
 80083b4:	08008a34 	.word	0x08008a34
 80083b8:	08008a54 	.word	0x08008a54
 80083bc:	08008a14 	.word	0x08008a14
 80083c0:	08008a74 	.word	0x08008a74
 80083c4:	08008a7a 	.word	0x08008a7a
 80083c8:	08008a7e 	.word	0x08008a7e
 80083cc:	00000000 	.word	0x00000000
 80083d0:	0800814f 	.word	0x0800814f

080083d4 <_printf_common>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	4616      	mov	r6, r2
 80083da:	4699      	mov	r9, r3
 80083dc:	688a      	ldr	r2, [r1, #8]
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	4607      	mov	r7, r0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bfb8      	it	lt
 80083e6:	4613      	movlt	r3, r2
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083ee:	460c      	mov	r4, r1
 80083f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f4:	b10a      	cbz	r2, 80083fa <_printf_common+0x26>
 80083f6:	3301      	adds	r3, #1
 80083f8:	6033      	str	r3, [r6, #0]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	0699      	lsls	r1, r3, #26
 80083fe:	bf42      	ittt	mi
 8008400:	6833      	ldrmi	r3, [r6, #0]
 8008402:	3302      	addmi	r3, #2
 8008404:	6033      	strmi	r3, [r6, #0]
 8008406:	6825      	ldr	r5, [r4, #0]
 8008408:	f015 0506 	ands.w	r5, r5, #6
 800840c:	d106      	bne.n	800841c <_printf_common+0x48>
 800840e:	f104 0a19 	add.w	sl, r4, #25
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	6832      	ldr	r2, [r6, #0]
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc28      	bgt.n	800846e <_printf_common+0x9a>
 800841c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008420:	1e13      	subs	r3, r2, #0
 8008422:	6822      	ldr	r2, [r4, #0]
 8008424:	bf18      	it	ne
 8008426:	2301      	movne	r3, #1
 8008428:	0692      	lsls	r2, r2, #26
 800842a:	d42d      	bmi.n	8008488 <_printf_common+0xb4>
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008434:	47c0      	blx	r8
 8008436:	3001      	adds	r0, #1
 8008438:	d020      	beq.n	800847c <_printf_common+0xa8>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	68e5      	ldr	r5, [r4, #12]
 800843e:	f003 0306 	and.w	r3, r3, #6
 8008442:	2b04      	cmp	r3, #4
 8008444:	bf18      	it	ne
 8008446:	2500      	movne	r5, #0
 8008448:	6832      	ldr	r2, [r6, #0]
 800844a:	f04f 0600 	mov.w	r6, #0
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	bf08      	it	eq
 8008452:	1aad      	subeq	r5, r5, r2
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	bf08      	it	eq
 8008458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800845c:	4293      	cmp	r3, r2
 800845e:	bfc4      	itt	gt
 8008460:	1a9b      	subgt	r3, r3, r2
 8008462:	18ed      	addgt	r5, r5, r3
 8008464:	341a      	adds	r4, #26
 8008466:	42b5      	cmp	r5, r6
 8008468:	d11a      	bne.n	80084a0 <_printf_common+0xcc>
 800846a:	2000      	movs	r0, #0
 800846c:	e008      	b.n	8008480 <_printf_common+0xac>
 800846e:	2301      	movs	r3, #1
 8008470:	4652      	mov	r2, sl
 8008472:	4649      	mov	r1, r9
 8008474:	4638      	mov	r0, r7
 8008476:	47c0      	blx	r8
 8008478:	3001      	adds	r0, #1
 800847a:	d103      	bne.n	8008484 <_printf_common+0xb0>
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	3501      	adds	r5, #1
 8008486:	e7c4      	b.n	8008412 <_printf_common+0x3e>
 8008488:	2030      	movs	r0, #48	; 0x30
 800848a:	18e1      	adds	r1, r4, r3
 800848c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008496:	4422      	add	r2, r4
 8008498:	3302      	adds	r3, #2
 800849a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800849e:	e7c5      	b.n	800842c <_printf_common+0x58>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4622      	mov	r2, r4
 80084a4:	4649      	mov	r1, r9
 80084a6:	4638      	mov	r0, r7
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d0e6      	beq.n	800847c <_printf_common+0xa8>
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7d9      	b.n	8008466 <_printf_common+0x92>
	...

080084b4 <_printf_i>:
 80084b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	7e0f      	ldrb	r7, [r1, #24]
 80084ba:	4691      	mov	r9, r2
 80084bc:	2f78      	cmp	r7, #120	; 0x78
 80084be:	4680      	mov	r8, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	469a      	mov	sl, r3
 80084c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ca:	d807      	bhi.n	80084dc <_printf_i+0x28>
 80084cc:	2f62      	cmp	r7, #98	; 0x62
 80084ce:	d80a      	bhi.n	80084e6 <_printf_i+0x32>
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	f000 80d9 	beq.w	8008688 <_printf_i+0x1d4>
 80084d6:	2f58      	cmp	r7, #88	; 0x58
 80084d8:	f000 80a4 	beq.w	8008624 <_printf_i+0x170>
 80084dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084e4:	e03a      	b.n	800855c <_printf_i+0xa8>
 80084e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ea:	2b15      	cmp	r3, #21
 80084ec:	d8f6      	bhi.n	80084dc <_printf_i+0x28>
 80084ee:	a101      	add	r1, pc, #4	; (adr r1, 80084f4 <_printf_i+0x40>)
 80084f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	08008561 	.word	0x08008561
 80084fc:	080084dd 	.word	0x080084dd
 8008500:	080084dd 	.word	0x080084dd
 8008504:	080084dd 	.word	0x080084dd
 8008508:	080084dd 	.word	0x080084dd
 800850c:	08008561 	.word	0x08008561
 8008510:	080084dd 	.word	0x080084dd
 8008514:	080084dd 	.word	0x080084dd
 8008518:	080084dd 	.word	0x080084dd
 800851c:	080084dd 	.word	0x080084dd
 8008520:	0800866f 	.word	0x0800866f
 8008524:	08008591 	.word	0x08008591
 8008528:	08008651 	.word	0x08008651
 800852c:	080084dd 	.word	0x080084dd
 8008530:	080084dd 	.word	0x080084dd
 8008534:	08008691 	.word	0x08008691
 8008538:	080084dd 	.word	0x080084dd
 800853c:	08008591 	.word	0x08008591
 8008540:	080084dd 	.word	0x080084dd
 8008544:	080084dd 	.word	0x080084dd
 8008548:	08008659 	.word	0x08008659
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	1d1a      	adds	r2, r3, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	602a      	str	r2, [r5, #0]
 8008554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800855c:	2301      	movs	r3, #1
 800855e:	e0a4      	b.n	80086aa <_printf_i+0x1f6>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	6829      	ldr	r1, [r5, #0]
 8008564:	0606      	lsls	r6, r0, #24
 8008566:	f101 0304 	add.w	r3, r1, #4
 800856a:	d50a      	bpl.n	8008582 <_printf_i+0xce>
 800856c:	680e      	ldr	r6, [r1, #0]
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	2e00      	cmp	r6, #0
 8008572:	da03      	bge.n	800857c <_printf_i+0xc8>
 8008574:	232d      	movs	r3, #45	; 0x2d
 8008576:	4276      	negs	r6, r6
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857c:	230a      	movs	r3, #10
 800857e:	485e      	ldr	r0, [pc, #376]	; (80086f8 <_printf_i+0x244>)
 8008580:	e019      	b.n	80085b6 <_printf_i+0x102>
 8008582:	680e      	ldr	r6, [r1, #0]
 8008584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	bf18      	it	ne
 800858c:	b236      	sxthne	r6, r6
 800858e:	e7ef      	b.n	8008570 <_printf_i+0xbc>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	1d19      	adds	r1, r3, #4
 8008596:	6029      	str	r1, [r5, #0]
 8008598:	0601      	lsls	r1, r0, #24
 800859a:	d501      	bpl.n	80085a0 <_printf_i+0xec>
 800859c:	681e      	ldr	r6, [r3, #0]
 800859e:	e002      	b.n	80085a6 <_printf_i+0xf2>
 80085a0:	0646      	lsls	r6, r0, #25
 80085a2:	d5fb      	bpl.n	800859c <_printf_i+0xe8>
 80085a4:	881e      	ldrh	r6, [r3, #0]
 80085a6:	2f6f      	cmp	r7, #111	; 0x6f
 80085a8:	bf0c      	ite	eq
 80085aa:	2308      	moveq	r3, #8
 80085ac:	230a      	movne	r3, #10
 80085ae:	4852      	ldr	r0, [pc, #328]	; (80086f8 <_printf_i+0x244>)
 80085b0:	2100      	movs	r1, #0
 80085b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085b6:	6865      	ldr	r5, [r4, #4]
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	bfa8      	it	ge
 80085bc:	6821      	ldrge	r1, [r4, #0]
 80085be:	60a5      	str	r5, [r4, #8]
 80085c0:	bfa4      	itt	ge
 80085c2:	f021 0104 	bicge.w	r1, r1, #4
 80085c6:	6021      	strge	r1, [r4, #0]
 80085c8:	b90e      	cbnz	r6, 80085ce <_printf_i+0x11a>
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	d04d      	beq.n	800866a <_printf_i+0x1b6>
 80085ce:	4615      	mov	r5, r2
 80085d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80085d4:	fb03 6711 	mls	r7, r3, r1, r6
 80085d8:	5dc7      	ldrb	r7, [r0, r7]
 80085da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085de:	4637      	mov	r7, r6
 80085e0:	42bb      	cmp	r3, r7
 80085e2:	460e      	mov	r6, r1
 80085e4:	d9f4      	bls.n	80085d0 <_printf_i+0x11c>
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d10b      	bne.n	8008602 <_printf_i+0x14e>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	07de      	lsls	r6, r3, #31
 80085ee:	d508      	bpl.n	8008602 <_printf_i+0x14e>
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	6861      	ldr	r1, [r4, #4]
 80085f4:	4299      	cmp	r1, r3
 80085f6:	bfde      	ittt	le
 80085f8:	2330      	movle	r3, #48	; 0x30
 80085fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008602:	1b52      	subs	r2, r2, r5
 8008604:	6122      	str	r2, [r4, #16]
 8008606:	464b      	mov	r3, r9
 8008608:	4621      	mov	r1, r4
 800860a:	4640      	mov	r0, r8
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	aa03      	add	r2, sp, #12
 8008612:	f7ff fedf 	bl	80083d4 <_printf_common>
 8008616:	3001      	adds	r0, #1
 8008618:	d14c      	bne.n	80086b4 <_printf_i+0x200>
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	b004      	add	sp, #16
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	4834      	ldr	r0, [pc, #208]	; (80086f8 <_printf_i+0x244>)
 8008626:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800862a:	6829      	ldr	r1, [r5, #0]
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008632:	6029      	str	r1, [r5, #0]
 8008634:	061d      	lsls	r5, r3, #24
 8008636:	d514      	bpl.n	8008662 <_printf_i+0x1ae>
 8008638:	07df      	lsls	r7, r3, #31
 800863a:	bf44      	itt	mi
 800863c:	f043 0320 	orrmi.w	r3, r3, #32
 8008640:	6023      	strmi	r3, [r4, #0]
 8008642:	b91e      	cbnz	r6, 800864c <_printf_i+0x198>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f023 0320 	bic.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2310      	movs	r3, #16
 800864e:	e7af      	b.n	80085b0 <_printf_i+0xfc>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	f043 0320 	orr.w	r3, r3, #32
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	2378      	movs	r3, #120	; 0x78
 800865a:	4828      	ldr	r0, [pc, #160]	; (80086fc <_printf_i+0x248>)
 800865c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008660:	e7e3      	b.n	800862a <_printf_i+0x176>
 8008662:	0659      	lsls	r1, r3, #25
 8008664:	bf48      	it	mi
 8008666:	b2b6      	uxthmi	r6, r6
 8008668:	e7e6      	b.n	8008638 <_printf_i+0x184>
 800866a:	4615      	mov	r5, r2
 800866c:	e7bb      	b.n	80085e6 <_printf_i+0x132>
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	6826      	ldr	r6, [r4, #0]
 8008672:	1d18      	adds	r0, r3, #4
 8008674:	6961      	ldr	r1, [r4, #20]
 8008676:	6028      	str	r0, [r5, #0]
 8008678:	0635      	lsls	r5, r6, #24
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	d501      	bpl.n	8008682 <_printf_i+0x1ce>
 800867e:	6019      	str	r1, [r3, #0]
 8008680:	e002      	b.n	8008688 <_printf_i+0x1d4>
 8008682:	0670      	lsls	r0, r6, #25
 8008684:	d5fb      	bpl.n	800867e <_printf_i+0x1ca>
 8008686:	8019      	strh	r1, [r3, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	4615      	mov	r5, r2
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	e7ba      	b.n	8008606 <_printf_i+0x152>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	2100      	movs	r1, #0
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	602a      	str	r2, [r5, #0]
 8008698:	681d      	ldr	r5, [r3, #0]
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	4628      	mov	r0, r5
 800869e:	f000 f8d9 	bl	8008854 <memchr>
 80086a2:	b108      	cbz	r0, 80086a8 <_printf_i+0x1f4>
 80086a4:	1b40      	subs	r0, r0, r5
 80086a6:	6060      	str	r0, [r4, #4]
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	6123      	str	r3, [r4, #16]
 80086ac:	2300      	movs	r3, #0
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b2:	e7a8      	b.n	8008606 <_printf_i+0x152>
 80086b4:	462a      	mov	r2, r5
 80086b6:	4649      	mov	r1, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	47d0      	blx	sl
 80086be:	3001      	adds	r0, #1
 80086c0:	d0ab      	beq.n	800861a <_printf_i+0x166>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	079b      	lsls	r3, r3, #30
 80086c6:	d413      	bmi.n	80086f0 <_printf_i+0x23c>
 80086c8:	68e0      	ldr	r0, [r4, #12]
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	4298      	cmp	r0, r3
 80086ce:	bfb8      	it	lt
 80086d0:	4618      	movlt	r0, r3
 80086d2:	e7a4      	b.n	800861e <_printf_i+0x16a>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4632      	mov	r2, r6
 80086d8:	4649      	mov	r1, r9
 80086da:	4640      	mov	r0, r8
 80086dc:	47d0      	blx	sl
 80086de:	3001      	adds	r0, #1
 80086e0:	d09b      	beq.n	800861a <_printf_i+0x166>
 80086e2:	3501      	adds	r5, #1
 80086e4:	68e3      	ldr	r3, [r4, #12]
 80086e6:	9903      	ldr	r1, [sp, #12]
 80086e8:	1a5b      	subs	r3, r3, r1
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	dcf2      	bgt.n	80086d4 <_printf_i+0x220>
 80086ee:	e7eb      	b.n	80086c8 <_printf_i+0x214>
 80086f0:	2500      	movs	r5, #0
 80086f2:	f104 0619 	add.w	r6, r4, #25
 80086f6:	e7f5      	b.n	80086e4 <_printf_i+0x230>
 80086f8:	08008a85 	.word	0x08008a85
 80086fc:	08008a96 	.word	0x08008a96

08008700 <_sbrk_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	2300      	movs	r3, #0
 8008704:	4d05      	ldr	r5, [pc, #20]	; (800871c <_sbrk_r+0x1c>)
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7fc fcd8 	bl	80050c0 <_sbrk>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_sbrk_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_sbrk_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	2000024c 	.word	0x2000024c

08008720 <__sread>:
 8008720:	b510      	push	{r4, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	f000 f8ae 	bl	8008888 <_read_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	bfab      	itete	ge
 8008730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008732:	89a3      	ldrhlt	r3, [r4, #12]
 8008734:	181b      	addge	r3, r3, r0
 8008736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800873a:	bfac      	ite	ge
 800873c:	6563      	strge	r3, [r4, #84]	; 0x54
 800873e:	81a3      	strhlt	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__swrite>:
 8008742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	461f      	mov	r7, r3
 8008748:	898b      	ldrh	r3, [r1, #12]
 800874a:	4605      	mov	r5, r0
 800874c:	05db      	lsls	r3, r3, #23
 800874e:	460c      	mov	r4, r1
 8008750:	4616      	mov	r6, r2
 8008752:	d505      	bpl.n	8008760 <__swrite+0x1e>
 8008754:	2302      	movs	r3, #2
 8008756:	2200      	movs	r2, #0
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	f000 f868 	bl	8008830 <_lseek_r>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	4632      	mov	r2, r6
 8008764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	4628      	mov	r0, r5
 800876c:	463b      	mov	r3, r7
 800876e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	f000 b817 	b.w	80087a8 <_write_r>

0800877a <__sseek>:
 800877a:	b510      	push	{r4, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 f855 	bl	8008830 <_lseek_r>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	bf15      	itete	ne
 800878c:	6560      	strne	r0, [r4, #84]	; 0x54
 800878e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008796:	81a3      	strheq	r3, [r4, #12]
 8008798:	bf18      	it	ne
 800879a:	81a3      	strhne	r3, [r4, #12]
 800879c:	bd10      	pop	{r4, pc}

0800879e <__sclose>:
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 b813 	b.w	80087cc <_close_r>
	...

080087a8 <_write_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	2200      	movs	r2, #0
 80087b2:	4d05      	ldr	r5, [pc, #20]	; (80087c8 <_write_r+0x20>)
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7fc fc35 	bl	8005026 <_write>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_write_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_write_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	2000024c 	.word	0x2000024c

080087cc <_close_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	2300      	movs	r3, #0
 80087d0:	4d05      	ldr	r5, [pc, #20]	; (80087e8 <_close_r+0x1c>)
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	f7fc fc41 	bl	800505e <_close>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_close_r+0x1a>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_close_r+0x1a>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	2000024c 	.word	0x2000024c

080087ec <_fstat_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d06      	ldr	r5, [pc, #24]	; (800880c <_fstat_r+0x20>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7fc fc3b 	bl	8005074 <_fstat>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_fstat_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_fstat_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	2000024c 	.word	0x2000024c

08008810 <_isatty_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	2300      	movs	r3, #0
 8008814:	4d05      	ldr	r5, [pc, #20]	; (800882c <_isatty_r+0x1c>)
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7fc fc39 	bl	8005092 <_isatty>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_isatty_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_isatty_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	2000024c 	.word	0x2000024c

08008830 <_lseek_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	2200      	movs	r2, #0
 800883a:	4d05      	ldr	r5, [pc, #20]	; (8008850 <_lseek_r+0x20>)
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7fc fc31 	bl	80050a6 <_lseek>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_lseek_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_lseek_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	2000024c 	.word	0x2000024c

08008854 <memchr>:
 8008854:	4603      	mov	r3, r0
 8008856:	b510      	push	{r4, lr}
 8008858:	b2c9      	uxtb	r1, r1
 800885a:	4402      	add	r2, r0
 800885c:	4293      	cmp	r3, r2
 800885e:	4618      	mov	r0, r3
 8008860:	d101      	bne.n	8008866 <memchr+0x12>
 8008862:	2000      	movs	r0, #0
 8008864:	e003      	b.n	800886e <memchr+0x1a>
 8008866:	7804      	ldrb	r4, [r0, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	428c      	cmp	r4, r1
 800886c:	d1f6      	bne.n	800885c <memchr+0x8>
 800886e:	bd10      	pop	{r4, pc}

08008870 <__malloc_lock>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__malloc_lock+0x8>)
 8008872:	f7ff bb13 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8008876:	bf00      	nop
 8008878:	20000240 	.word	0x20000240

0800887c <__malloc_unlock>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__malloc_unlock+0x8>)
 800887e:	f7ff bb0e 	b.w	8007e9e <__retarget_lock_release_recursive>
 8008882:	bf00      	nop
 8008884:	20000240 	.word	0x20000240

08008888 <_read_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	2200      	movs	r2, #0
 8008892:	4d05      	ldr	r5, [pc, #20]	; (80088a8 <_read_r+0x20>)
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7fc fba8 	bl	8004fec <_read>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_read_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_read_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	2000024c 	.word	0x2000024c

080088ac <_init>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr

080088b8 <_fini>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr
