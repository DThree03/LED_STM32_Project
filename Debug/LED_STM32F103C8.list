
LED_STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb0  08008eb0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08008eb0  08008eb0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008eb0  08008eb0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000090  08008f44  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08008f44  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a0  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e2  00000000  00000000  0002d455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cc  00000000  00000000  00031990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011519  00000000  00000000  0004af5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d152  00000000  00000000  0005c475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e95c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  000e9618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c94 	.word	0x08008c94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008c94 	.word	0x08008c94

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__aeabi_f2iz>:
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a9c:	d30f      	bcc.n	8000abe <__aeabi_f2iz+0x2a>
 8000a9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_f2iz+0x30>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab8:	bf18      	it	ne
 8000aba:	4240      	negne	r0, r0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac8:	d101      	bne.n	8000ace <__aeabi_f2iz+0x3a>
 8000aca:	0242      	lsls	r2, r0, #9
 8000acc:	d105      	bne.n	8000ada <__aeabi_f2iz+0x46>
 8000ace:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ad2:	bf08      	it	eq
 8000ad4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <GetPage>:
#include "string.h"
#include "stdio.h"

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e016      	b.n	8000b1c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000af4:	3301      	adds	r3, #1
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d20b      	bcs.n	8000b16 <GetPage+0x36>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b04:	029b      	lsls	r3, r3, #10
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d304      	bcc.n	8000b16 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	e006      	b.n	8000b24 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	dde5      	ble.n	8000aee <GetPage+0xe>
	  }
  }

  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000b42:	f004 ffad 	bl	8005aa0 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffca 	bl	8000ae0 <GetPage>
 8000b4c:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000b5a:	69f8      	ldr	r0, [r7, #28]
 8000b5c:	f7ff ffc0 	bl	8000ae0 <GetPage>
 8000b60:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	0a9b      	lsrs	r3, r3, #10
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b7a:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <Flash_Write_Data+0xb4>)
 8000b84:	f005 f87e 	bl	8005c84 <HAL_FLASHEx_Erase>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d01f      	beq.n	8000bce <Flash_Write_Data+0x9e>
	{
	/*Error occurred while page erase.*/
		return HAL_FLASH_GetError ();
 8000b8e:	f004 ffbd 	bl	8005b0c <HAL_FLASH_GetError>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e022      	b.n	8000bdc <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	462b      	mov	r3, r5
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	2002      	movs	r0, #2
 8000bae:	f004 ff07 	bl	80059c0 <HAL_FLASH_Program>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d106      	bne.n	8000bc6 <Flash_Write_Data+0x96>
		{
			StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	e003      	b.n	8000bce <Flash_Write_Data+0x9e>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError ();
 8000bc6:	f004 ffa1 	bl	8005b0c <HAL_FLASH_GetError>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e006      	b.n	8000bdc <Flash_Write_Data+0xac>
	while (sofar<numberofwords)
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dbdf      	blt.n	8000b96 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000bd6:	f004 ff89 	bl	8005aec <HAL_FLASH_Lock>

	return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	200000ac 	.word	0x200000ac

08000be8 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3304      	adds	r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	80fa      	strh	r2, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d000      	beq.n	8000c16 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c14:	e7ef      	b.n	8000bf6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000c16:	bf00      	nop
	}
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <Led7TurnTime_Display>:
static void Led7RoundTime_Write(unsigned char oneByte);
static void Led7RoundTime_PWM(unsigned char oneByte);

/* Public function -----------------------------------------------------------*/
void Led7TurnTime_Display(int led7ch, int led7dv, int led_num_left, int led_num_right)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED[4] = led7ch;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c38:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED[5] = led7dv;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c40:	715a      	strb	r2, [r3, #5]

	VALUE_SHOW_LED[2] = led_num_right;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c48:	709a      	strb	r2, [r3, #2]
	VALUE_SHOW_LED[3] = led_num_left;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c50:	70da      	strb	r2, [r3, #3]

	Led7TurnTime_Start();
 8000c52:	f000 f941 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(TM1637_I2C_COMM1);
 8000c56:	2040      	movs	r0, #64	; 0x40
 8000c58:	f000 f95e 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c5c:	f000 f99e 	bl	8000f9c <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 8000c60:	f000 f9ca 	bl	8000ff8 <Led7TurnTime_Stop>

	Led7TurnTime_Start();
 8000c64:	f000 f938 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(0xC0);
 8000c68:	20c0      	movs	r0, #192	; 0xc0
 8000c6a:	f000 f955 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c6e:	f000 f995 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[0]]);
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000c7a:	5c9b      	ldrb	r3, [r3, r2]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f94b 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c82:	f000 f98b 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[1]]);
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f941 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000c96:	f000 f981 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[2]]);
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <Led7TurnTime_Display+0xdc>)
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f937 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000caa:	f000 f977 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED_1[VALUE_SHOW_LED[3]]);
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cb0:	78db      	ldrb	r3, [r3, #3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <Led7TurnTime_Display+0xe0>)
 8000cb6:	5c9b      	ldrb	r3, [r3, r2]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f92d 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000cbe:	f000 f96d 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[4]]);
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <Led7TurnTime_Display+0xe4>)
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f923 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000cd2:	f000 f963 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[5]]);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <Led7TurnTime_Display+0xd8>)
 8000cd8:	795b      	ldrb	r3, [r3, #5]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <Led7TurnTime_Display+0xe4>)
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f919 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000ce6:	f000 f959 	bl	8000f9c <Led7TurnTime_Cask>

	Led7TurnTime_Stop();
 8000cea:	f000 f985 	bl	8000ff8 <Led7TurnTime_Stop>

	Led7TurnTime_PWM(PWM8);
 8000cee:	2087      	movs	r0, #135	; 0x87
 8000cf0:	f000 f9ae 	bl	8001050 <Led7TurnTime_PWM>

	//__enable_irq();
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	08008dd0 	.word	0x08008dd0
 8000d04:	08008ddc 	.word	0x08008ddc
 8000d08:	08008dc0 	.word	0x08008dc0

08000d0c <Led7HitCnt_Display>:

void Led7HitCnt_Display(int slc_ch, int slc_dv, int sct_ch, int sct_dv)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED_2[3] = slc_ch;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d20:	70da      	strb	r2, [r3, #3]
	VALUE_SHOW_LED_2[4] = slc_dv;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d28:	711a      	strb	r2, [r3, #4]

	VALUE_SHOW_LED_2[1] = sct_ch;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d30:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_2[2] = sct_dv;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d38:	709a      	strb	r2, [r3, #2]

	Led7HitCnt_Start();
 8000d3a:	f000 f99f 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(TM1637_I2C_COMM1);
 8000d3e:	2040      	movs	r0, #64	; 0x40
 8000d40:	f000 f9bc 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d44:	f000 f9fc 	bl	8001140 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8000d48:	f000 fa28 	bl	800119c <Led7HitCnt_Stop>

	Led7HitCnt_Start();
 8000d4c:	f000 f996 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(0xC0);
 8000d50:	20c0      	movs	r0, #192	; 0xc0
 8000d52:	f000 f9b3 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d56:	f000 f9f3 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[0]]);
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f9a9 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d6a:	f000 f9e9 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[1]]);
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d76:	5c9b      	ldrb	r3, [r3, r2]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f99f 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d7e:	f000 f9df 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[2]]);
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d8a:	5c9b      	ldrb	r3, [r3, r2]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f995 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000d92:	f000 f9d5 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[3]]);
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000d98:	78db      	ldrb	r3, [r3, #3]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f98b 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000da6:	f000 f9cb 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[4]]);
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000db2:	5c9b      	ldrb	r3, [r3, r2]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f981 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000dba:	f000 f9c1 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[5]]);
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <Led7HitCnt_Display+0xd8>)
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <Led7HitCnt_Display+0xdc>)
 8000dc6:	5c9b      	ldrb	r3, [r3, r2]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f977 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000dce:	f000 f9b7 	bl	8001140 <Led7HitCnt_Cask>

	Led7HitCnt_Stop();
 8000dd2:	f000 f9e3 	bl	800119c <Led7HitCnt_Stop>

	Led7HitCnt_PWM(PWM8);
 8000dd6:	2087      	movs	r0, #135	; 0x87
 8000dd8:	f000 fa0c 	bl	80011f4 <Led7HitCnt_PWM>

	//__enable_irq();
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000008 	.word	0x20000008
 8000de8:	08008de8 	.word	0x08008de8

08000dec <Led7RoundTime_Display>:


void Led7RoundTime_Display(int h_ch, int h_dv, int m_ch, int m_dv, uint8_t led)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	//__disable_irq();

	VALUE_SHOW_LED_3[4] = h_ch;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e00:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED_3[3] = h_dv;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e08:	70da      	strb	r2, [r3, #3]

	VALUE_SHOW_LED_3[1] = m_ch;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e10:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_3[0] = m_dv;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e18:	701a      	strb	r2, [r3, #0]

	VALUE_SHOW_LED_3[2] = 10 + led;
 8000e1a:	7e3b      	ldrb	r3, [r7, #24]
 8000e1c:	330a      	adds	r3, #10
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e22:	709a      	strb	r2, [r3, #2]

	Led7RoundTime_Start();
 8000e24:	f000 f9fc 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(TM1637_I2C_COMM1);
 8000e28:	2040      	movs	r0, #64	; 0x40
 8000e2a:	f000 fa15 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e2e:	f000 fa4f 	bl	80012d0 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 8000e32:	f000 fa77 	bl	8001324 <Led7RoundTime_Stop>

	Led7RoundTime_Start();
 8000e36:	f000 f9f3 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(0xC0);
 8000e3a:	20c0      	movs	r0, #192	; 0xc0
 8000e3c:	f000 fa0c 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e40:	f000 fa46 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[0]]);
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e4c:	5c9b      	ldrb	r3, [r3, r2]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fa02 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e54:	f000 fa3c 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[1]]);
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e60:	5c9b      	ldrb	r3, [r3, r2]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9f8 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e68:	f000 fa32 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[2]]);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e6e:	789b      	ldrb	r3, [r3, #2]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f9ee 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e7c:	f000 fa28 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[3]]);
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f9e4 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000e90:	f000 fa1e 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[4]]);
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f9da 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000ea4:	f000 fa14 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[5]]);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <Led7RoundTime_Display+0xe4>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Led7RoundTime_Display+0xe8>)
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9d0 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8000eb8:	f000 fa0a 	bl	80012d0 <Led7RoundTime_Cask>

	Led7RoundTime_Stop();
 8000ebc:	f000 fa32 	bl	8001324 <Led7RoundTime_Stop>

	Led7RoundTime_PWM(PWM8);
 8000ec0:	2087      	movs	r0, #135	; 0x87
 8000ec2:	f000 fa57 	bl	8001374 <Led7RoundTime_PWM>

	//__enable_irq();
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	08008df4 	.word	0x08008df4

08000ed8 <Led7TurnTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7TurnTime_Start(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	TM1637_CLK1_ON;
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000ee4:	f005 f911 	bl	800610a <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8000ee8:	2111      	movs	r1, #17
 8000eea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eee:	f000 fa57 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO1_ON;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000efa:	f005 f906 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 fa82 	bl	8001408 <Delay_us>
	TM1637_DIO1_OFF;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4802      	ldr	r0, [pc, #8]	; (8000f14 <Led7TurnTime_Start+0x3c>)
 8000f0c:	f005 f8fd 	bl	800610a <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <Led7TurnTime_Write>:

static void Led7TurnTime_Write(unsigned char oneByte)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8000f22:	2111      	movs	r1, #17
 8000f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f28:	f000 fa3a 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e029      	b.n	8000f86 <Led7TurnTime_Write+0x6e>
	{
		TM1637_CLK1_OFF;
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f3a:	f005 f8e6 	bl	800610a <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <Led7TurnTime_Write+0x3e>
		{
		  TM1637_DIO1_ON;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f50:	f005 f8db 	bl	800610a <HAL_GPIO_WritePin>
 8000f54:	e005      	b.n	8000f62 <Led7TurnTime_Write+0x4a>
		}
		else
		{
		  TM1637_DIO1_OFF;
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f5e:	f005 f8d4 	bl	800610a <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 fa50 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK1_ON;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <Led7TurnTime_Write+0x80>)
 8000f76:	f005 f8c8 	bl	800610a <HAL_GPIO_WritePin>
		Delay_us(3);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fa44 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	ddd2      	ble.n	8000f32 <Led7TurnTime_Write+0x1a>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <Led7TurnTime_Cask>:

static uint8_t Led7TurnTime_Cask(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fa8:	f005 f8af 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(5); //
 8000fac:	2005      	movs	r0, #5
 8000fae:	f000 fa2b 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_INPUT);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fb8:	f000 f9f2 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO1_READ);
	if(TM1637_DIO1_READ)
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fc2:	f005 f88b 	bl	80060dc <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <Led7TurnTime_Cask+0x34>
		return 0xFF;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	e00f      	b.n	8000ff0 <Led7TurnTime_Cask+0x54>
	TM1637_CLK1_ON;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fd8:	f005 f897 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f000 fa13 	bl	8001408 <Delay_us>
	TM1637_CLK1_OFF;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <Led7TurnTime_Cask+0x58>)
 8000fea:	f005 f88e 	bl	800610a <HAL_GPIO_WritePin>
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <Led7TurnTime_Stop>:

static void Led7TurnTime_Stop(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001004:	f005 f881 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001008:	2002      	movs	r0, #2
 800100a:	f000 f9fd 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 800100e:	2111      	movs	r1, #17
 8001010:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001014:	f000 f9c4 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO1_OFF;
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001020:	f005 f873 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f9ef 	bl	8001408 <Delay_us>
	TM1637_CLK1_ON;
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001032:	f005 f86a 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f000 f9e6 	bl	8001408 <Delay_us>
	TM1637_DIO1_ON;
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <Led7TurnTime_Stop+0x54>)
 8001044:	f005 f861 	bl	800610a <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010c00 	.word	0x40010c00

08001050 <Led7TurnTime_PWM>:

static void Led7TurnTime_PWM(unsigned char PWM)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	Led7TurnTime_Start();
 800105a:	f7ff ff3d 	bl	8000ed8 <Led7TurnTime_Start>
	Led7TurnTime_Write(PWM | Dis_ON);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff56 	bl	8000f18 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 800106c:	f7ff ff96 	bl	8000f9c <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 8001070:	f7ff ffc2 	bl	8000ff8 <Led7TurnTime_Stop>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Led7HitCnt_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7HitCnt_Start(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	TM1637_CLK2_ON;
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 8001088:	f005 f83f 	bl	800610a <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 800108c:	2111      	movs	r1, #17
 800108e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001092:	f000 f985 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO2_ON;
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 800109e:	f005 f834 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f000 f9b0 	bl	8001408 <Delay_us>
	TM1637_DIO2_OFF;
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <Led7HitCnt_Start+0x3c>)
 80010b0:	f005 f82b 	bl	800610a <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010c00 	.word	0x40010c00

080010bc <Led7HitCnt_Write>:

static void Led7HitCnt_Write(unsigned char oneByte)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 80010c6:	2111      	movs	r1, #17
 80010c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010cc:	f000 f968 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e029      	b.n	800112a <Led7HitCnt_Write+0x6e>
	{
		TM1637_CLK2_OFF;
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010dc:	4817      	ldr	r0, [pc, #92]	; (800113c <Led7HitCnt_Write+0x80>)
 80010de:	f005 f814 	bl	800610a <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <Led7HitCnt_Write+0x3e>
		{
		  TM1637_DIO2_ON;
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f2:	4812      	ldr	r0, [pc, #72]	; (800113c <Led7HitCnt_Write+0x80>)
 80010f4:	f005 f809 	bl	800610a <HAL_GPIO_WritePin>
 80010f8:	e005      	b.n	8001106 <Led7HitCnt_Write+0x4a>
		}
		else
		{
		  TM1637_DIO2_OFF;
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <Led7HitCnt_Write+0x80>)
 8001102:	f005 f802 	bl	800610a <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 f97e 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK2_ON;
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <Led7HitCnt_Write+0x80>)
 800111a:	f004 fff6 	bl	800610a <HAL_GPIO_WritePin>
		Delay_us(3);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f972 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b07      	cmp	r3, #7
 800112e:	ddd2      	ble.n	80010d6 <Led7HitCnt_Write+0x1a>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010c00 	.word	0x40010c00

08001140 <Led7HitCnt_Cask>:

static uint8_t Led7HitCnt_Cask(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800114c:	f004 ffdd 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(5); //
 8001150:	2005      	movs	r0, #5
 8001152:	f000 f959 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_INPUT);
 8001156:	2100      	movs	r1, #0
 8001158:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800115c:	f000 f920 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO2_READ);
	if(TM1637_DIO2_READ)
 8001160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <Led7HitCnt_Cask+0x58>)
 8001166:	f004 ffb9 	bl	80060dc <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <Led7HitCnt_Cask+0x34>
		return 0xFF;
 8001170:	23ff      	movs	r3, #255	; 0xff
 8001172:	e00f      	b.n	8001194 <Led7HitCnt_Cask+0x54>
	TM1637_CLK2_ON;
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800117c:	f004 ffc5 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001180:	2002      	movs	r0, #2
 8001182:	f000 f941 	bl	8001408 <Delay_us>
	TM1637_CLK2_OFF;
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <Led7HitCnt_Cask+0x58>)
 800118e:	f004 ffbc 	bl	800610a <HAL_GPIO_WritePin>
	return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <Led7HitCnt_Stop>:

static void Led7HitCnt_Stop(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011a8:	f004 ffaf 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 f92b 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 80011b2:	2111      	movs	r1, #17
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f000 f8f2 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO2_OFF;
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011c4:	f004 ffa1 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 f91d 	bl	8001408 <Delay_us>
	TM1637_CLK2_ON;
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011d6:	f004 ff98 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 f914 	bl	8001408 <Delay_us>
	TM1637_DIO2_ON;
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <Led7HitCnt_Stop+0x54>)
 80011e8:	f004 ff8f 	bl	800610a <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <Led7HitCnt_PWM>:

static void Led7HitCnt_PWM(unsigned char PWM)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	Led7HitCnt_Start();
 80011fe:	f7ff ff3d 	bl	800107c <Led7HitCnt_Start>
	Led7HitCnt_Write(PWM | Dis_ON);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff56 	bl	80010bc <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8001210:	f7ff ff96 	bl	8001140 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8001214:	f7ff ffc2 	bl	800119c <Led7HitCnt_Stop>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Led7RoundTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7RoundTime_Start(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	TM1637_CLK3_ON;
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <Led7RoundTime_Start+0x34>)
 800122a:	f004 ff6e 	bl	800610a <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 800122e:	2111      	movs	r1, #17
 8001230:	2040      	movs	r0, #64	; 0x40
 8001232:	f000 f8b5 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO3_ON;
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <Led7RoundTime_Start+0x34>)
 800123c:	f004 ff65 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001240:	2002      	movs	r0, #2
 8001242:	f000 f8e1 	bl	8001408 <Delay_us>
	TM1637_DIO3_OFF;
 8001246:	2200      	movs	r2, #0
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <Led7RoundTime_Start+0x34>)
 800124c:	f004 ff5d 	bl	800610a <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010800 	.word	0x40010800

08001258 <Led7RoundTime_Write>:

static void Led7RoundTime_Write(unsigned char oneByte)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 8001262:	2111      	movs	r1, #17
 8001264:	2040      	movs	r0, #64	; 0x40
 8001266:	f000 f89b 	bl	80013a0 <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e025      	b.n	80012bc <Led7RoundTime_Write+0x64>
	{
		TM1637_CLK3_OFF;
 8001270:	2200      	movs	r2, #0
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	4815      	ldr	r0, [pc, #84]	; (80012cc <Led7RoundTime_Write+0x74>)
 8001276:	f004 ff48 	bl	800610a <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <Led7RoundTime_Write+0x38>
		{
		  TM1637_DIO3_ON;
 8001284:	2201      	movs	r2, #1
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <Led7RoundTime_Write+0x74>)
 800128a:	f004 ff3e 	bl	800610a <HAL_GPIO_WritePin>
 800128e:	e004      	b.n	800129a <Led7RoundTime_Write+0x42>
		}
		else
		{
		  TM1637_DIO3_OFF;
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <Led7RoundTime_Write+0x74>)
 8001296:	f004 ff38 	bl	800610a <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f8b4 	bl	8001408 <Delay_us>
		oneByte=oneByte>>1;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK3_ON;
 80012a6:	2201      	movs	r2, #1
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <Led7RoundTime_Write+0x74>)
 80012ac:	f004 ff2d 	bl	800610a <HAL_GPIO_WritePin>
		Delay_us(3);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f8a9 	bl	8001408 <Delay_us>
	for(int i=0;i<8;i++)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b07      	cmp	r3, #7
 80012c0:	ddd6      	ble.n	8001270 <Led7RoundTime_Write+0x18>
	}
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010800 	.word	0x40010800

080012d0 <Led7RoundTime_Cask>:

static uint8_t Led7RoundTime_Cask(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 80012d4:	2200      	movs	r2, #0
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <Led7RoundTime_Cask+0x50>)
 80012da:	f004 ff16 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(5); //
 80012de:	2005      	movs	r0, #5
 80012e0:	f000 f892 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_INPUT);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2040      	movs	r0, #64	; 0x40
 80012e8:	f000 f85a 	bl	80013a0 <TM1637_GPIO_INIT>
	//while(TM1637_DIO3_READ);
	if(TM1637_DIO3_READ)
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <Led7RoundTime_Cask+0x50>)
 80012f0:	f004 fef4 	bl	80060dc <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <Led7RoundTime_Cask+0x2e>
		return 0xFF;
 80012fa:	23ff      	movs	r3, #255	; 0xff
 80012fc:	e00d      	b.n	800131a <Led7RoundTime_Cask+0x4a>
	TM1637_CLK3_ON;
 80012fe:	2201      	movs	r2, #1
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <Led7RoundTime_Cask+0x50>)
 8001304:	f004 ff01 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f000 f87d 	bl	8001408 <Delay_us>
	TM1637_CLK3_OFF;
 800130e:	2200      	movs	r2, #0
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <Led7RoundTime_Cask+0x50>)
 8001314:	f004 fef9 	bl	800610a <HAL_GPIO_WritePin>
	return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010800 	.word	0x40010800

08001324 <Led7RoundTime_Stop>:

static void Led7RoundTime_Stop(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 8001328:	2200      	movs	r2, #0
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 800132e:	f004 feec 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f000 f868 	bl	8001408 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 8001338:	2111      	movs	r1, #17
 800133a:	2040      	movs	r0, #64	; 0x40
 800133c:	f000 f830 	bl	80013a0 <TM1637_GPIO_INIT>
	TM1637_DIO3_OFF;
 8001340:	2200      	movs	r2, #0
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001346:	f004 fee0 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 800134a:	2002      	movs	r0, #2
 800134c:	f000 f85c 	bl	8001408 <Delay_us>
	TM1637_CLK3_ON;
 8001350:	2201      	movs	r2, #1
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001356:	f004 fed8 	bl	800610a <HAL_GPIO_WritePin>
	Delay_us(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f000 f854 	bl	8001408 <Delay_us>
	TM1637_DIO3_ON;
 8001360:	2201      	movs	r2, #1
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <Led7RoundTime_Stop+0x4c>)
 8001366:	f004 fed0 	bl	800610a <HAL_GPIO_WritePin>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800

08001374 <Led7RoundTime_PWM>:

static void Led7RoundTime_PWM(unsigned char PWM)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	Led7RoundTime_Start();
 800137e:	f7ff ff4f 	bl	8001220 <Led7RoundTime_Start>
	Led7RoundTime_Write(PWM | Dis_ON);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff64 	bl	8001258 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8001390:	f7ff ff9e 	bl	80012d0 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 8001394:	f7ff ffc6 	bl	8001324 <Led7RoundTime_Stop>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <TM1637_GPIO_INIT>:


static void TM1637_GPIO_INIT(uint32_t Pin, uint32_t Mode)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = Pin;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = Mode;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	60fb      	str	r3, [r7, #12]
	if(Mode == GPIO_MODE_OUTPUT_OD){
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d102      	bne.n	80013cc <TM1637_GPIO_INIT+0x2c>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e001      	b.n	80013d0 <TM1637_GPIO_INIT+0x30>
	}
	else{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
	}
	if((Pin == IO1_Pin) || (Pin == IO2_Pin))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	d002      	beq.n	80013dc <TM1637_GPIO_INIT+0x3c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b80      	cmp	r3, #128	; 0x80
 80013da:	d106      	bne.n	80013ea <TM1637_GPIO_INIT+0x4a>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <TM1637_GPIO_INIT+0x60>)
 80013e4:	f004 fcf6 	bl	8005dd4 <HAL_GPIO_Init>
 80013e8:	e006      	b.n	80013f8 <TM1637_GPIO_INIT+0x58>
	else
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <TM1637_GPIO_INIT+0x64>)
 80013f2:	f004 fcef 	bl	8005dd4 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010800 	.word	0x40010800
 8001404:	40010c00 	.word	0x40010c00

08001408 <Delay_us>:

static void Delay_us(unsigned long us) //nus ??
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  while(us--)
 8001410:	e01a      	b.n	8001448 <Delay_us+0x40>
  {
    __ASM volatile ("nop");
 8001412:	bf00      	nop
    __ASM volatile ("nop");
 8001414:	bf00      	nop
    __ASM volatile ("nop");
 8001416:	bf00      	nop
    __ASM volatile ("nop");
 8001418:	bf00      	nop
    __ASM volatile ("nop");
 800141a:	bf00      	nop

    __ASM volatile ("nop");
 800141c:	bf00      	nop
    __ASM volatile ("nop");
 800141e:	bf00      	nop
    __ASM volatile ("nop");
 8001420:	bf00      	nop
    __ASM volatile ("nop");
 8001422:	bf00      	nop
    __ASM volatile ("nop");
 8001424:	bf00      	nop

    __ASM volatile ("nop");
 8001426:	bf00      	nop
    __ASM volatile ("nop");
 8001428:	bf00      	nop
    __ASM volatile ("nop");
 800142a:	bf00      	nop
    __ASM volatile ("nop");
 800142c:	bf00      	nop
    __ASM volatile ("nop");
 800142e:	bf00      	nop

    __ASM volatile ("nop");
 8001430:	bf00      	nop
    __ASM volatile ("nop");
 8001432:	bf00      	nop
    __ASM volatile ("nop");
 8001434:	bf00      	nop
    __ASM volatile ("nop");
 8001436:	bf00      	nop
    __ASM volatile ("nop");
 8001438:	bf00      	nop

    __ASM volatile ("nop");
 800143a:	bf00      	nop
    __ASM volatile ("nop");
 800143c:	bf00      	nop
    __ASM volatile ("nop");
 800143e:	bf00      	nop
    __ASM volatile ("nop");
 8001440:	bf00      	nop
    __ASM volatile ("nop");
 8001442:	bf00      	nop
    __ASM volatile ("nop");
 8001444:	bf00      	nop
    __ASM volatile ("nop");
 8001446:	bf00      	nop
  while(us--)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1df      	bne.n	8001412 <Delay_us+0xa>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <Task_Read_Cfg>:
static uint8_t get_next_user(uint8_t current_play);
static void update_rand_addr(void);

/* Public function -----------------------------------------------------------*/
void Task_Read_Cfg(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	Flash_Read_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 8001464:	2203      	movs	r2, #3
 8001466:	4912      	ldr	r1, [pc, #72]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <Task_Read_Cfg+0x54>)
 800146a:	f7ff fbbd 	bl	8000be8 <Flash_Read_Data>
	if(PlayCfg.Parameter.playing_mode == 0xFF)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d117      	bne.n	80014a6 <Task_Read_Cfg+0x46>
	{
		PlayCfg.Parameter.start_point = BEGIN_POINT;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001478:	221e      	movs	r2, #30
 800147a:	805a      	strh	r2, [r3, #2]
		PlayCfg.Parameter.turn_time_s = TURN_TIME_S;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <Task_Read_Cfg+0x50>)
 800147e:	222d      	movs	r2, #45	; 0x2d
 8001480:	809a      	strh	r2, [r3, #4]
		PlayCfg.Parameter.rount_time_s = ROUND_TIME_S;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001484:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001488:	80da      	strh	r2, [r3, #6]
		PlayCfg.Parameter.playing_mode = LAST_MODE;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <Task_Read_Cfg+0x50>)
 800148c:	2204      	movs	r2, #4
 800148e:	701a      	strb	r2, [r3, #0]
		PlayCfg.Parameter.startup_time_m = STARTUP_TIME_M;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001492:	223c      	movs	r2, #60	; 0x3c
 8001494:	705a      	strb	r2, [r3, #1]
		PlayCfg.Parameter.mode_signed = MODE_SIGN;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <Task_Read_Cfg+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	721a      	strb	r2, [r3, #8]
		Flash_Write_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 800149c:	2203      	movs	r2, #3
 800149e:	4904      	ldr	r1, [pc, #16]	; (80014b0 <Task_Read_Cfg+0x50>)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <Task_Read_Cfg+0x54>)
 80014a2:	f7ff fb45 	bl	8000b30 <Flash_Write_Data>
	}
	pCfg_1st_state_Flag = 1;
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <Task_Read_Cfg+0x58>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000d0 	.word	0x200000d0
 80014b4:	0801fc00 	.word	0x0801fc00
 80014b8:	20000017 	.word	0x20000017

080014bc <Task_Save_Cfg>:

void Task_Save_Cfg(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	Flash_Write_Data(USER_INFO_FLASH_ADDR, PlayCfg.paraBuffer, 3);
 80014c0:	2203      	movs	r2, #3
 80014c2:	4903      	ldr	r1, [pc, #12]	; (80014d0 <Task_Save_Cfg+0x14>)
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <Task_Save_Cfg+0x18>)
 80014c6:	f7ff fb33 	bl	8000b30 <Flash_Write_Data>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000d0 	.word	0x200000d0
 80014d4:	0801fc00 	.word	0x0801fc00

080014d8 <Task_Mode_Cfg>:

void Task_Mode_Cfg(void)
{
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
	static eUSER_CFG_STATE cfg_state_t = E_CFG_START_POINT;
	//static uint8_t pCfg_1st_state_Flag = 1;
	switch(cfg_state_t)
 80014de:	4baa      	ldr	r3, [pc, #680]	; (8001788 <Task_Mode_Cfg+0x2b0>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	f201 8026 	bhi.w	8002534 <Task_Mode_Cfg+0x105c>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <Task_Mode_Cfg+0x18>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	08001891 	.word	0x08001891
 80014f8:	08001d29 	.word	0x08001d29
 80014fc:	080020ef 	.word	0x080020ef
	{
		case E_CFG_START_POINT:
		{
			if(pCfg_1st_state_Flag){
 8001500:	4ba2      	ldr	r3, [pc, #648]	; (800178c <Task_Mode_Cfg+0x2b4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d02c      	beq.n	8001562 <Task_Mode_Cfg+0x8a>
				pCfg_1st_state_Flag = 0;
 8001508:	4ba0      	ldr	r3, [pc, #640]	; (800178c <Task_Mode_Cfg+0x2b4>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
				//Send Display and Blink Start point
				Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 800150e:	4ba0      	ldr	r3, [pc, #640]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 8001510:	885b      	ldrh	r3, [r3, #2]
 8001512:	4aa0      	ldr	r2, [pc, #640]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	095b      	lsrs	r3, r3, #5
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2d8      	uxtb	r0, r3
 800151e:	4b9c      	ldr	r3, [pc, #624]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 8001520:	885b      	ldrh	r3, [r3, #2]
 8001522:	4a9c      	ldr	r2, [pc, #624]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 8001524:	fba2 1203 	umull	r1, r2, r2, r3
 8001528:	0952      	lsrs	r2, r2, #5
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	4a98      	ldr	r2, [pc, #608]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2dc      	uxtb	r4, r3
 8001540:	4b93      	ldr	r3, [pc, #588]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 8001542:	885a      	ldrh	r2, [r3, #2]
 8001544:	4b94      	ldr	r3, [pc, #592]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 8001546:	fba3 1302 	umull	r1, r3, r3, r2
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4621      	mov	r1, r4
 800155e:	f002 fee7 	bl	8004330 <Task_Led_StartPoint>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	488d      	ldr	r0, [pc, #564]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001566:	f004 fdb9 	bl	80060dc <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <Task_Mode_Cfg+0xa4>
 8001570:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <Task_Mode_Cfg+0x2c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <Task_Mode_Cfg+0x2cc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	f040 8081 	bne.w	800167e <Task_Mode_Cfg+0x1a6>
				delay_ms((int)BUTTON_DELAY);
 800157c:	2014      	movs	r0, #20
 800157e:	f003 f943 	bl	8004808 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	4885      	ldr	r0, [pc, #532]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001586:	f004 fda9 	bl	80060dc <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d005      	beq.n	800159c <Task_Mode_Cfg+0xc4>
 8001590:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <Task_Mode_Cfg+0x2c8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <Task_Mode_Cfg+0x2cc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	f040 8177 	bne.w	800188a <Task_Mode_Cfg+0x3b2>
					IRcode = 0;
 800159c:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <Task_Mode_Cfg+0x2c8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 80015a2:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <Task_Mode_Cfg+0x2d0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 80015a8:	4b80      	ldr	r3, [pc, #512]	; (80017ac <Task_Mode_Cfg+0x2d4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.start_point<99)
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015b0:	885b      	ldrh	r3, [r3, #2]
 80015b2:	2b62      	cmp	r3, #98	; 0x62
 80015b4:	d805      	bhi.n	80015c2 <Task_Mode_Cfg+0xea>
						PlayCfg.Parameter.start_point++;
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b74      	ldr	r3, [pc, #464]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015c0:	805a      	strh	r2, [r3, #2]
					//Update Display
					Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80015c2:	4b73      	ldr	r3, [pc, #460]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015c4:	885b      	ldrh	r3, [r3, #2]
 80015c6:	4a73      	ldr	r2, [pc, #460]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015d4:	885b      	ldrh	r3, [r3, #2]
 80015d6:	4a6f      	ldr	r2, [pc, #444]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 80015d8:	fba2 1203 	umull	r1, r2, r2, r3
 80015dc:	0952      	lsrs	r2, r2, #5
 80015de:	2164      	movs	r1, #100	; 0x64
 80015e0:	fb01 f202 	mul.w	r2, r1, r2
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2dc      	uxtb	r4, r3
 80015f4:	4b66      	ldr	r3, [pc, #408]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80015f6:	885a      	ldrh	r2, [r3, #2]
 80015f8:	4b67      	ldr	r3, [pc, #412]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 80015fa:	fba3 1302 	umull	r1, r3, r3, r2
 80015fe:	08d9      	lsrs	r1, r3, #3
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4621      	mov	r1, r4
 8001612:	f002 fe8d 	bl	8004330 <Task_Led_StartPoint>
					buzzer_stt = 1;
 8001616:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <Task_Mode_Cfg+0x2d8>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 800161c:	e01a      	b.n	8001654 <Task_Mode_Cfg+0x17c>
					{
						button_cnt_t++;
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001628:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b1e      	cmp	r3, #30
 8001630:	d90d      	bls.n	800164e <Task_Mode_Cfg+0x176>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	00da      	lsls	r2, r3, #3
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	210a      	movs	r1, #10
 8001648:	200a      	movs	r0, #10
 800164a:	f7ff faeb 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 800164e:	2064      	movs	r0, #100	; 0x64
 8001650:	f003 f8da 	bl	8004808 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	4851      	ldr	r0, [pc, #324]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001658:	f004 fd40 	bl	80060dc <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d0dd      	beq.n	800161e <Task_Mode_Cfg+0x146>
					}
					if(button_cnt_t > 30)
 8001662:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b1e      	cmp	r3, #30
 8001668:	d905      	bls.n	8001676 <Task_Mode_Cfg+0x19e>
						Led7TurnTime_Display(10, 10, 0, 0);
 800166a:	2300      	movs	r3, #0
 800166c:	2200      	movs	r2, #0
 800166e:	210a      	movs	r1, #10
 8001670:	200a      	movs	r0, #10
 8001672:	f7ff fad7 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001678:	2200      	movs	r2, #0
 800167a:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 800167c:	e105      	b.n	800188a <Task_Mode_Cfg+0x3b2>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 800167e:	2120      	movs	r1, #32
 8001680:	4846      	ldr	r0, [pc, #280]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001682:	f004 fd2b 	bl	80060dc <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 8095 	bne.w	80017b8 <Task_Mode_Cfg+0x2e0>
				delay_ms((int)BUTTON_DELAY);
 800168e:	2014      	movs	r0, #20
 8001690:	f003 f8ba 	bl	8004808 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001694:	2120      	movs	r1, #32
 8001696:	4841      	ldr	r0, [pc, #260]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001698:	f004 fd20 	bl	80060dc <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 8741 	bne.w	8002526 <Task_Mode_Cfg+0x104e>
					IRcode = 0;
 80016a4:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <Task_Mode_Cfg+0x2c8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <Task_Mode_Cfg+0x2d0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <Task_Mode_Cfg+0x2d4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.start_point > 0)
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <Task_Mode_Cfg+0x1f2>
						PlayCfg.Parameter.start_point--;
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016c0:	885b      	ldrh	r3, [r3, #2]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016c8:	805a      	strh	r2, [r3, #2]
					//Update Display
					Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016cc:	885b      	ldrh	r3, [r3, #2]
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	095b      	lsrs	r3, r3, #5
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2d8      	uxtb	r0, r3
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016dc:	885b      	ldrh	r3, [r3, #2]
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <Task_Mode_Cfg+0x2bc>)
 80016e0:	fba2 1203 	umull	r1, r2, r2, r3
 80016e4:	0952      	lsrs	r2, r2, #5
 80016e6:	2164      	movs	r1, #100	; 0x64
 80016e8:	fb01 f202 	mul.w	r2, r1, r2
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4a29      	ldr	r2, [pc, #164]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2dc      	uxtb	r4, r3
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <Task_Mode_Cfg+0x2b8>)
 80016fe:	885a      	ldrh	r2, [r3, #2]
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <Task_Mode_Cfg+0x2c0>)
 8001702:	fba3 1302 	umull	r1, r3, r3, r2
 8001706:	08d9      	lsrs	r1, r3, #3
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4621      	mov	r1, r4
 800171a:	f002 fe09 	bl	8004330 <Task_Led_StartPoint>
					buzzer_stt = 1;
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <Task_Mode_Cfg+0x2d8>)
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001724:	e01a      	b.n	800175c <Task_Mode_Cfg+0x284>
					{
						button_cnt_t++;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001730:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	2b1e      	cmp	r3, #30
 8001738:	d90d      	bls.n	8001756 <Task_Mode_Cfg+0x27e>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	00da      	lsls	r2, r3, #3
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	210a      	movs	r1, #10
 8001750:	200a      	movs	r0, #10
 8001752:	f7ff fa67 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001756:	2064      	movs	r0, #100	; 0x64
 8001758:	f003 f856 	bl	8004808 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 800175c:	2120      	movs	r1, #32
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <Task_Mode_Cfg+0x2c4>)
 8001760:	f004 fcbc 	bl	80060dc <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d0dd      	beq.n	8001726 <Task_Mode_Cfg+0x24e>
					}
					if(button_cnt_t > 30)
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2b1e      	cmp	r3, #30
 8001770:	d905      	bls.n	800177e <Task_Mode_Cfg+0x2a6>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001772:	2300      	movs	r3, #0
 8001774:	2200      	movs	r2, #0
 8001776:	210a      	movs	r1, #10
 8001778:	200a      	movs	r0, #10
 800177a:	f7ff fa53 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <Task_Mode_Cfg+0x2dc>)
 8001780:	2200      	movs	r2, #0
 8001782:	801a      	strh	r2, [r3, #0]
//			else if((IRcode != 0) || (tempCode != 0) || (bitIndex != 0)){
//				IRcode = 0;
//				tempCode = 0;
//				bitIndex = 0;
//			}
			break;
 8001784:	f000 becf 	b.w	8002526 <Task_Mode_Cfg+0x104e>
 8001788:	20000131 	.word	0x20000131
 800178c:	20000017 	.word	0x20000017
 8001790:	200000d0 	.word	0x200000d0
 8001794:	51eb851f 	.word	0x51eb851f
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	200000c8 	.word	0x200000c8
 80017a4:	00910910 	.word	0x00910910
 80017a8:	20000210 	.word	0x20000210
 80017ac:	20000214 	.word	0x20000214
 80017b0:	20000016 	.word	0x20000016
 80017b4:	200000cc 	.word	0x200000cc
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	489e      	ldr	r0, [pc, #632]	; (8001a34 <Task_Mode_Cfg+0x55c>)
 80017bc:	f004 fc8e 	bl	80060dc <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <Task_Mode_Cfg+0x2fa>
 80017c6:	4b9c      	ldr	r3, [pc, #624]	; (8001a38 <Task_Mode_Cfg+0x560>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a9c      	ldr	r2, [pc, #624]	; (8001a3c <Task_Mode_Cfg+0x564>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 86aa 	bne.w	8002526 <Task_Mode_Cfg+0x104e>
				delay_ms((int)BUTTON_DELAY);
 80017d2:	2014      	movs	r0, #20
 80017d4:	f003 f818 	bl	8004808 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4896      	ldr	r0, [pc, #600]	; (8001a34 <Task_Mode_Cfg+0x55c>)
 80017dc:	f004 fc7e 	bl	80060dc <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <Task_Mode_Cfg+0x31a>
 80017e6:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <Task_Mode_Cfg+0x560>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a94      	ldr	r2, [pc, #592]	; (8001a3c <Task_Mode_Cfg+0x564>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f040 869a 	bne.w	8002526 <Task_Mode_Cfg+0x104e>
					IRcode = 0;
 80017f2:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <Task_Mode_Cfg+0x560>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 80017f8:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <Task_Mode_Cfg+0x568>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <Task_Mode_Cfg+0x56c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
					cfg_state_t++;
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <Task_Mode_Cfg+0x570>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <Task_Mode_Cfg+0x570>)
 800180e:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <Task_Mode_Cfg+0x574>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
					Task_Led_StartPoint(12, 12, 12);
 8001816:	220c      	movs	r2, #12
 8001818:	210c      	movs	r1, #12
 800181a:	200c      	movs	r0, #12
 800181c:	f002 fd88 	bl	8004330 <Task_Led_StartPoint>
					buzzer_stt = 1;
 8001820:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <Task_Mode_Cfg+0x578>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001826:	e01a      	b.n	800185e <Task_Mode_Cfg+0x386>
						button_cnt_t++;
 8001828:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 8001832:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001834:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	2b1e      	cmp	r3, #30
 800183a:	d90d      	bls.n	8001858 <Task_Mode_Cfg+0x380>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 800183c:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	210a      	movs	r1, #10
 8001852:	200a      	movs	r0, #10
 8001854:	f7ff f9e6 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f002 ffd5 	bl	8004808 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	4874      	ldr	r0, [pc, #464]	; (8001a34 <Task_Mode_Cfg+0x55c>)
 8001862:	f004 fc3b 	bl	80060dc <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d0dd      	beq.n	8001828 <Task_Mode_Cfg+0x350>
					if(button_cnt_t > 30)
 800186c:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2b1e      	cmp	r3, #30
 8001872:	d905      	bls.n	8001880 <Task_Mode_Cfg+0x3a8>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001874:	2300      	movs	r3, #0
 8001876:	2200      	movs	r2, #0
 8001878:	210a      	movs	r1, #10
 800187a:	200a      	movs	r0, #10
 800187c:	f7ff f9d2 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001880:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <Task_Mode_Cfg+0x57c>)
 8001882:	2200      	movs	r2, #0
 8001884:	801a      	strh	r2, [r3, #0]
			break;
 8001886:	f000 be4e 	b.w	8002526 <Task_Mode_Cfg+0x104e>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 800188a:	bf00      	nop
			break;
 800188c:	f000 be4b 	b.w	8002526 <Task_Mode_Cfg+0x104e>
		}
		case E_CFG_ROUNDTIME_M:
		{
			if(pCfg_1st_state_Flag){
 8001890:	4b6e      	ldr	r3, [pc, #440]	; (8001a4c <Task_Mode_Cfg+0x574>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d04c      	beq.n	8001932 <Task_Mode_Cfg+0x45a>
				pCfg_1st_state_Flag = 0;
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <Task_Mode_Cfg+0x574>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

				//Send Display and Blink Start point
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 800189e:	4b6e      	ldr	r3, [pc, #440]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80018a0:	88db      	ldrh	r3, [r3, #6]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <Task_Mode_Cfg+0x584>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
									  (PlayCfg.Parameter.rount_time_s/60)%10,
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80018b0:	88db      	ldrh	r3, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80018b2:	4a6b      	ldr	r2, [pc, #428]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80018be:	fba3 1302 	umull	r1, r3, r3, r2
 80018c2:	08d9      	lsrs	r1, r3, #3
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461c      	mov	r4, r3
									  (PlayCfg.Parameter.rount_time_s%60)/10,
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80018d4:	88da      	ldrh	r2, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80018d8:	fba3 1302 	umull	r1, r3, r3, r2
 80018dc:	0959      	lsrs	r1, r3, #5
 80018de:	460b      	mov	r3, r1
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a5b      	subs	r3, r3, r1
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461d      	mov	r5, r3
									  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80018f8:	88da      	ldrh	r2, [r3, #6]
				Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80018fa:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80018fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001900:	0959      	lsrs	r1, r3, #5
 8001902:	460b      	mov	r3, r1
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 8001910:	fba3 1302 	umull	r1, r3, r3, r2
 8001914:	08d9      	lsrs	r1, r3, #3
 8001916:	460b      	mov	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	2301      	movs	r3, #1
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	462a      	mov	r2, r5
 800192c:	4621      	mov	r1, r4
 800192e:	f7ff fa5d 	bl	8000dec <Led7RoundTime_Display>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	483f      	ldr	r0, [pc, #252]	; (8001a34 <Task_Mode_Cfg+0x55c>)
 8001936:	f004 fbd1 	bl	80060dc <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b01      	cmp	r3, #1
 800193e:	d005      	beq.n	800194c <Task_Mode_Cfg+0x474>
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <Task_Mode_Cfg+0x560>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <Task_Mode_Cfg+0x590>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f040 80c0 	bne.w	8001acc <Task_Mode_Cfg+0x5f4>
				delay_ms((int)BUTTON_DELAY);
 800194c:	2014      	movs	r0, #20
 800194e:	f002 ff5b 	bl	8004808 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	4837      	ldr	r0, [pc, #220]	; (8001a34 <Task_Mode_Cfg+0x55c>)
 8001956:	f004 fbc1 	bl	80060dc <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <Task_Mode_Cfg+0x494>
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <Task_Mode_Cfg+0x560>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <Task_Mode_Cfg+0x590>)
 8001966:	4293      	cmp	r3, r2
 8001968:	f040 81c1 	bne.w	8001cee <Task_Mode_Cfg+0x816>
					IRcode = 0;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <Task_Mode_Cfg+0x560>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <Task_Mode_Cfg+0x568>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <Task_Mode_Cfg+0x56c>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
					if(((PlayCfg.Parameter.rount_time_s+10)/60) < 99)
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <Task_Mode_Cfg+0x580>)
 8001980:	88db      	ldrh	r3, [r3, #6]
 8001982:	f241 7229 	movw	r2, #5929	; 0x1729
 8001986:	4293      	cmp	r3, r2
 8001988:	d805      	bhi.n	8001996 <Task_Mode_Cfg+0x4be>
						PlayCfg.Parameter.rount_time_s+=10;
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <Task_Mode_Cfg+0x580>)
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	330a      	adds	r3, #10
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <Task_Mode_Cfg+0x580>)
 8001994:	80da      	strh	r2, [r3, #6]
					//Update Display
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <Task_Mode_Cfg+0x580>)
 8001998:	88db      	ldrh	r3, [r3, #6]
 800199a:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <Task_Mode_Cfg+0x584>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
										  (PlayCfg.Parameter.rount_time_s/60)%10,
 80019a6:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80019a8:	88db      	ldrh	r3, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80019b6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ba:	08d9      	lsrs	r1, r3, #3
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461c      	mov	r4, r3
										  (PlayCfg.Parameter.rount_time_s%60)/10,
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80019cc:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80019d0:	fba3 1302 	umull	r1, r3, r3, r2
 80019d4:	0959      	lsrs	r1, r3, #5
 80019d6:	460b      	mov	r3, r1
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461d      	mov	r5, r3
										  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <Task_Mode_Cfg+0x580>)
 80019f0:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <Task_Mode_Cfg+0x588>)
 80019f4:	fba3 1302 	umull	r1, r3, r3, r2
 80019f8:	0959      	lsrs	r1, r3, #5
 80019fa:	460b      	mov	r3, r1
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a5b      	subs	r3, r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <Task_Mode_Cfg+0x58c>)
 8001a08:	fba3 1302 	umull	r1, r3, r3, r2
 8001a0c:	08d9      	lsrs	r1, r3, #3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	462a      	mov	r2, r5
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f9e1 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <Task_Mode_Cfg+0x578>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001a30:	e037      	b.n	8001aa2 <Task_Mode_Cfg+0x5ca>
 8001a32:	bf00      	nop
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	200000c8 	.word	0x200000c8
 8001a3c:	00904904 	.word	0x00904904
 8001a40:	20000210 	.word	0x20000210
 8001a44:	20000214 	.word	0x20000214
 8001a48:	20000131 	.word	0x20000131
 8001a4c:	20000017 	.word	0x20000017
 8001a50:	20000016 	.word	0x20000016
 8001a54:	200000cc 	.word	0x200000cc
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	1b4e81b5 	.word	0x1b4e81b5
 8001a60:	88888889 	.word	0x88888889
 8001a64:	cccccccd 	.word	0xcccccccd
 8001a68:	00910910 	.word	0x00910910
					{
						button_cnt_t++;
 8001a6c:	4ba1      	ldr	r3, [pc, #644]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b9f      	ldr	r3, [pc, #636]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001a76:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001a78:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	2b1e      	cmp	r3, #30
 8001a7e:	d90d      	bls.n	8001a9c <Task_Mode_Cfg+0x5c4>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001a80:	4b9c      	ldr	r3, [pc, #624]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	00da      	lsls	r2, r3, #3
 8001a8a:	4b9a      	ldr	r3, [pc, #616]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	210a      	movs	r1, #10
 8001a96:	200a      	movs	r0, #10
 8001a98:	f7ff f8c4 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001a9c:	2064      	movs	r0, #100	; 0x64
 8001a9e:	f002 feb3 	bl	8004808 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	4894      	ldr	r0, [pc, #592]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001aa6:	f004 fb19 	bl	80060dc <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d0dd      	beq.n	8001a6c <Task_Mode_Cfg+0x594>
					}
					if(button_cnt_t > 30)
 8001ab0:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2b1e      	cmp	r3, #30
 8001ab6:	d905      	bls.n	8001ac4 <Task_Mode_Cfg+0x5ec>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2200      	movs	r2, #0
 8001abc:	210a      	movs	r1, #10
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f7ff f8b0 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001ac4:	4b8b      	ldr	r3, [pc, #556]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001aca:	e110      	b.n	8001cee <Task_Mode_Cfg+0x816>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001acc:	2120      	movs	r1, #32
 8001ace:	488a      	ldr	r0, [pc, #552]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001ad0:	f004 fb04 	bl	80060dc <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 809d 	bne.w	8001c16 <Task_Mode_Cfg+0x73e>
				delay_ms((int)BUTTON_DELAY);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f002 fe93 	bl	8004808 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	4884      	ldr	r0, [pc, #528]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001ae6:	f004 faf9 	bl	80060dc <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	f040 851c 	bne.w	800252a <Task_Mode_Cfg+0x1052>
					IRcode = 0;
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <Task_Mode_Cfg+0x824>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <Task_Mode_Cfg+0x828>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <Task_Mode_Cfg+0x82c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.rount_time_s >= 10)
 8001b04:	4b80      	ldr	r3, [pc, #512]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b06:	88db      	ldrh	r3, [r3, #6]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d905      	bls.n	8001b18 <Task_Mode_Cfg+0x640>
						PlayCfg.Parameter.rount_time_s-=10;
 8001b0c:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b0e:	88db      	ldrh	r3, [r3, #6]
 8001b10:	3b0a      	subs	r3, #10
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b16:	80da      	strh	r2, [r3, #6]
					//Update Display
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b18:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b1a:	88db      	ldrh	r3, [r3, #6]
 8001b1c:	4a7b      	ldr	r2, [pc, #492]	; (8001d0c <Task_Mode_Cfg+0x834>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
										  (PlayCfg.Parameter.rount_time_s/60)%10,
 8001b28:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b2a:	88db      	ldrh	r3, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b2c:	4a78      	ldr	r2, [pc, #480]	; (8001d10 <Task_Mode_Cfg+0x838>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <Task_Mode_Cfg+0x83c>)
 8001b38:	fba3 1302 	umull	r1, r3, r3, r2
 8001b3c:	08d9      	lsrs	r1, r3, #3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461c      	mov	r4, r3
										  (PlayCfg.Parameter.rount_time_s%60)/10,
 8001b4c:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b4e:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <Task_Mode_Cfg+0x838>)
 8001b52:	fba3 1302 	umull	r1, r3, r3, r2
 8001b56:	0959      	lsrs	r1, r3, #5
 8001b58:	460b      	mov	r3, r1
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a5b      	subs	r3, r3, r1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <Task_Mode_Cfg+0x83c>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461d      	mov	r5, r3
										  (PlayCfg.Parameter.rount_time_s%60)%10, 1);
 8001b70:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <Task_Mode_Cfg+0x830>)
 8001b72:	88da      	ldrh	r2, [r3, #6]
					Led7RoundTime_Display((PlayCfg.Parameter.rount_time_s/60)/10,
 8001b74:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <Task_Mode_Cfg+0x838>)
 8001b76:	fba3 1302 	umull	r1, r3, r3, r2
 8001b7a:	0959      	lsrs	r1, r3, #5
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a5b      	subs	r3, r3, r1
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <Task_Mode_Cfg+0x83c>)
 8001b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b8e:	08d9      	lsrs	r1, r3, #3
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f7ff f920 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 8001bac:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <Task_Mode_Cfg+0x840>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001bb2:	e01a      	b.n	8001bea <Task_Mode_Cfg+0x712>
					{
						button_cnt_t++;
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bbe:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b1e      	cmp	r3, #30
 8001bc6:	d90d      	bls.n	8001be4 <Task_Mode_Cfg+0x70c>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	00da      	lsls	r2, r3, #3
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	210a      	movs	r1, #10
 8001bde:	200a      	movs	r0, #10
 8001be0:	f7ff f820 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f002 fe0f 	bl	8004808 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001bea:	2120      	movs	r1, #32
 8001bec:	4842      	ldr	r0, [pc, #264]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001bee:	f004 fa75 	bl	80060dc <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d0dd      	beq.n	8001bb4 <Task_Mode_Cfg+0x6dc>
					}
					if(button_cnt_t > 30)
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b1e      	cmp	r3, #30
 8001bfe:	d905      	bls.n	8001c0c <Task_Mode_Cfg+0x734>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001c00:	2300      	movs	r3, #0
 8001c02:	2200      	movs	r2, #0
 8001c04:	210a      	movs	r1, #10
 8001c06:	200a      	movs	r0, #10
 8001c08:	f7ff f80c 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
//			else if((IRcode != 0) || (tempCode != 0) || (bitIndex != 0)){
//				IRcode = 0;
//				tempCode = 0;
//				bitIndex = 0;
//			}
			break;
 8001c12:	f000 bc8a 	b.w	800252a <Task_Mode_Cfg+0x1052>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	4837      	ldr	r0, [pc, #220]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001c1a:	f004 fa5f 	bl	80060dc <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <Task_Mode_Cfg+0x758>
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <Task_Mode_Cfg+0x824>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <Task_Mode_Cfg+0x844>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	f040 847d 	bne.w	800252a <Task_Mode_Cfg+0x1052>
				delay_ms((int)BUTTON_DELAY);
 8001c30:	2014      	movs	r0, #20
 8001c32:	f002 fde9 	bl	8004808 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	482f      	ldr	r0, [pc, #188]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001c3a:	f004 fa4f 	bl	80060dc <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d005      	beq.n	8001c50 <Task_Mode_Cfg+0x778>
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <Task_Mode_Cfg+0x824>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <Task_Mode_Cfg+0x844>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	f040 846d 	bne.w	800252a <Task_Mode_Cfg+0x1052>
					IRcode = 0;
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <Task_Mode_Cfg+0x824>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <Task_Mode_Cfg+0x828>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <Task_Mode_Cfg+0x82c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
					cfg_state_t++;
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <Task_Mode_Cfg+0x848>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <Task_Mode_Cfg+0x848>)
 8001c6c:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <Task_Mode_Cfg+0x84c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
					Led7RoundTime_Display(10, 10, 10, 10, 0);
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	230a      	movs	r3, #10
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f7ff f8b4 	bl	8000dec <Led7RoundTime_Display>
					buzzer_stt = 1;
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <Task_Mode_Cfg+0x840>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001c8a:	e01a      	b.n	8001cc2 <Task_Mode_Cfg+0x7ea>
						button_cnt_t++;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001c96:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2b1e      	cmp	r3, #30
 8001c9e:	d90d      	bls.n	8001cbc <Task_Mode_Cfg+0x7e4>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	00da      	lsls	r2, r3, #3
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	210a      	movs	r1, #10
 8001cb6:	200a      	movs	r0, #10
 8001cb8:	f7fe ffb4 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 8001cbc:	2064      	movs	r0, #100	; 0x64
 8001cbe:	f002 fda3 	bl	8004808 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <Task_Mode_Cfg+0x820>)
 8001cc6:	f004 fa09 	bl	80060dc <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d0dd      	beq.n	8001c8c <Task_Mode_Cfg+0x7b4>
					if(button_cnt_t > 30)
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b1e      	cmp	r3, #30
 8001cd6:	d905      	bls.n	8001ce4 <Task_Mode_Cfg+0x80c>
						Led7TurnTime_Display(10, 10, 0, 0);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	210a      	movs	r1, #10
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f7fe ffa0 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <Task_Mode_Cfg+0x81c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
			break;
 8001cea:	f000 bc1e 	b.w	800252a <Task_Mode_Cfg+0x1052>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001cee:	bf00      	nop
			break;
 8001cf0:	f000 bc1b 	b.w	800252a <Task_Mode_Cfg+0x1052>
 8001cf4:	200000cc 	.word	0x200000cc
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	200000c8 	.word	0x200000c8
 8001d00:	20000210 	.word	0x20000210
 8001d04:	20000214 	.word	0x20000214
 8001d08:	200000d0 	.word	0x200000d0
 8001d0c:	1b4e81b5 	.word	0x1b4e81b5
 8001d10:	88888889 	.word	0x88888889
 8001d14:	cccccccd 	.word	0xcccccccd
 8001d18:	20000016 	.word	0x20000016
 8001d1c:	00904904 	.word	0x00904904
 8001d20:	20000131 	.word	0x20000131
 8001d24:	20000017 	.word	0x20000017
		}
		case E_CFG_TURNTIME_S:
		{
			if(pCfg_1st_state_Flag){
 8001d28:	4b86      	ldr	r3, [pc, #536]	; (8001f44 <Task_Mode_Cfg+0xa6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <Task_Mode_Cfg+0x890>
				pCfg_1st_state_Flag = 0;
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <Task_Mode_Cfg+0xa6c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
				//Send Display and Blink Start point
				Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001d36:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	4a84      	ldr	r2, [pc, #528]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001d48:	889a      	ldrh	r2, [r3, #4]
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d50:	08d9      	lsrs	r1, r3, #3
 8001d52:	460b      	mov	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	2200      	movs	r2, #0
 8001d64:	f7fe ff5e 	bl	8000c24 <Led7TurnTime_Display>
			}

			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	4879      	ldr	r0, [pc, #484]	; (8001f50 <Task_Mode_Cfg+0xa78>)
 8001d6c:	f004 f9b6 	bl	80060dc <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <Task_Mode_Cfg+0x8aa>
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <Task_Mode_Cfg+0xa7c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a77      	ldr	r2, [pc, #476]	; (8001f58 <Task_Mode_Cfg+0xa80>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f040 809a 	bne.w	8001eb6 <Task_Mode_Cfg+0x9de>
				delay_ms((int)BUTTON_DELAY);
 8001d82:	2014      	movs	r0, #20
 8001d84:	f002 fd40 	bl	8004808 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	4871      	ldr	r0, [pc, #452]	; (8001f50 <Task_Mode_Cfg+0xa78>)
 8001d8c:	f004 f9a6 	bl	80060dc <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d005      	beq.n	8001da2 <Task_Mode_Cfg+0x8ca>
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <Task_Mode_Cfg+0xa7c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6f      	ldr	r2, [pc, #444]	; (8001f58 <Task_Mode_Cfg+0xa80>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f040 81a4 	bne.w	80020ea <Task_Mode_Cfg+0xc12>
					IRcode = 0;
 8001da2:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <Task_Mode_Cfg+0xa7c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <Task_Mode_Cfg+0xa84>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8001dae:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <Task_Mode_Cfg+0xa88>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.turn_time_s < 99)
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001db6:	889b      	ldrh	r3, [r3, #4]
 8001db8:	2b62      	cmp	r3, #98	; 0x62
 8001dba:	d806      	bhi.n	8001dca <Task_Mode_Cfg+0x8f2>
						PlayCfg.Parameter.turn_time_s++;
 8001dbc:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001dc6:	809a      	strh	r2, [r3, #4]
 8001dc8:	e002      	b.n	8001dd0 <Task_Mode_Cfg+0x8f8>
					else
						PlayCfg.Parameter.turn_time_s = 0;
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	809a      	strh	r2, [r3, #4]
					//Update Display
					Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001de2:	889a      	ldrh	r2, [r3, #4]
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001de6:	fba3 1302 	umull	r1, r3, r3, r2
 8001dea:	08d9      	lsrs	r1, r3, #3
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f7fe ff11 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8001e02:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <Task_Mode_Cfg+0xa8c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001e08:	e02d      	b.n	8001e66 <Task_Mode_Cfg+0x98e>
					{
						button_cnt_t++;
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e14:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b1e      	cmp	r3, #30
 8001e1c:	d920      	bls.n	8001e60 <Task_Mode_Cfg+0x988>

							Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001e30:	889a      	ldrh	r2, [r3, #4]
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	08d9      	lsrs	r1, r3, #3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	00da      	lsls	r2, r3, #3
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f7fe fee2 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	f002 fcd1 	bl	8004808 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	4839      	ldr	r0, [pc, #228]	; (8001f50 <Task_Mode_Cfg+0xa78>)
 8001e6a:	f004 f937 	bl	80060dc <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d0ca      	beq.n	8001e0a <Task_Mode_Cfg+0x932>
					}
					if(button_cnt_t > 30)
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	2b1e      	cmp	r3, #30
 8001e7a:	d918      	bls.n	8001eae <Task_Mode_Cfg+0x9d6>
						Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001e7c:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001e7e:	889b      	ldrh	r3, [r3, #4]
 8001e80:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001e8e:	889a      	ldrh	r2, [r3, #4]
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001e92:	fba3 1302 	umull	r1, r3, r3, r2
 8001e96:	08d9      	lsrs	r1, r3, #3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f7fe febb 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <Task_Mode_Cfg+0xa90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8001eb4:	e119      	b.n	80020ea <Task_Mode_Cfg+0xc12>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	4825      	ldr	r0, [pc, #148]	; (8001f50 <Task_Mode_Cfg+0xa78>)
 8001eba:	f004 f90f 	bl	80060dc <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 80a9 	bne.w	8002018 <Task_Mode_Cfg+0xb40>
				delay_ms((int)BUTTON_DELAY);
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f002 fc9e 	bl	8004808 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8001ecc:	2120      	movs	r1, #32
 8001ece:	4820      	ldr	r0, [pc, #128]	; (8001f50 <Task_Mode_Cfg+0xa78>)
 8001ed0:	f004 f904 	bl	80060dc <HAL_GPIO_ReadPin>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f040 8329 	bne.w	800252e <Task_Mode_Cfg+0x1056>
					IRcode = 0;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <Task_Mode_Cfg+0xa7c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <Task_Mode_Cfg+0xa84>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <Task_Mode_Cfg+0xa88>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.turn_time_s > 0)
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <Task_Mode_Cfg+0xa2c>
						PlayCfg.Parameter.turn_time_s--;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001f00:	809a      	strh	r2, [r3, #4]
 8001f02:	e002      	b.n	8001f0a <Task_Mode_Cfg+0xa32>
					else
						PlayCfg.Parameter.turn_time_s = 99;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001f06:	2263      	movs	r2, #99	; 0x63
 8001f08:	809a      	strh	r2, [r3, #4]
					//Update Display
					Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <Task_Mode_Cfg+0xa70>)
 8001f1c:	889a      	ldrh	r2, [r3, #4]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <Task_Mode_Cfg+0xa74>)
 8001f20:	fba3 1302 	umull	r1, r3, r3, r2
 8001f24:	08d9      	lsrs	r1, r3, #3
 8001f26:	460b      	mov	r3, r1
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	2200      	movs	r2, #0
 8001f38:	f7fe fe74 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <Task_Mode_Cfg+0xa8c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001f42:	e041      	b.n	8001fc8 <Task_Mode_Cfg+0xaf0>
 8001f44:	20000017 	.word	0x20000017
 8001f48:	200000d0 	.word	0x200000d0
 8001f4c:	cccccccd 	.word	0xcccccccd
 8001f50:	40010c00 	.word	0x40010c00
 8001f54:	200000c8 	.word	0x200000c8
 8001f58:	00910910 	.word	0x00910910
 8001f5c:	20000210 	.word	0x20000210
 8001f60:	20000214 	.word	0x20000214
 8001f64:	20000016 	.word	0x20000016
 8001f68:	200000cc 	.word	0x200000cc
					{
						button_cnt_t++;
 8001f6c:	4ba2      	ldr	r3, [pc, #648]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4ba0      	ldr	r3, [pc, #640]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001f76:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8001f78:	4b9f      	ldr	r3, [pc, #636]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b1e      	cmp	r3, #30
 8001f7e:	d920      	bls.n	8001fc2 <Task_Mode_Cfg+0xaea>

							Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8001f80:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8001f82:	889b      	ldrh	r3, [r3, #4]
 8001f84:	4a9e      	ldr	r2, [pc, #632]	; (8002200 <Task_Mode_Cfg+0xd28>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8001f92:	889a      	ldrh	r2, [r3, #4]
 8001f94:	4b9a      	ldr	r3, [pc, #616]	; (8002200 <Task_Mode_Cfg+0xd28>)
 8001f96:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9a:	08d9      	lsrs	r1, r3, #3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4b93      	ldr	r3, [pc, #588]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	4b90      	ldr	r3, [pc, #576]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	f7fe fe31 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f002 fc20 	bl	8004808 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8001fc8:	2120      	movs	r1, #32
 8001fca:	488e      	ldr	r0, [pc, #568]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 8001fcc:	f004 f886 	bl	80060dc <HAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d0ca      	beq.n	8001f6c <Task_Mode_Cfg+0xa94>
					}
					if(button_cnt_t > 30)
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b1e      	cmp	r3, #30
 8001fdc:	d918      	bls.n	8002010 <Task_Mode_Cfg+0xb38>
						Led7TurnTime_Display(PlayCfg.Parameter.turn_time_s/10, PlayCfg.Parameter.turn_time_s%10, 0, 0);
 8001fde:	4b87      	ldr	r3, [pc, #540]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	4a87      	ldr	r2, [pc, #540]	; (8002200 <Task_Mode_Cfg+0xd28>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8001ff0:	889a      	ldrh	r2, [r3, #4]
 8001ff2:	4b83      	ldr	r3, [pc, #524]	; (8002200 <Task_Mode_Cfg+0xd28>)
 8001ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff8:	08d9      	lsrs	r1, r3, #3
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	b29b      	uxth	r3, r3
 8002006:	4619      	mov	r1, r3
 8002008:	2300      	movs	r3, #0
 800200a:	2200      	movs	r2, #0
 800200c:	f7fe fe0a 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 8002010:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8002012:	2200      	movs	r2, #0
 8002014:	801a      	strh	r2, [r3, #0]
//			else if((IRcode != 0) || (tempCode != 0) || (bitIndex != 0)){
//				IRcode = 0;
//				tempCode = 0;
//				bitIndex = 0;
//			}
			break;
 8002016:	e28a      	b.n	800252e <Task_Mode_Cfg+0x1056>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_NEXT_CODE)){
 8002018:	2140      	movs	r1, #64	; 0x40
 800201a:	487a      	ldr	r0, [pc, #488]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 800201c:	f004 f85e 	bl	80060dc <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <Task_Mode_Cfg+0xb5a>
 8002026:	4b78      	ldr	r3, [pc, #480]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a78      	ldr	r2, [pc, #480]	; (800220c <Task_Mode_Cfg+0xd34>)
 800202c:	4293      	cmp	r3, r2
 800202e:	f040 827e 	bne.w	800252e <Task_Mode_Cfg+0x1056>
				delay_ms((int)BUTTON_DELAY);
 8002032:	2014      	movs	r0, #20
 8002034:	f002 fbe8 	bl	8004808 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_NEXT_CODE)){
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	4872      	ldr	r0, [pc, #456]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 800203c:	f004 f84e 	bl	80060dc <HAL_GPIO_ReadPin>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <Task_Mode_Cfg+0xb7a>
 8002046:	4b70      	ldr	r3, [pc, #448]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a70      	ldr	r2, [pc, #448]	; (800220c <Task_Mode_Cfg+0xd34>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 826e 	bne.w	800252e <Task_Mode_Cfg+0x1056>
					IRcode = 0;
 8002052:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8002058:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <Task_Mode_Cfg+0xd38>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <Task_Mode_Cfg+0xd3c>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					cfg_state_t++;
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <Task_Mode_Cfg+0xd40>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <Task_Mode_Cfg+0xd40>)
 800206e:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <Task_Mode_Cfg+0xd44>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
					Led7TurnTime_Display(10, 10, 0, 0);
 8002076:	2300      	movs	r3, #0
 8002078:	2200      	movs	r2, #0
 800207a:	210a      	movs	r1, #10
 800207c:	200a      	movs	r0, #10
 800207e:	f7fe fdd1 	bl	8000c24 <Led7TurnTime_Display>
					buzzer_stt = 1;
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <Task_Mode_Cfg+0xd48>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8002088:	e01a      	b.n	80020c0 <Task_Mode_Cfg+0xbe8>
						button_cnt_t++;
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8002094:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2b1e      	cmp	r3, #30
 800209c:	d90d      	bls.n	80020ba <Task_Mode_Cfg+0xbe2>
							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	00da      	lsls	r2, r3, #3
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	210a      	movs	r1, #10
 80020b4:	200a      	movs	r0, #10
 80020b6:	f7fe fdb5 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 80020ba:	2064      	movs	r0, #100	; 0x64
 80020bc:	f002 fba4 	bl	8004808 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	4850      	ldr	r0, [pc, #320]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 80020c4:	f004 f80a 	bl	80060dc <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d0dd      	beq.n	800208a <Task_Mode_Cfg+0xbb2>
					if(button_cnt_t > 30)
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b1e      	cmp	r3, #30
 80020d4:	d905      	bls.n	80020e2 <Task_Mode_Cfg+0xc0a>
						Led7TurnTime_Display(10, 10, 0, 0);
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	210a      	movs	r1, #10
 80020dc:	200a      	movs	r0, #10
 80020de:	f7fe fda1 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 80020e2:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <Task_Mode_Cfg+0xd20>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	801a      	strh	r2, [r3, #0]
			break;
 80020e8:	e221      	b.n	800252e <Task_Mode_Cfg+0x1056>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 80020ea:	bf00      	nop
			break;
 80020ec:	e21f      	b.n	800252e <Task_Mode_Cfg+0x1056>
		}
		case E_CFG_START_MODE:
		{
			if(pCfg_1st_state_Flag){
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <Task_Mode_Cfg+0xd44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d027      	beq.n	8002146 <Task_Mode_Cfg+0xc6e>
				pCfg_1st_state_Flag = 0;
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <Task_Mode_Cfg+0xd44>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
				if(PlayCfg.Parameter.mode_signed == 0xFF)
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80020fe:	7a1b      	ldrb	r3, [r3, #8]
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d102      	bne.n	800210a <Task_Mode_Cfg+0xc32>
					PlayCfg.Parameter.mode_signed = 2;
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8002106:	2202      	movs	r2, #2
 8002108:	721a      	strb	r2, [r3, #8]

				Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <Task_Mode_Cfg+0xd24>)
 800210c:	7819      	ldrb	r1, [r3, #0]
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	330a      	adds	r3, #10
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	200c      	movs	r0, #12
 800211a:	f002 f909 	bl	8004330 <Task_Led_StartPoint>
				//Send Display and Blink Start point
				for(int i=0;i<(PlayCfg.Parameter.playing_mode);i++){
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00a      	b.n	800213a <Task_Mode_Cfg+0xc62>
					Task_led_xl(i+1, 0x0F);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3301      	adds	r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	210f      	movs	r1, #15
 800212e:	4618      	mov	r0, r3
 8002130:	f002 f8e8 	bl	8004304 <Task_led_xl>
				for(int i=0;i<(PlayCfg.Parameter.playing_mode);i++){
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <Task_Mode_Cfg+0xd24>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4293      	cmp	r3, r2
 8002144:	dbee      	blt.n	8002124 <Task_Mode_Cfg+0xc4c>
				}
			}
			if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_PUSH_CODE)){
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	482e      	ldr	r0, [pc, #184]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 800214a:	f003 ffc7 	bl	80060dc <HAL_GPIO_ReadPin>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <Task_Mode_Cfg+0xc88>
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a32      	ldr	r2, [pc, #200]	; (8002224 <Task_Mode_Cfg+0xd4c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	f040 80a9 	bne.w	80022b2 <Task_Mode_Cfg+0xdda>
				delay_ms((int)BUTTON_DELAY);
 8002160:	2014      	movs	r0, #20
 8002162:	f002 fb51 	bl	8004808 <delay_ms>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_PUSH_CODE)){
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	4826      	ldr	r0, [pc, #152]	; (8002204 <Task_Mode_Cfg+0xd2c>)
 800216a:	f003 ffb7 	bl	80060dc <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <Task_Mode_Cfg+0xca8>
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <Task_Mode_Cfg+0xd4c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 81d1 	bne.w	8002522 <Task_Mode_Cfg+0x104a>
					IRcode = 0;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <Task_Mode_Cfg+0xd30>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <Task_Mode_Cfg+0xd38>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <Task_Mode_Cfg+0xd3c>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
					PlayCfg.Parameter.playing_mode++;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <Task_Mode_Cfg+0xd24>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <Task_Mode_Cfg+0xd24>)
 800219c:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.playing_mode > (int)MAX_PLAYER_NUM)
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d91a      	bls.n	80021dc <Task_Mode_Cfg+0xd04>
					{
						for(int i=0;i<(int)MAX_PLAYER_NUM;i++){
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e00a      	b.n	80021c2 <Task_Mode_Cfg+0xcea>
							Task_led_xl(i+1, 0x00);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 f8a4 	bl	8004304 <Task_led_xl>
						for(int i=0;i<(int)MAX_PLAYER_NUM;i++){
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	3301      	adds	r3, #1
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	ddf1      	ble.n	80021ac <Task_Mode_Cfg+0xcd4>
						}
						PlayCfg.Parameter.playing_mode = 2;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
						PlayCfg.Parameter.mode_signed = 1 - PlayCfg.Parameter.mode_signed;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021d0:	7a1b      	ldrb	r3, [r3, #8]
 80021d2:	f1c3 0301 	rsb	r3, r3, #1
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021da:	721a      	strb	r2, [r3, #8]
					}
					//Update Display
					Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021de:	7819      	ldrb	r1, [r3, #0]
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <Task_Mode_Cfg+0xd24>)
 80021e2:	7a1b      	ldrb	r3, [r3, #8]
 80021e4:	330a      	adds	r3, #10
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	200c      	movs	r0, #12
 80021ec:	f002 f8a0 	bl	8004330 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e023      	b.n	800223e <Task_Mode_Cfg+0xd66>
 80021f6:	bf00      	nop
 80021f8:	200000cc 	.word	0x200000cc
 80021fc:	200000d0 	.word	0x200000d0
 8002200:	cccccccd 	.word	0xcccccccd
 8002204:	40010c00 	.word	0x40010c00
 8002208:	200000c8 	.word	0x200000c8
 800220c:	00904904 	.word	0x00904904
 8002210:	20000210 	.word	0x20000210
 8002214:	20000214 	.word	0x20000214
 8002218:	20000131 	.word	0x20000131
 800221c:	20000017 	.word	0x20000017
 8002220:	20000016 	.word	0x20000016
 8002224:	00910910 	.word	0x00910910
						Task_led_xl(i+1, 0x0F);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	210f      	movs	r1, #15
 8002232:	4618      	mov	r0, r3
 8002234:	f002 f866 	bl	8004304 <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b8d      	ldr	r3, [pc, #564]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4293      	cmp	r3, r2
 8002248:	dbee      	blt.n	8002228 <Task_Mode_Cfg+0xd50>
					}
					buzzer_stt = 1;
 800224a:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <Task_Mode_Cfg+0xfa0>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002250:	e01a      	b.n	8002288 <Task_Mode_Cfg+0xdb0>
					{
						button_cnt_t++;
 8002252:	4b8a      	ldr	r3, [pc, #552]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <Task_Mode_Cfg+0xfa4>)
 800225c:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 800225e:	4b87      	ldr	r3, [pc, #540]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b1e      	cmp	r3, #30
 8002264:	d90d      	bls.n	8002282 <Task_Mode_Cfg+0xdaa>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8002266:	4b85      	ldr	r3, [pc, #532]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	00da      	lsls	r2, r3, #3
 8002270:	4b82      	ldr	r3, [pc, #520]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	210a      	movs	r1, #10
 800227c:	200a      	movs	r0, #10
 800227e:	f7fe fcd1 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 8002282:	2064      	movs	r0, #100	; 0x64
 8002284:	f002 fac0 	bl	8004808 <delay_ms>
					while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	487d      	ldr	r0, [pc, #500]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 800228c:	f003 ff26 	bl	80060dc <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d0dd      	beq.n	8002252 <Task_Mode_Cfg+0xd7a>
					}
					if(button_cnt_t > 30)
 8002296:	4b79      	ldr	r3, [pc, #484]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b1e      	cmp	r3, #30
 800229c:	d905      	bls.n	80022aa <Task_Mode_Cfg+0xdd2>
						Led7TurnTime_Display(10, 10, 0, 0);
 800229e:	2300      	movs	r3, #0
 80022a0:	2200      	movs	r2, #0
 80022a2:	210a      	movs	r1, #10
 80022a4:	200a      	movs	r0, #10
 80022a6:	f7fe fcbd 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <Task_Mode_Cfg+0xfa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_PUSH_CODE)){
 80022b0:	e137      	b.n	8002522 <Task_Mode_Cfg+0x104a>
				}
			}
			else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 80022b2:	2120      	movs	r1, #32
 80022b4:	4872      	ldr	r0, [pc, #456]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 80022b6:	f003 ff11 	bl	80060dc <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 808f 	bne.w	80023e0 <Task_Mode_Cfg+0xf08>
				delay_ms((int)BUTTON_DELAY);
 80022c2:	2014      	movs	r0, #20
 80022c4:	f002 faa0 	bl	8004808 <delay_ms>
				if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 80022c8:	2120      	movs	r1, #32
 80022ca:	486d      	ldr	r0, [pc, #436]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 80022cc:	f003 ff06 	bl	80060dc <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 812d 	bne.w	8002532 <Task_Mode_Cfg+0x105a>
					IRcode = 0;
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <Task_Mode_Cfg+0xfac>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <Task_Mode_Cfg+0xfb0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 80022e4:	4b69      	ldr	r3, [pc, #420]	; (800248c <Task_Mode_Cfg+0xfb4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
					if(PlayCfg.Parameter.playing_mode > 2){
 80022ea:	4b62      	ldr	r3, [pc, #392]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d91a      	bls.n	8002328 <Task_Mode_Cfg+0xe50>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	e00a      	b.n	800230e <Task_Mode_Cfg+0xe36>
							Task_led_xl(i+1, 0x00);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fffe 	bl	8004304 <Task_led_xl>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4293      	cmp	r3, r2
 8002318:	dbee      	blt.n	80022f8 <Task_Mode_Cfg+0xe20>
						}
						PlayCfg.Parameter.playing_mode--;
 800231a:	4b56      	ldr	r3, [pc, #344]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3b01      	subs	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e009      	b.n	800233c <Task_Mode_Cfg+0xe64>
					}
					else{
						PlayCfg.Parameter.playing_mode = (int)MAX_PLAYER_NUM;
 8002328:	4b52      	ldr	r3, [pc, #328]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 800232a:	2204      	movs	r2, #4
 800232c:	701a      	strb	r2, [r3, #0]
						PlayCfg.Parameter.mode_signed = 1 - PlayCfg.Parameter.mode_signed;
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002330:	7a1b      	ldrb	r3, [r3, #8]
 8002332:	f1c3 0301 	rsb	r3, r3, #1
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 800233a:	721a      	strb	r2, [r3, #8]
					}
					//Update Display
					Task_Led_StartPoint(12, PlayCfg.Parameter.playing_mode, 10 + PlayCfg.Parameter.mode_signed);
 800233c:	4b4d      	ldr	r3, [pc, #308]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002342:	7a1b      	ldrb	r3, [r3, #8]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	200c      	movs	r0, #12
 800234c:	f001 fff0 	bl	8004330 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	e00a      	b.n	800236c <Task_Mode_Cfg+0xe94>
						Task_led_xl(i+1, 0x0F);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	210f      	movs	r1, #15
 8002360:	4618      	mov	r0, r3
 8002362:	f001 ffcf 	bl	8004304 <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3301      	adds	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4293      	cmp	r3, r2
 8002376:	dbee      	blt.n	8002356 <Task_Mode_Cfg+0xe7e>
					}
					buzzer_stt = 1;
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <Task_Mode_Cfg+0xfa0>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 800237e:	e01a      	b.n	80023b6 <Task_Mode_Cfg+0xede>
					{
						button_cnt_t++;
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <Task_Mode_Cfg+0xfa4>)
 800238a:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <Task_Mode_Cfg+0xfa4>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	2b1e      	cmp	r3, #30
 8002392:	d90d      	bls.n	80023b0 <Task_Mode_Cfg+0xed8>

							Led7TurnTime_Display(10, 10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <Task_Mode_Cfg+0xfa4>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	00da      	lsls	r2, r3, #3
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <Task_Mode_Cfg+0xfa4>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	210a      	movs	r1, #10
 80023aa:	200a      	movs	r0, #10
 80023ac:	f7fe fc3a 	bl	8000c24 <Led7TurnTime_Display>
						}
						delay_ms(100);
 80023b0:	2064      	movs	r0, #100	; 0x64
 80023b2:	f002 fa29 	bl	8004808 <delay_ms>
					while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 80023b6:	2120      	movs	r1, #32
 80023b8:	4831      	ldr	r0, [pc, #196]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 80023ba:	f003 fe8f 	bl	80060dc <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d0dd      	beq.n	8002380 <Task_Mode_Cfg+0xea8>
					}
					if(button_cnt_t > 30)
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <Task_Mode_Cfg+0xfa4>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b1e      	cmp	r3, #30
 80023ca:	d905      	bls.n	80023d8 <Task_Mode_Cfg+0xf00>
						Led7TurnTime_Display(10, 10, 0, 0);
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	210a      	movs	r1, #10
 80023d2:	200a      	movs	r0, #10
 80023d4:	f7fe fc26 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <Task_Mode_Cfg+0xfa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]
//			else if((IRcode != 0) || (tempCode != 0) || (bitIndex != 0)){
//				IRcode = 0;
//				tempCode = 0;
//				bitIndex = 0;
//			}
			break;
 80023de:	e0a8      	b.n	8002532 <Task_Mode_Cfg+0x105a>
			else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_NEXT_CODE)){
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	4827      	ldr	r0, [pc, #156]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 80023e4:	f003 fe7a 	bl	80060dc <HAL_GPIO_ReadPin>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d005      	beq.n	80023fa <Task_Mode_Cfg+0xf22>
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <Task_Mode_Cfg+0xfac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a27      	ldr	r2, [pc, #156]	; (8002490 <Task_Mode_Cfg+0xfb8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	f040 809c 	bne.w	8002532 <Task_Mode_Cfg+0x105a>
				delay_ms((int)BUTTON_DELAY);
 80023fa:	2014      	movs	r0, #20
 80023fc:	f002 fa04 	bl	8004808 <delay_ms>
				if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_NEXT_CODE)){
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	481f      	ldr	r0, [pc, #124]	; (8002480 <Task_Mode_Cfg+0xfa8>)
 8002404:	f003 fe6a 	bl	80060dc <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d005      	beq.n	800241a <Task_Mode_Cfg+0xf42>
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <Task_Mode_Cfg+0xfac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <Task_Mode_Cfg+0xfb8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 808c 	bne.w	8002532 <Task_Mode_Cfg+0x105a>
					IRcode = 0;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <Task_Mode_Cfg+0xfac>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
					tempCode = 0;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <Task_Mode_Cfg+0xfb0>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
					bitIndex = 0;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <Task_Mode_Cfg+0xfb4>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
					Task_Led_StartPoint(12, 12, 12);
 800242c:	220c      	movs	r2, #12
 800242e:	210c      	movs	r1, #12
 8002430:	200c      	movs	r0, #12
 8002432:	f001 ff7d 	bl	8004330 <Task_Led_StartPoint>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002436:	2300      	movs	r3, #0
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	e00a      	b.n	8002452 <Task_Mode_Cfg+0xf7a>
						Task_led_xl(i+1, 0x00);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f001 ff5c 	bl	8004304 <Task_led_xl>
					for(int i=0;i<PlayCfg.Parameter.playing_mode;i++){
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <Task_Mode_Cfg+0xf9c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4293      	cmp	r3, r2
 800245c:	dbee      	blt.n	800243c <Task_Mode_Cfg+0xf64>
					cfg_state_t = E_CFG_START_POINT;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <Task_Mode_Cfg+0xfbc>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
					pCfg_1st_state_Flag = 1;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <Task_Mode_Cfg+0xfc0>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
					buzzer_stt = 1;
 800246a:	4b03      	ldr	r3, [pc, #12]	; (8002478 <Task_Mode_Cfg+0xfa0>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8002470:	e042      	b.n	80024f8 <Task_Mode_Cfg+0x1020>
 8002472:	bf00      	nop
 8002474:	200000d0 	.word	0x200000d0
 8002478:	20000016 	.word	0x20000016
 800247c:	200000cc 	.word	0x200000cc
 8002480:	40010c00 	.word	0x40010c00
 8002484:	200000c8 	.word	0x200000c8
 8002488:	20000210 	.word	0x20000210
 800248c:	20000214 	.word	0x20000214
 8002490:	00904904 	.word	0x00904904
 8002494:	20000131 	.word	0x20000131
 8002498:	20000017 	.word	0x20000017
						button_cnt_t++;
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <Task_Mode_Cfg+0x1064>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <Task_Mode_Cfg+0x1064>)
 80024a6:	801a      	strh	r2, [r3, #0]
						if(button_cnt_t > 30){
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <Task_Mode_Cfg+0x1064>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	2b1e      	cmp	r3, #30
 80024ae:	d920      	bls.n	80024f2 <Task_Mode_Cfg+0x101a>
							Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <Task_Mode_Cfg+0x1068>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <Task_Mode_Cfg+0x106c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <Task_Mode_Cfg+0x1068>)
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Task_Mode_Cfg+0x106c>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	08d9      	lsrs	r1, r3, #3
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <Task_Mode_Cfg+0x1064>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	00da      	lsls	r2, r3, #3
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <Task_Mode_Cfg+0x1064>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	f7fe fb99 	bl	8000c24 <Led7TurnTime_Display>
						delay_ms(100);
 80024f2:	2064      	movs	r0, #100	; 0x64
 80024f4:	f002 f988 	bl	8004808 <delay_ms>
					while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 80024f8:	2140      	movs	r1, #64	; 0x40
 80024fa:	4813      	ldr	r0, [pc, #76]	; (8002548 <Task_Mode_Cfg+0x1070>)
 80024fc:	f003 fdee 	bl	80060dc <HAL_GPIO_ReadPin>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d0ca      	beq.n	800249c <Task_Mode_Cfg+0xfc4>
					if(button_cnt_t > 30)
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <Task_Mode_Cfg+0x1064>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b1e      	cmp	r3, #30
 800250c:	d905      	bls.n	800251a <Task_Mode_Cfg+0x1042>
						Led7TurnTime_Display(10, 10, 0, 0);
 800250e:	2300      	movs	r3, #0
 8002510:	2200      	movs	r2, #0
 8002512:	210a      	movs	r1, #10
 8002514:	200a      	movs	r0, #10
 8002516:	f7fe fb85 	bl	8000c24 <Led7TurnTime_Display>
					button_cnt_t = 0;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <Task_Mode_Cfg+0x1064>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
			break;
 8002520:	e007      	b.n	8002532 <Task_Mode_Cfg+0x105a>
				if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)(int)IRcode == (int)(int)IR_PUSH_CODE)){
 8002522:	bf00      	nop
			break;
 8002524:	e005      	b.n	8002532 <Task_Mode_Cfg+0x105a>
			break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <Task_Mode_Cfg+0x105c>
			break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <Task_Mode_Cfg+0x105c>
			break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <Task_Mode_Cfg+0x105c>
			break;
 8002532:	bf00      	nop
		}
	}
}
 8002534:	bf00      	nop
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bdb0      	pop	{r4, r5, r7, pc}
 800253c:	200000cc 	.word	0x200000cc
 8002540:	200000dc 	.word	0x200000dc
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40010c00 	.word	0x40010c00

0800254c <Task_User_1stInit>:

uint8_t Task_User_1stInit(uint8_t readFlash)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
	int i;
	//Read from FLASH
	if (readFlash)
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <Task_User_1stInit+0x14>
		Task_Read_Cfg();
 800255c:	f7fe ff80 	bl	8001460 <Task_Read_Cfg>

	if (PlayCfg.Parameter.playing_mode < 2){
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <Task_User_1stInit+0x6c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d802      	bhi.n	800256e <Task_User_1stInit+0x22>
		PlayCfg.Parameter.playing_mode = 4;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <Task_User_1stInit+0x6c>)
 800256a:	2204      	movs	r2, #4
 800256c:	701a      	strb	r2, [r3, #0]
	}
	stop_time = 1;
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <Task_User_1stInit+0x70>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]

	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e00d      	b.n	8002596 <Task_User_1stInit+0x4a>
		Player[i].addr = i+1;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3301      	adds	r3, #1
 8002580:	b2d9      	uxtb	r1, r3
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <Task_User_1stInit+0x74>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3301      	adds	r3, #1
 800258c:	460a      	mov	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <Task_User_1stInit+0x6c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4293      	cmp	r3, r2
 80025a0:	dbeb      	blt.n	800257a <Task_User_1stInit+0x2e>
	}
	if(i==2)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d102      	bne.n	80025ae <Task_User_1stInit+0x62>
		Player[1].addr = 4;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <Task_User_1stInit+0x74>)
 80025aa:	2204      	movs	r2, #4
 80025ac:	745a      	strb	r2, [r3, #17]

	return 1;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200000d0 	.word	0x200000d0
 80025bc:	20000130 	.word	0x20000130
 80025c0:	200000ec 	.word	0x200000ec

080025c4 <Task_Round_Init>:

uint8_t Task_Round_Init(void)
{
 80025c4:	b5b0      	push	{r4, r5, r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af02      	add	r7, sp, #8
	//Time Update
	stop_time = 1;
 80025ca:	4bad      	ldr	r3, [pc, #692]	; (8002880 <Task_Round_Init+0x2bc>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
	all_turn_cnt = 1;
 80025d0:	4bac      	ldr	r3, [pc, #688]	; (8002884 <Task_Round_Init+0x2c0>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
	hit_get_point_cnt = 0;
 80025d6:	4bac      	ldr	r3, [pc, #688]	; (8002888 <Task_Round_Init+0x2c4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
	turn_time_s = PlayCfg.Parameter.turn_time_s;
 80025dc:	4bab      	ldr	r3, [pc, #684]	; (800288c <Task_Round_Init+0x2c8>)
 80025de:	889a      	ldrh	r2, [r3, #4]
 80025e0:	4bab      	ldr	r3, [pc, #684]	; (8002890 <Task_Round_Init+0x2cc>)
 80025e2:	801a      	strh	r2, [r3, #0]
	rount_time_s = PlayCfg.Parameter.rount_time_s * PlayCfg.Parameter.mode_signed;
 80025e4:	4ba9      	ldr	r3, [pc, #676]	; (800288c <Task_Round_Init+0x2c8>)
 80025e6:	88db      	ldrh	r3, [r3, #6]
 80025e8:	4aa8      	ldr	r2, [pc, #672]	; (800288c <Task_Round_Init+0x2c8>)
 80025ea:	7a12      	ldrb	r2, [r2, #8]
 80025ec:	b292      	uxth	r2, r2
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4ba7      	ldr	r3, [pc, #668]	; (8002894 <Task_Round_Init+0x2d0>)
 80025f6:	801a      	strh	r2, [r3, #0]

	if(PlayCfg.Parameter.playing_mode==2)
 80025f8:	4ba4      	ldr	r3, [pc, #656]	; (800288c <Task_Round_Init+0x2c8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d102      	bne.n	8002606 <Task_Round_Init+0x42>
		Player[1].addr = 4;
 8002600:	4ba5      	ldr	r3, [pc, #660]	; (8002898 <Task_Round_Init+0x2d4>)
 8002602:	2204      	movs	r2, #4
 8002604:	745a      	strb	r2, [r3, #17]
	//Player Data update
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	e04d      	b.n	80026a8 <Task_Round_Init+0xe4>
	{
		Player[i].ledxl_mask = 0x0F;
 800260c:	4aa2      	ldr	r2, [pc, #648]	; (8002898 <Task_Round_Init+0x2d4>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	220f      	movs	r2, #15
 8002616:	701a      	strb	r2, [r3, #0]
		Player[i].average = 0;
 8002618:	4a9f      	ldr	r2, [pc, #636]	; (8002898 <Task_Round_Init+0x2d4>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
		Player[i].point = PlayCfg.Parameter.mode_signed*PlayCfg.Parameter.start_point*((i>=PlayCfg.Parameter.playing_mode?0:1));
 8002628:	4b98      	ldr	r3, [pc, #608]	; (800288c <Task_Round_Init+0x2c8>)
 800262a:	7a1b      	ldrb	r3, [r3, #8]
 800262c:	b29b      	uxth	r3, r3
 800262e:	4a97      	ldr	r2, [pc, #604]	; (800288c <Task_Round_Init+0x2c8>)
 8002630:	8852      	ldrh	r2, [r2, #2]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	4a94      	ldr	r2, [pc, #592]	; (800288c <Task_Round_Init+0x2c8>)
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	4611      	mov	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	428a      	cmp	r2, r1
 8002642:	bfb4      	ite	lt
 8002644:	2201      	movlt	r2, #1
 8002646:	2200      	movge	r2, #0
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	b292      	uxth	r2, r2
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	b299      	uxth	r1, r3
 8002652:	4a91      	ldr	r2, [pc, #580]	; (8002898 <Task_Round_Init+0x2d4>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	3308      	adds	r3, #8
 800265c:	460a      	mov	r2, r1
 800265e:	801a      	strh	r2, [r3, #0]
		Player[i].max_hit_get_point = 0;
 8002660:	4a8d      	ldr	r2, [pc, #564]	; (8002898 <Task_Round_Init+0x2d4>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	330a      	adds	r3, #10
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
		Player[i].sum_point = 0;
 800266e:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <Task_Round_Init+0x2d4>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	330c      	adds	r3, #12
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
		Player[i].sum_signed = 0;
 800267c:	4a86      	ldr	r2, [pc, #536]	; (8002898 <Task_Round_Init+0x2d4>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	3302      	adds	r3, #2
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
		if(Player[i].addr == 1)
 800268a:	4a83      	ldr	r2, [pc, #524]	; (8002898 <Task_Round_Init+0x2d4>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	3301      	adds	r3, #1
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d103      	bne.n	80026a2 <Task_Round_Init+0xde>
			current_player = i;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b7f      	ldr	r3, [pc, #508]	; (800289c <Task_Round_Init+0x2d8>)
 80026a0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <Task_Round_Init+0x2c8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4293      	cmp	r3, r2
 80026b2:	dbab      	blt.n	800260c <Task_Round_Init+0x48>
	}

	//Send data to Display
	Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <Task_Round_Init+0x2cc>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	4a79      	ldr	r2, [pc, #484]	; (80028a0 <Task_Round_Init+0x2dc>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	4b72      	ldr	r3, [pc, #456]	; (8002890 <Task_Round_Init+0x2cc>)
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <Task_Round_Init+0x2dc>)
 80026ca:	fba3 1302 	umull	r1, r3, r3, r2
 80026ce:	08d9      	lsrs	r1, r3, #3
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	2308      	movs	r3, #8
 80026e0:	2208      	movs	r2, #8
 80026e2:	f7fe fa9f 	bl	8000c24 <Led7TurnTime_Display>
	Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <Task_Round_Init+0x2c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6d      	ldr	r2, [pc, #436]	; (80028a0 <Task_Round_Init+0x2dc>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	4618      	mov	r0, r3
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <Task_Round_Init+0x2c0>)
 80026f6:	6819      	ldr	r1, [r3, #0]
 80026f8:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <Task_Round_Init+0x2dc>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	1aca      	subs	r2, r1, r3
 800270a:	4614      	mov	r4, r2
 800270c:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <Task_Round_Init+0x2c4>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <Task_Round_Init+0x2dc>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	b29b      	uxth	r3, r3
 800271a:	461d      	mov	r5, r3
 800271c:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <Task_Round_Init+0x2c4>)
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <Task_Round_Init+0x2dc>)
 8002722:	fba3 1302 	umull	r1, r3, r3, r2
 8002726:	08d9      	lsrs	r1, r3, #3
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	462a      	mov	r2, r5
 8002736:	4621      	mov	r1, r4
 8002738:	f7fe fae8 	bl	8000d0c <Led7HitCnt_Display>
	Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <Task_Round_Init+0x2d0>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <Task_Round_Init+0x2e0>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <Task_Round_Init+0x2d0>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <Task_Round_Init+0x2e4>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <Task_Round_Init+0x2dc>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	08d9      	lsrs	r1, r3, #3
 8002762:	460b      	mov	r3, r1
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	461c      	mov	r4, r3
 8002770:	4b48      	ldr	r3, [pc, #288]	; (8002894 <Task_Round_Init+0x2d0>)
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <Task_Round_Init+0x2e4>)
 8002776:	fba3 1302 	umull	r1, r3, r3, r2
 800277a:	0959      	lsrs	r1, r3, #5
 800277c:	460b      	mov	r3, r1
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a5b      	subs	r3, r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	4a45      	ldr	r2, [pc, #276]	; (80028a0 <Task_Round_Init+0x2dc>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	b29b      	uxth	r3, r3
 8002792:	461d      	mov	r5, r3
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <Task_Round_Init+0x2d0>)
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <Task_Round_Init+0x2e4>)
 800279a:	fba3 1302 	umull	r1, r3, r3, r2
 800279e:	0959      	lsrs	r1, r3, #5
 80027a0:	460b      	mov	r3, r1
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a5b      	subs	r3, r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b3c      	ldr	r3, [pc, #240]	; (80028a0 <Task_Round_Init+0x2dc>)
 80027ae:	fba3 1302 	umull	r1, r3, r3, r2
 80027b2:	08d9      	lsrs	r1, r3, #3
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	2301      	movs	r3, #1
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	462a      	mov	r2, r5
 80027ca:	4621      	mov	r1, r4
 80027cc:	f7fe fb0e 	bl	8000dec <Led7RoundTime_Display>

	Task_Led_StartPoint(PlayCfg.Parameter.start_point/100, (PlayCfg.Parameter.start_point%100)/10, PlayCfg.Parameter.start_point%10);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <Task_Round_Init+0x2c8>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	4a35      	ldr	r2, [pc, #212]	; (80028ac <Task_Round_Init+0x2e8>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2d8      	uxtb	r0, r3
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <Task_Round_Init+0x2c8>)
 80027e2:	885b      	ldrh	r3, [r3, #2]
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <Task_Round_Init+0x2e8>)
 80027e6:	fba2 1203 	umull	r1, r2, r2, r3
 80027ea:	0952      	lsrs	r2, r2, #5
 80027ec:	2164      	movs	r1, #100	; 0x64
 80027ee:	fb01 f202 	mul.w	r2, r1, r2
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <Task_Round_Init+0x2dc>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b2dc      	uxtb	r4, r3
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <Task_Round_Init+0x2c8>)
 8002804:	885a      	ldrh	r2, [r3, #2]
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <Task_Round_Init+0x2dc>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	08d9      	lsrs	r1, r3, #3
 800280e:	460b      	mov	r3, r1
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	b29b      	uxth	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4621      	mov	r1, r4
 8002820:	f001 fd86 	bl	8004330 <Task_Led_StartPoint>

	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002824:	2300      	movs	r3, #0
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	e01a      	b.n	8002860 <Task_Round_Init+0x29c>
	{
		Task_led_xl(Player[i].addr, Player[i].ledxl_mask);
 800282a:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <Task_Round_Init+0x2d4>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	3301      	adds	r3, #1
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	4918      	ldr	r1, [pc, #96]	; (8002898 <Task_Round_Init+0x2d4>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	440b      	add	r3, r1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f001 fd5e 	bl	8004304 <Task_led_xl>
		Task_Blink_Line(i+1, 0, 1);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2201      	movs	r2, #1
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f001 fdab 	bl	80043b0 <Task_Blink_Line>
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <Task_Round_Init+0x2c8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	4293      	cmp	r3, r2
 800286a:	dbde      	blt.n	800282a <Task_Round_Init+0x266>
	}
	Task_Upload_Display();
 800286c:	f001 fdc4 	bl	80043f8 <Task_Upload_Display>

	pTask_1st_Flag = 1;
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <Task_Round_Init+0x2ec>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
	return 1;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	20000130 	.word	0x20000130
 8002884:	200000e0 	.word	0x200000e0
 8002888:	200000e8 	.word	0x200000e8
 800288c:	200000d0 	.word	0x200000d0
 8002890:	200000dc 	.word	0x200000dc
 8002894:	200000de 	.word	0x200000de
 8002898:	200000ec 	.word	0x200000ec
 800289c:	2000012c 	.word	0x2000012c
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	1b4e81b5 	.word	0x1b4e81b5
 80028a8:	88888889 	.word	0x88888889
 80028ac:	51eb851f 	.word	0x51eb851f
 80028b0:	200000ce 	.word	0x200000ce
 80028b4:	00000000 	.word	0x00000000

080028b8 <Task_Playing>:

uint8_t Task_Playing(void)
{
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
	if(pTask_1st_Flag)
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <Task_Playing+0x160>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80be 	beq.w	8002a44 <Task_Playing+0x18c>
	{
		//point_plus = get_player_available() - 1;
		turn_time_s = PlayCfg.Parameter.turn_time_s;
 80028c8:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <Task_Playing+0x164>)
 80028ca:	889a      	ldrh	r2, [r3, #4]
 80028cc:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <Task_Playing+0x168>)
 80028ce:	801a      	strh	r2, [r3, #0]

		last_average = Player[current_player].average;
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <Task_Playing+0x16c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <Task_Playing+0x170>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <Task_Playing+0x174>)
 80028e0:	6013      	str	r3, [r2, #0]
		Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <Task_Playing+0x178>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd ff2b 	bl	8000744 <__aeabi_ui2f>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <Task_Playing+0x174>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fd ff7c 	bl	80007f4 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461c      	mov	r4, r3
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <Task_Playing+0x17c>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd ff21 	bl	800074c <__aeabi_i2f>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f7fd fe68 	bl	80005e4 <__addsf3>
 8002914:	4603      	mov	r3, r0
 8002916:	461d      	mov	r5, r3
 8002918:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <Task_Playing+0x178>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd ff11 	bl	8000744 <__aeabi_ui2f>
 8002922:	4603      	mov	r3, r0
 8002924:	4a3f      	ldr	r2, [pc, #252]	; (8002a24 <Task_Playing+0x16c>)
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	4614      	mov	r4, r2
 800292a:	4619      	mov	r1, r3
 800292c:	4628      	mov	r0, r5
 800292e:	f7fe f815 	bl	800095c <__aeabi_fdiv>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <Task_Playing+0x170>)
 8002938:	0123      	lsls	r3, r4, #4
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	6019      	str	r1, [r3, #0]
		if(Player[current_player].average>99.99)
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <Task_Playing+0x16c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4a38      	ldr	r2, [pc, #224]	; (8002a28 <Task_Playing+0x170>)
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	3304      	adds	r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd62 	bl	8000418 <__aeabi_f2d>
 8002954:	a32e      	add	r3, pc, #184	; (adr r3, 8002a10 <Task_Playing+0x158>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fd fe33 	bl	80005c4 <__aeabi_dcmpgt>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <Task_Playing+0xbc>
			Player[current_player].average = 99.99;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <Task_Playing+0x16c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <Task_Playing+0x170>)
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <Task_Playing+0x180>)
 8002972:	601a      	str	r2, [r3, #0]

		Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <Task_Playing+0x168>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <Task_Playing+0x184>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	b29b      	uxth	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <Task_Playing+0x168>)
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <Task_Playing+0x184>)
 800298a:	fba3 1302 	umull	r1, r3, r3, r2
 800298e:	08d9      	lsrs	r1, r3, #3
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	b29b      	uxth	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	2308      	movs	r3, #8
 80029a0:	2208      	movs	r2, #8
 80029a2:	f7fe f93f 	bl	8000c24 <Led7TurnTime_Display>
		for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e020      	b.n	80029ee <Task_Playing+0x136>
		{
			if(i==current_player)
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <Task_Playing+0x16c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10c      	bne.n	80029d2 <Task_Playing+0x11a>
				Task_Blink_Line(Player[current_player].addr, 1, 1);
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <Task_Playing+0x16c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <Task_Playing+0x170>)
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	4413      	add	r3, r2
 80029c2:	3301      	adds	r3, #1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fcf0 	bl	80043b0 <Task_Blink_Line>
 80029d0:	e00a      	b.n	80029e8 <Task_Playing+0x130>
			else{
				Task_Blink_Line(Player[i].addr, 0, 1);
 80029d2:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <Task_Playing+0x170>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	3301      	adds	r3, #1
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fce4 	bl	80043b0 <Task_Blink_Line>
		for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <Task_Playing+0x164>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4293      	cmp	r3, r2
 80029f8:	dbd8      	blt.n	80029ac <Task_Playing+0xf4>
			}
		}
		stop_time = 0;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <Task_Playing+0x188>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
		pTask_1st_Flag = 0;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <Task_Playing+0x160>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
		return 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f001 b810 	b.w	8003a2c <Task_Playing+0x1174>
 8002a0c:	f3af 8000 	nop.w
 8002a10:	28f5c28f 	.word	0x28f5c28f
 8002a14:	4058ff5c 	.word	0x4058ff5c
 8002a18:	200000ce 	.word	0x200000ce
 8002a1c:	200000d0 	.word	0x200000d0
 8002a20:	200000dc 	.word	0x200000dc
 8002a24:	2000012c 	.word	0x2000012c
 8002a28:	200000ec 	.word	0x200000ec
 8002a2c:	200000e4 	.word	0x200000e4
 8002a30:	200000e0 	.word	0x200000e0
 8002a34:	200000e8 	.word	0x200000e8
 8002a38:	42c7fae1 	.word	0x42c7fae1
 8002a3c:	cccccccd 	.word	0xcccccccd
 8002a40:	20000130 	.word	0x20000130
	}

	if((IRcode != 0) && (IRcode != (int)IR_LEDXL_CODE) && (IRcode != (int)IR_NEXT_CODE) && (IRcode != (int)IR_PUSH_CODE) && (IRcode != (int)IR_STOP_CODE))
 8002a44:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <Task_Playing+0x410>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <Task_Playing+0x1d6>
 8002a4c:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <Task_Playing+0x410>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a9e      	ldr	r2, [pc, #632]	; (8002ccc <Task_Playing+0x414>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01b      	beq.n	8002a8e <Task_Playing+0x1d6>
 8002a56:	4b9c      	ldr	r3, [pc, #624]	; (8002cc8 <Task_Playing+0x410>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a9d      	ldr	r2, [pc, #628]	; (8002cd0 <Task_Playing+0x418>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d016      	beq.n	8002a8e <Task_Playing+0x1d6>
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <Task_Playing+0x410>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a9b      	ldr	r2, [pc, #620]	; (8002cd4 <Task_Playing+0x41c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d011      	beq.n	8002a8e <Task_Playing+0x1d6>
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <Task_Playing+0x410>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a9a      	ldr	r2, [pc, #616]	; (8002cd8 <Task_Playing+0x420>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00c      	beq.n	8002a8e <Task_Playing+0x1d6>
	{
		delay_ms(300);
 8002a74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a78:	f001 fec6 	bl	8004808 <delay_ms>
		tempCode = 0;
 8002a7c:	4b97      	ldr	r3, [pc, #604]	; (8002cdc <Task_Playing+0x424>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
		bitIndex = 0;
 8002a82:	4b97      	ldr	r3, [pc, #604]	; (8002ce0 <Task_Playing+0x428>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
		IRcode = 0;
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <Task_Playing+0x410>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
	}

	if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	4894      	ldr	r0, [pc, #592]	; (8002ce4 <Task_Playing+0x42c>)
 8002a92:	f003 fb23 	bl	80060dc <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d005      	beq.n	8002aa8 <Task_Playing+0x1f0>
 8002a9c:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <Task_Playing+0x410>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a8c      	ldr	r2, [pc, #560]	; (8002cd4 <Task_Playing+0x41c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 8294 	bne.w	8002fd0 <Task_Playing+0x718>
		delay_ms((int)BUTTON_DELAY);
 8002aa8:	2014      	movs	r0, #20
 8002aaa:	f001 fead 	bl	8004808 <delay_ms>
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	488c      	ldr	r0, [pc, #560]	; (8002ce4 <Task_Playing+0x42c>)
 8002ab2:	f003 fb13 	bl	80060dc <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d005      	beq.n	8002ac8 <Task_Playing+0x210>
 8002abc:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <Task_Playing+0x410>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a84      	ldr	r2, [pc, #528]	; (8002cd4 <Task_Playing+0x41c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f040 8606 	bne.w	80036d4 <Task_Playing+0xe1c>

			turn_time_s = PlayCfg.Parameter.turn_time_s;
 8002ac8:	4b87      	ldr	r3, [pc, #540]	; (8002ce8 <Task_Playing+0x430>)
 8002aca:	889a      	ldrh	r2, [r3, #4]
 8002acc:	4b87      	ldr	r3, [pc, #540]	; (8002cec <Task_Playing+0x434>)
 8002ace:	801a      	strh	r2, [r3, #0]
			hit_get_point_cnt++;
 8002ad0:	4b87      	ldr	r3, [pc, #540]	; (8002cf0 <Task_Playing+0x438>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b85      	ldr	r3, [pc, #532]	; (8002cf0 <Task_Playing+0x438>)
 8002ada:	801a      	strh	r2, [r3, #0]
			//Update CTCN
			if(hit_get_point_cnt > Player[current_player].max_hit_get_point)
 8002adc:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <Task_Playing+0x43c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4a85      	ldr	r2, [pc, #532]	; (8002cf8 <Task_Playing+0x440>)
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	330a      	adds	r3, #10
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <Task_Playing+0x438>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20a      	bcs.n	8002b08 <Task_Playing+0x250>
				Player[current_player].max_hit_get_point = hit_get_point_cnt;
 8002af2:	4b80      	ldr	r3, [pc, #512]	; (8002cf4 <Task_Playing+0x43c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	4b7d      	ldr	r3, [pc, #500]	; (8002cf0 <Task_Playing+0x438>)
 8002afa:	8819      	ldrh	r1, [r3, #0]
 8002afc:	4a7e      	ldr	r2, [pc, #504]	; (8002cf8 <Task_Playing+0x440>)
 8002afe:	0103      	lsls	r3, r0, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	330a      	adds	r3, #10
 8002b04:	460a      	mov	r2, r1
 8002b06:	801a      	strh	r2, [r3, #0]

			if((hit_get_point_cnt < 100) && (all_turn_cnt < 100)){
 8002b08:	4b79      	ldr	r3, [pc, #484]	; (8002cf0 <Task_Playing+0x438>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2b63      	cmp	r3, #99	; 0x63
 8002b0e:	d82e      	bhi.n	8002b6e <Task_Playing+0x2b6>
 8002b10:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <Task_Playing+0x444>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b63      	cmp	r3, #99	; 0x63
 8002b16:	d82a      	bhi.n	8002b6e <Task_Playing+0x2b6>
				Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 8002b18:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <Task_Playing+0x444>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <Task_Playing+0x448>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	4618      	mov	r0, r3
 8002b26:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <Task_Playing+0x444>)
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <Task_Playing+0x448>)
 8002b2c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	1aca      	subs	r2, r1, r3
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <Task_Playing+0x438>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	4a6f      	ldr	r2, [pc, #444]	; (8002d00 <Task_Playing+0x448>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <Task_Playing+0x438>)
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <Task_Playing+0x448>)
 8002b54:	fba3 1302 	umull	r1, r3, r3, r2
 8002b58:	08d9      	lsrs	r1, r3, #3
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	462a      	mov	r2, r5
 8002b68:	4621      	mov	r1, r4
 8002b6a:	f7fe f8cf 	bl	8000d0c <Led7HitCnt_Display>
			}

			Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <Task_Playing+0x444>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fde5 	bl	8000744 <__aeabi_ui2f>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <Task_Playing+0x44c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f7fd fe36 	bl	80007f4 <__aeabi_fmul>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <Task_Playing+0x438>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fddb 	bl	800074c <__aeabi_i2f>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7fd fd22 	bl	80005e4 <__addsf3>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4b55      	ldr	r3, [pc, #340]	; (8002cfc <Task_Playing+0x444>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fdcb 	bl	8000744 <__aeabi_ui2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a50      	ldr	r2, [pc, #320]	; (8002cf4 <Task_Playing+0x43c>)
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f7fd fecf 	bl	800095c <__aeabi_fdiv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4a4d      	ldr	r2, [pc, #308]	; (8002cf8 <Task_Playing+0x440>)
 8002bc4:	0123      	lsls	r3, r4, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	6019      	str	r1, [r3, #0]
			if(Player[current_player].average>99.99)
 8002bcc:	4b49      	ldr	r3, [pc, #292]	; (8002cf4 <Task_Playing+0x43c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <Task_Playing+0x440>)
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc1c 	bl	8000418 <__aeabi_f2d>
 8002be0:	a337      	add	r3, pc, #220	; (adr r3, 8002cc0 <Task_Playing+0x408>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fced 	bl	80005c4 <__aeabi_dcmpgt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <Task_Playing+0x348>
				Player[current_player].average = 99.99;
 8002bf0:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <Task_Playing+0x43c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4a40      	ldr	r2, [pc, #256]	; (8002cf8 <Task_Playing+0x440>)
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <Task_Playing+0x450>)
 8002bfe:	601a      	str	r2, [r3, #0]

			//Update  DHT & SDTL
			if(PlayCfg.Parameter.mode_signed)
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <Task_Playing+0x430>)
 8002c02:	7a1b      	ldrb	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 810b 	beq.w	8002e20 <Task_Playing+0x568>
			{
				point_plus = get_player_available() - 1;
 8002c0a:	f001 fc6d 	bl	80044e8 <get_player_available>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <Task_Playing+0x454>)
 8002c16:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	e0f8      	b.n	8002e10 <Task_Playing+0x558>
				{
					if(Player[i].point == 0)
 8002c1e:	4a36      	ldr	r2, [pc, #216]	; (8002cf8 <Task_Playing+0x440>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	3308      	adds	r3, #8
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80ec 	beq.w	8002e08 <Task_Playing+0x550>
						continue;

					if(i==current_player){
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <Task_Playing+0x43c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	f040 808f 	bne.w	8002d5c <Task_Playing+0x4a4>
						Player[i].point += point_plus;
 8002c3e:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <Task_Playing+0x440>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	3308      	adds	r3, #8
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <Task_Playing+0x454>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b299      	uxth	r1, r3
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <Task_Playing+0x440>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	460a      	mov	r2, r1
 8002c60:	801a      	strh	r2, [r3, #0]
						if(Player[i].sum_signed)
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <Task_Playing+0x440>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d061      	beq.n	8002d36 <Task_Playing+0x47e>
						{
							if(point_plus >= Player[i].sum_point){
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <Task_Playing+0x454>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	491f      	ldr	r1, [pc, #124]	; (8002cf8 <Task_Playing+0x440>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	440b      	add	r3, r1
 8002c80:	330c      	adds	r3, #12
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d343      	bcc.n	8002d10 <Task_Playing+0x458>
								Player[i].sum_point = point_plus - Player[i].sum_point;
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <Task_Playing+0x454>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	491a      	ldr	r1, [pc, #104]	; (8002cf8 <Task_Playing+0x440>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	440b      	add	r3, r1
 8002c96:	330c      	adds	r3, #12
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <Task_Playing+0x440>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	460a      	mov	r2, r1
 8002caa:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 0;
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <Task_Playing+0x440>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e0a6      	b.n	8002e0a <Task_Playing+0x552>
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	28f5c28f 	.word	0x28f5c28f
 8002cc4:	4058ff5c 	.word	0x4058ff5c
 8002cc8:	200000c8 	.word	0x200000c8
 8002ccc:	00908908 	.word	0x00908908
 8002cd0:	00904904 	.word	0x00904904
 8002cd4:	00910910 	.word	0x00910910
 8002cd8:	00920920 	.word	0x00920920
 8002cdc:	20000210 	.word	0x20000210
 8002ce0:	20000214 	.word	0x20000214
 8002ce4:	40010c00 	.word	0x40010c00
 8002ce8:	200000d0 	.word	0x200000d0
 8002cec:	200000dc 	.word	0x200000dc
 8002cf0:	200000e8 	.word	0x200000e8
 8002cf4:	2000012c 	.word	0x2000012c
 8002cf8:	200000ec 	.word	0x200000ec
 8002cfc:	200000e0 	.word	0x200000e0
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	200000e4 	.word	0x200000e4
 8002d08:	42c7fae1 	.word	0x42c7fae1
 8002d0c:	2000012d 	.word	0x2000012d
							} else{
								Player[i].sum_point -= point_plus;
 8002d10:	4aa3      	ldr	r2, [pc, #652]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	330c      	adds	r3, #12
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	4ba1      	ldr	r3, [pc, #644]	; (8002fa4 <Task_Playing+0x6ec>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b299      	uxth	r1, r3
 8002d26:	4a9e      	ldr	r2, [pc, #632]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	330c      	adds	r3, #12
 8002d30:	460a      	mov	r2, r1
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e069      	b.n	8002e0a <Task_Playing+0x552>
							}
						}else{
							Player[i].sum_point += point_plus;
 8002d36:	4a9a      	ldr	r2, [pc, #616]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	330c      	adds	r3, #12
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <Task_Playing+0x6ec>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	4a94      	ldr	r2, [pc, #592]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4413      	add	r3, r2
 8002d54:	330c      	adds	r3, #12
 8002d56:	460a      	mov	r2, r1
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e056      	b.n	8002e0a <Task_Playing+0x552>
						}

					}else{
						if(Player[i].point > 0)
 8002d5c:	4a90      	ldr	r2, [pc, #576]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	3308      	adds	r3, #8
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <Task_Playing+0x4d2>
							Player[i].point -= 1;
 8002d6c:	4a8c      	ldr	r2, [pc, #560]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3308      	adds	r3, #8
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	4a88      	ldr	r2, [pc, #544]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	3308      	adds	r3, #8
 8002d86:	460a      	mov	r2, r1
 8002d88:	801a      	strh	r2, [r3, #0]

						if(Player[i].sum_signed){
 8002d8a:	4a85      	ldr	r2, [pc, #532]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	3302      	adds	r3, #2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00f      	beq.n	8002dba <Task_Playing+0x502>
							Player[i].sum_point += 1;
 8002d9a:	4a81      	ldr	r2, [pc, #516]	; (8002fa0 <Task_Playing+0x6e8>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	330c      	adds	r3, #12
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b299      	uxth	r1, r3
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	330c      	adds	r3, #12
 8002db4:	460a      	mov	r2, r1
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e027      	b.n	8002e0a <Task_Playing+0x552>
						}else{
							if(Player[i].sum_point == 0){
 8002dba:	4a79      	ldr	r2, [pc, #484]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <Task_Playing+0x530>
								Player[i].sum_point = 1;
 8002dca:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 1;
 8002dd8:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	3302      	adds	r3, #2
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e010      	b.n	8002e0a <Task_Playing+0x552>
							}else{
								Player[i].sum_point -= 1;
 8002de8:	4a6d      	ldr	r2, [pc, #436]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	4413      	add	r3, r2
 8002df0:	330c      	adds	r3, #12
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b299      	uxth	r1, r3
 8002df8:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <Task_Playing+0x6e8>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	4413      	add	r3, r2
 8002e00:	330c      	adds	r3, #12
 8002e02:	460a      	mov	r2, r1
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e000      	b.n	8002e0a <Task_Playing+0x552>
						continue;
 8002e08:	bf00      	nop
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <Task_Playing+0x6f0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	f6ff af00 	blt.w	8002c1e <Task_Playing+0x366>
 8002e1e:	e059      	b.n	8002ed4 <Task_Playing+0x61c>
							}
						}
					}
				}
			}else{
				Player[current_player].point += 1;
 8002e20:	4b62      	ldr	r3, [pc, #392]	; (8002fac <Task_Playing+0x6f4>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4a5e      	ldr	r2, [pc, #376]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	4a5f      	ldr	r2, [pc, #380]	; (8002fac <Task_Playing+0x6f4>)
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4610      	mov	r0, r2
 8002e34:	3301      	adds	r3, #1
 8002e36:	b299      	uxth	r1, r3
 8002e38:	4a59      	ldr	r2, [pc, #356]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e3a:	0103      	lsls	r3, r0, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3308      	adds	r3, #8
 8002e40:	460a      	mov	r2, r1
 8002e42:	801a      	strh	r2, [r3, #0]
				if(Player[current_player].sum_signed){
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <Task_Playing+0x6f4>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02c      	beq.n	8002eb0 <Task_Playing+0x5f8>
					if(Player[current_player].sum_point == 1){
 8002e56:	4b55      	ldr	r3, [pc, #340]	; (8002fac <Task_Playing+0x6f4>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4413      	add	r3, r2
 8002e60:	330c      	adds	r3, #12
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d110      	bne.n	8002e8a <Task_Playing+0x5d2>
						Player[current_player].sum_point = 0;
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <Task_Playing+0x6f4>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	330c      	adds	r3, #12
 8002e74:	2200      	movs	r2, #0
 8002e76:	801a      	strh	r2, [r3, #0]
						Player[current_player].sum_signed = 0;
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <Task_Playing+0x6f4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4a48      	ldr	r2, [pc, #288]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	3302      	adds	r3, #2
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e024      	b.n	8002ed4 <Task_Playing+0x61c>
					}else{
						Player[current_player].sum_point -= 1;
 8002e8a:	4b48      	ldr	r3, [pc, #288]	; (8002fac <Task_Playing+0x6f4>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4a44      	ldr	r2, [pc, #272]	; (8002fa0 <Task_Playing+0x6e8>)
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	4413      	add	r3, r2
 8002e94:	330c      	adds	r3, #12
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	4a44      	ldr	r2, [pc, #272]	; (8002fac <Task_Playing+0x6f4>)
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b299      	uxth	r1, r3
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <Task_Playing+0x6e8>)
 8002ea4:	0103      	lsls	r3, r0, #4
 8002ea6:	4413      	add	r3, r2
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	460a      	mov	r2, r1
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e011      	b.n	8002ed4 <Task_Playing+0x61c>
					}
				} else{
					Player[current_player].sum_point += 1;
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <Task_Playing+0x6f4>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <Task_Playing+0x6e8>)
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	4413      	add	r3, r2
 8002eba:	330c      	adds	r3, #12
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <Task_Playing+0x6f4>)
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b299      	uxth	r1, r3
 8002ec8:	4a35      	ldr	r2, [pc, #212]	; (8002fa0 <Task_Playing+0x6e8>)
 8002eca:	0103      	lsls	r3, r0, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	330c      	adds	r3, #12
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	801a      	strh	r2, [r3, #0]
				}
			}

			//Send Display
			Task_Upload_Display();
 8002ed4:	f001 fa90 	bl	80043f8 <Task_Upload_Display>
			IRcode = 0;
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <Task_Playing+0x6f8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
			tempCode = 0;
 8002ede:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <Task_Playing+0x6fc>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <Task_Playing+0x700>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
			buzzer_stt = 1;
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <Task_Playing+0x704>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]

			while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002ef0:	e02d      	b.n	8002f4e <Task_Playing+0x696>
			{
				button_cnt_t++;
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <Task_Playing+0x708>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <Task_Playing+0x708>)
 8002efc:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <Task_Playing+0x708>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2b1e      	cmp	r3, #30
 8002f04:	d920      	bls.n	8002f48 <Task_Playing+0x690>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <Task_Playing+0x70c>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <Task_Playing+0x710>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <Task_Playing+0x70c>)
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <Task_Playing+0x710>)
 8002f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f20:	08d9      	lsrs	r1, r3, #3
 8002f22:	460b      	mov	r3, r1
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <Task_Playing+0x708>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	00da      	lsls	r2, r3, #3
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <Task_Playing+0x708>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	f7fd fe6e 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8002f48:	2064      	movs	r0, #100	; 0x64
 8002f4a:	f001 fc5d 	bl	8004808 <delay_ms>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	481e      	ldr	r0, [pc, #120]	; (8002fcc <Task_Playing+0x714>)
 8002f52:	f003 f8c3 	bl	80060dc <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d0ca      	beq.n	8002ef2 <Task_Playing+0x63a>
			}
			if(button_cnt_t > 30)
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <Task_Playing+0x708>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2b1e      	cmp	r3, #30
 8002f62:	d918      	bls.n	8002f96 <Task_Playing+0x6de>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <Task_Playing+0x70c>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <Task_Playing+0x710>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <Task_Playing+0x70c>)
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <Task_Playing+0x710>)
 8002f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7e:	08d9      	lsrs	r1, r3, #3
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2200      	movs	r2, #0
 8002f92:	f7fd fe47 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <Task_Playing+0x708>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 8002f9c:	e39a      	b.n	80036d4 <Task_Playing+0xe1c>
 8002f9e:	bf00      	nop
 8002fa0:	200000ec 	.word	0x200000ec
 8002fa4:	2000012d 	.word	0x2000012d
 8002fa8:	200000d0 	.word	0x200000d0
 8002fac:	2000012c 	.word	0x2000012c
 8002fb0:	200000c8 	.word	0x200000c8
 8002fb4:	20000210 	.word	0x20000210
 8002fb8:	20000214 	.word	0x20000214
 8002fbc:	20000016 	.word	0x20000016
 8002fc0:	200000cc 	.word	0x200000cc
 8002fc4:	200000dc 	.word	0x200000dc
 8002fc8:	cccccccd 	.word	0xcccccccd
 8002fcc:	40010c00 	.word	0x40010c00
		}
	}
	else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	489d      	ldr	r0, [pc, #628]	; (8003248 <Task_Playing+0x990>)
 8002fd4:	f003 f882 	bl	80060dc <HAL_GPIO_ReadPin>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f040 8286 	bne.w	80034ec <Task_Playing+0xc34>
		delay_ms((int)BUTTON_DELAY);
 8002fe0:	2014      	movs	r0, #20
 8002fe2:	f001 fc11 	bl	8004808 <delay_ms>
		if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	4897      	ldr	r0, [pc, #604]	; (8003248 <Task_Playing+0x990>)
 8002fea:	f003 f877 	bl	80060dc <HAL_GPIO_ReadPin>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 8370 	bne.w	80036d6 <Task_Playing+0xe1e>

			//turn_time_s = PlayCfg.Parameter.turn_time_s;
			if(hit_get_point_cnt > 0)
 8002ff6:	4b95      	ldr	r3, [pc, #596]	; (800324c <Task_Playing+0x994>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <Task_Playing+0x752>
				hit_get_point_cnt--;
 8002ffe:	4b93      	ldr	r3, [pc, #588]	; (800324c <Task_Playing+0x994>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b91      	ldr	r3, [pc, #580]	; (800324c <Task_Playing+0x994>)
 8003008:	801a      	strh	r2, [r3, #0]
			//Update CTCN
			if(hit_get_point_cnt < Player[current_player].max_hit_get_point)
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <Task_Playing+0x998>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4a91      	ldr	r2, [pc, #580]	; (8003254 <Task_Playing+0x99c>)
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	4413      	add	r3, r2
 8003014:	330a      	adds	r3, #10
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	4b8c      	ldr	r3, [pc, #560]	; (800324c <Task_Playing+0x994>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d90a      	bls.n	8003036 <Task_Playing+0x77e>
				Player[current_player].max_hit_get_point = hit_get_point_cnt;
 8003020:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <Task_Playing+0x998>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	4b89      	ldr	r3, [pc, #548]	; (800324c <Task_Playing+0x994>)
 8003028:	8819      	ldrh	r1, [r3, #0]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <Task_Playing+0x99c>)
 800302c:	0103      	lsls	r3, r0, #4
 800302e:	4413      	add	r3, r2
 8003030:	330a      	adds	r3, #10
 8003032:	460a      	mov	r2, r1
 8003034:	801a      	strh	r2, [r3, #0]

			if((hit_get_point_cnt < 100) && (all_turn_cnt < 100)){
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <Task_Playing+0x994>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b63      	cmp	r3, #99	; 0x63
 800303c:	d82e      	bhi.n	800309c <Task_Playing+0x7e4>
 800303e:	4b86      	ldr	r3, [pc, #536]	; (8003258 <Task_Playing+0x9a0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b63      	cmp	r3, #99	; 0x63
 8003044:	d82a      	bhi.n	800309c <Task_Playing+0x7e4>
				Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 8003046:	4b84      	ldr	r3, [pc, #528]	; (8003258 <Task_Playing+0x9a0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a84      	ldr	r2, [pc, #528]	; (800325c <Task_Playing+0x9a4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	4618      	mov	r0, r3
 8003054:	4b80      	ldr	r3, [pc, #512]	; (8003258 <Task_Playing+0x9a0>)
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	4b80      	ldr	r3, [pc, #512]	; (800325c <Task_Playing+0x9a4>)
 800305a:	fba3 2301 	umull	r2, r3, r3, r1
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	1aca      	subs	r2, r1, r3
 800306a:	4614      	mov	r4, r2
 800306c:	4b77      	ldr	r3, [pc, #476]	; (800324c <Task_Playing+0x994>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	4a7a      	ldr	r2, [pc, #488]	; (800325c <Task_Playing+0x9a4>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	08db      	lsrs	r3, r3, #3
 8003078:	b29b      	uxth	r3, r3
 800307a:	461d      	mov	r5, r3
 800307c:	4b73      	ldr	r3, [pc, #460]	; (800324c <Task_Playing+0x994>)
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	4b76      	ldr	r3, [pc, #472]	; (800325c <Task_Playing+0x9a4>)
 8003082:	fba3 1302 	umull	r1, r3, r3, r2
 8003086:	08d9      	lsrs	r1, r3, #3
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	462a      	mov	r2, r5
 8003096:	4621      	mov	r1, r4
 8003098:	f7fd fe38 	bl	8000d0c <Led7HitCnt_Display>
			}

			Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 800309c:	4b6e      	ldr	r3, [pc, #440]	; (8003258 <Task_Playing+0x9a0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fb4e 	bl	8000744 <__aeabi_ui2f>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <Task_Playing+0x9a8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7fd fb9f 	bl	80007f4 <__aeabi_fmul>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461c      	mov	r4, r3
 80030ba:	4b64      	ldr	r3, [pc, #400]	; (800324c <Task_Playing+0x994>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fb44 	bl	800074c <__aeabi_i2f>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4619      	mov	r1, r3
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7fd fa8b 	bl	80005e4 <__addsf3>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461d      	mov	r5, r3
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <Task_Playing+0x9a0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fb34 	bl	8000744 <__aeabi_ui2f>
 80030dc:	4603      	mov	r3, r0
 80030de:	4a5c      	ldr	r2, [pc, #368]	; (8003250 <Task_Playing+0x998>)
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4614      	mov	r4, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4628      	mov	r0, r5
 80030e8:	f7fd fc38 	bl	800095c <__aeabi_fdiv>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4619      	mov	r1, r3
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <Task_Playing+0x99c>)
 80030f2:	0123      	lsls	r3, r4, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	6019      	str	r1, [r3, #0]
			if(Player[current_player].average>99.99)
 80030fa:	4b55      	ldr	r3, [pc, #340]	; (8003250 <Task_Playing+0x998>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4a55      	ldr	r2, [pc, #340]	; (8003254 <Task_Playing+0x99c>)
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd f985 	bl	8000418 <__aeabi_f2d>
 800310e:	a34c      	add	r3, pc, #304	; (adr r3, 8003240 <Task_Playing+0x988>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f7fd fa56 	bl	80005c4 <__aeabi_dcmpgt>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <Task_Playing+0x876>
				Player[current_player].average = 99.99;
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <Task_Playing+0x998>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <Task_Playing+0x99c>)
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	4a4e      	ldr	r2, [pc, #312]	; (8003264 <Task_Playing+0x9ac>)
 800312c:	601a      	str	r2, [r3, #0]

			if(PlayCfg.Parameter.mode_signed)
 800312e:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <Task_Playing+0x9b0>)
 8003130:	7a1b      	ldrb	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8109 	beq.w	800334a <Task_Playing+0xa92>
			{
				point_plus = get_player_available() - 1;
 8003138:	f001 f9d6 	bl	80044e8 <get_player_available>
 800313c:	4603      	mov	r3, r0
 800313e:	3b01      	subs	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <Task_Playing+0x9b4>)
 8003144:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e0f6      	b.n	800333a <Task_Playing+0xa82>
				{
					if(Player[i].point == 0)
 800314c:	4a41      	ldr	r2, [pc, #260]	; (8003254 <Task_Playing+0x99c>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	3308      	adds	r3, #8
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80ea 	beq.w	8003332 <Task_Playing+0xa7a>
						continue;

					if(i==current_player){
 800315e:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <Task_Playing+0x998>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4293      	cmp	r3, r2
 8003168:	f040 8095 	bne.w	8003296 <Task_Playing+0x9de>
						if(Player[i].point >= point_plus)
 800316c:	4a39      	ldr	r2, [pc, #228]	; (8003254 <Task_Playing+0x99c>)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	3308      	adds	r3, #8
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	4b3c      	ldr	r3, [pc, #240]	; (800326c <Task_Playing+0x9b4>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	429a      	cmp	r2, r3
 8003180:	d315      	bcc.n	80031ae <Task_Playing+0x8f6>
							Player[current_player].point -= point_plus;
 8003182:	4b33      	ldr	r3, [pc, #204]	; (8003250 <Task_Playing+0x998>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4a33      	ldr	r2, [pc, #204]	; (8003254 <Task_Playing+0x99c>)
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	3308      	adds	r3, #8
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <Task_Playing+0x9b4>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	492e      	ldr	r1, [pc, #184]	; (8003250 <Task_Playing+0x998>)
 8003198:	7809      	ldrb	r1, [r1, #0]
 800319a:	4608      	mov	r0, r1
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b299      	uxth	r1, r3
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <Task_Playing+0x99c>)
 80031a2:	0103      	lsls	r3, r0, #4
 80031a4:	4413      	add	r3, r2
 80031a6:	3308      	adds	r3, #8
 80031a8:	460a      	mov	r2, r1
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e007      	b.n	80031be <Task_Playing+0x906>
						else
							Player[current_player].point = 0;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <Task_Playing+0x998>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4a28      	ldr	r2, [pc, #160]	; (8003254 <Task_Playing+0x99c>)
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4413      	add	r3, r2
 80031b8:	3308      	adds	r3, #8
 80031ba:	2200      	movs	r2, #0
 80031bc:	801a      	strh	r2, [r3, #0]

						if(Player[i].sum_signed){
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <Task_Playing+0x99c>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	4413      	add	r3, r2
 80031c6:	3302      	adds	r3, #2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d012      	beq.n	80031f4 <Task_Playing+0x93c>
							Player[i].sum_point += point_plus;
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <Task_Playing+0x99c>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4413      	add	r3, r2
 80031d6:	330c      	adds	r3, #12
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <Task_Playing+0x9b4>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	b299      	uxth	r1, r3
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <Task_Playing+0x99c>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	330c      	adds	r3, #12
 80031ee:	460a      	mov	r2, r1
 80031f0:	801a      	strh	r2, [r3, #0]
 80031f2:	e09f      	b.n	8003334 <Task_Playing+0xa7c>
						}else{
							if(point_plus > Player[i].sum_point){
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <Task_Playing+0x9b4>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	4916      	ldr	r1, [pc, #88]	; (8003254 <Task_Playing+0x99c>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	440b      	add	r3, r1
 8003202:	330c      	adds	r3, #12
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d932      	bls.n	8003270 <Task_Playing+0x9b8>
								Player[i].sum_point = point_plus - Player[i].sum_point;
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <Task_Playing+0x9b4>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b29a      	uxth	r2, r3
 8003210:	4910      	ldr	r1, [pc, #64]	; (8003254 <Task_Playing+0x99c>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	440b      	add	r3, r1
 8003218:	330c      	adds	r3, #12
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	b299      	uxth	r1, r3
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <Task_Playing+0x99c>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4413      	add	r3, r2
 8003228:	330c      	adds	r3, #12
 800322a:	460a      	mov	r2, r1
 800322c:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 1;
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <Task_Playing+0x99c>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	3302      	adds	r3, #2
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e07a      	b.n	8003334 <Task_Playing+0xa7c>
 800323e:	bf00      	nop
 8003240:	28f5c28f 	.word	0x28f5c28f
 8003244:	4058ff5c 	.word	0x4058ff5c
 8003248:	40010c00 	.word	0x40010c00
 800324c:	200000e8 	.word	0x200000e8
 8003250:	2000012c 	.word	0x2000012c
 8003254:	200000ec 	.word	0x200000ec
 8003258:	200000e0 	.word	0x200000e0
 800325c:	cccccccd 	.word	0xcccccccd
 8003260:	200000e4 	.word	0x200000e4
 8003264:	42c7fae1 	.word	0x42c7fae1
 8003268:	200000d0 	.word	0x200000d0
 800326c:	2000012d 	.word	0x2000012d
							}else{
								Player[i].sum_point -= point_plus;
 8003270:	4a95      	ldr	r2, [pc, #596]	; (80034c8 <Task_Playing+0xc10>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	330c      	adds	r3, #12
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	4b93      	ldr	r3, [pc, #588]	; (80034cc <Task_Playing+0xc14>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	b299      	uxth	r1, r3
 8003286:	4a90      	ldr	r2, [pc, #576]	; (80034c8 <Task_Playing+0xc10>)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4413      	add	r3, r2
 800328e:	330c      	adds	r3, #12
 8003290:	460a      	mov	r2, r1
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	e04e      	b.n	8003334 <Task_Playing+0xa7c>
							}
						}
					} else{
						Player[i].point += 1;
 8003296:	4a8c      	ldr	r2, [pc, #560]	; (80034c8 <Task_Playing+0xc10>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	3308      	adds	r3, #8
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b299      	uxth	r1, r3
 80032a6:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <Task_Playing+0xc10>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4413      	add	r3, r2
 80032ae:	3308      	adds	r3, #8
 80032b0:	460a      	mov	r2, r1
 80032b2:	801a      	strh	r2, [r3, #0]
						if(Player[i].sum_signed){
 80032b4:	4a84      	ldr	r2, [pc, #528]	; (80034c8 <Task_Playing+0xc10>)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	4413      	add	r3, r2
 80032bc:	3302      	adds	r3, #2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d026      	beq.n	8003312 <Task_Playing+0xa5a>
							if(Player[i].sum_point == 1){
 80032c4:	4a80      	ldr	r2, [pc, #512]	; (80034c8 <Task_Playing+0xc10>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	330c      	adds	r3, #12
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10e      	bne.n	80032f2 <Task_Playing+0xa3a>
								Player[i].sum_point = 0;
 80032d4:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <Task_Playing+0xc10>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	330c      	adds	r3, #12
 80032de:	2200      	movs	r2, #0
 80032e0:	801a      	strh	r2, [r3, #0]
								Player[i].sum_signed = 0;
 80032e2:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <Task_Playing+0xc10>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	4413      	add	r3, r2
 80032ea:	3302      	adds	r3, #2
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e020      	b.n	8003334 <Task_Playing+0xa7c>
							}else{
								Player[i].sum_point -= 1;
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <Task_Playing+0xc10>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	330c      	adds	r3, #12
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	3b01      	subs	r3, #1
 8003300:	b299      	uxth	r1, r3
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <Task_Playing+0xc10>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	4413      	add	r3, r2
 800330a:	330c      	adds	r3, #12
 800330c:	460a      	mov	r2, r1
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	e010      	b.n	8003334 <Task_Playing+0xa7c>
							}
						} else{
							Player[i].sum_point += 1;
 8003312:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <Task_Playing+0xc10>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	4413      	add	r3, r2
 800331a:	330c      	adds	r3, #12
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b299      	uxth	r1, r3
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <Task_Playing+0xc10>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	330c      	adds	r3, #12
 800332c:	460a      	mov	r2, r1
 800332e:	801a      	strh	r2, [r3, #0]
 8003330:	e000      	b.n	8003334 <Task_Playing+0xa7c>
						continue;
 8003332:	bf00      	nop
				for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <Task_Playing+0xc18>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4293      	cmp	r3, r2
 8003344:	f6ff af02 	blt.w	800314c <Task_Playing+0x894>
 8003348:	e062      	b.n	8003410 <Task_Playing+0xb58>
						}
					}
				}
			} else{
				if(Player[current_player].point > 0)
 800334a:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <Task_Playing+0xc1c>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4a5e      	ldr	r2, [pc, #376]	; (80034c8 <Task_Playing+0xc10>)
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	3308      	adds	r3, #8
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d011      	beq.n	8003380 <Task_Playing+0xac8>
					Player[current_player].point -= 1;
 800335c:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <Task_Playing+0xc1c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	4a59      	ldr	r2, [pc, #356]	; (80034c8 <Task_Playing+0xc10>)
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	3308      	adds	r3, #8
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	4a5a      	ldr	r2, [pc, #360]	; (80034d4 <Task_Playing+0xc1c>)
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	4610      	mov	r0, r2
 8003370:	3b01      	subs	r3, #1
 8003372:	b299      	uxth	r1, r3
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <Task_Playing+0xc10>)
 8003376:	0103      	lsls	r3, r0, #4
 8003378:	4413      	add	r3, r2
 800337a:	3308      	adds	r3, #8
 800337c:	460a      	mov	r2, r1
 800337e:	801a      	strh	r2, [r3, #0]

				if(Player[current_player].sum_signed){
 8003380:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <Task_Playing+0xc1c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <Task_Playing+0xc10>)
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	3302      	adds	r3, #2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d012      	beq.n	80033b8 <Task_Playing+0xb00>
					Player[current_player].sum_point += 1;
 8003392:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <Task_Playing+0xc1c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <Task_Playing+0xc10>)
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	330c      	adds	r3, #12
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <Task_Playing+0xc1c>)
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	4610      	mov	r0, r2
 80033a6:	3301      	adds	r3, #1
 80033a8:	b299      	uxth	r1, r3
 80033aa:	4a47      	ldr	r2, [pc, #284]	; (80034c8 <Task_Playing+0xc10>)
 80033ac:	0103      	lsls	r3, r0, #4
 80033ae:	4413      	add	r3, r2
 80033b0:	330c      	adds	r3, #12
 80033b2:	460a      	mov	r2, r1
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e02b      	b.n	8003410 <Task_Playing+0xb58>
				}else{
					if(Player[current_player].sum_point == 0){
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <Task_Playing+0xc1c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4a42      	ldr	r2, [pc, #264]	; (80034c8 <Task_Playing+0xc10>)
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	4413      	add	r3, r2
 80033c2:	330c      	adds	r3, #12
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d110      	bne.n	80033ec <Task_Playing+0xb34>
						Player[current_player].sum_point = 1;
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <Task_Playing+0xc1c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <Task_Playing+0xc10>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	330c      	adds	r3, #12
 80033d6:	2201      	movs	r2, #1
 80033d8:	801a      	strh	r2, [r3, #0]
						Player[current_player].sum_signed = 1;
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <Task_Playing+0xc1c>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <Task_Playing+0xc10>)
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4413      	add	r3, r2
 80033e4:	3302      	adds	r3, #2
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e011      	b.n	8003410 <Task_Playing+0xb58>
					}else{
						Player[current_player].sum_point -= 1;
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <Task_Playing+0xc1c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4a35      	ldr	r2, [pc, #212]	; (80034c8 <Task_Playing+0xc10>)
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	4413      	add	r3, r2
 80033f6:	330c      	adds	r3, #12
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <Task_Playing+0xc1c>)
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	4610      	mov	r0, r2
 8003400:	3b01      	subs	r3, #1
 8003402:	b299      	uxth	r1, r3
 8003404:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <Task_Playing+0xc10>)
 8003406:	0103      	lsls	r3, r0, #4
 8003408:	4413      	add	r3, r2
 800340a:	330c      	adds	r3, #12
 800340c:	460a      	mov	r2, r1
 800340e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			//Send Display
			Task_Upload_Display();
 8003410:	f000 fff2 	bl	80043f8 <Task_Upload_Display>
			buzzer_stt = 1;
 8003414:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <Task_Playing+0xc20>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
			while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 800341a:	e02d      	b.n	8003478 <Task_Playing+0xbc0>
			{
				button_cnt_t++;
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <Task_Playing+0xc24>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <Task_Playing+0xc24>)
 8003426:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <Task_Playing+0xc24>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	2b1e      	cmp	r3, #30
 800342e:	d920      	bls.n	8003472 <Task_Playing+0xbba>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <Task_Playing+0xc28>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <Task_Playing+0xc2c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <Task_Playing+0xc28>)
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <Task_Playing+0xc2c>)
 8003446:	fba3 1302 	umull	r1, r3, r3, r2
 800344a:	08d9      	lsrs	r1, r3, #3
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <Task_Playing+0xc24>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	00da      	lsls	r2, r3, #3
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <Task_Playing+0xc24>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f7fd fbd9 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8003472:	2064      	movs	r0, #100	; 0x64
 8003474:	f001 f9c8 	bl	8004808 <delay_ms>
			while(MINUS_BUT_VAL == BUTTON_ACTIVE)
 8003478:	2120      	movs	r1, #32
 800347a:	481b      	ldr	r0, [pc, #108]	; (80034e8 <Task_Playing+0xc30>)
 800347c:	f002 fe2e 	bl	80060dc <HAL_GPIO_ReadPin>
 8003480:	4603      	mov	r3, r0
 8003482:	2b01      	cmp	r3, #1
 8003484:	d0ca      	beq.n	800341c <Task_Playing+0xb64>
			}
			if(button_cnt_t > 30)
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <Task_Playing+0xc24>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	2b1e      	cmp	r3, #30
 800348c:	d918      	bls.n	80034c0 <Task_Playing+0xc08>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <Task_Playing+0xc28>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <Task_Playing+0xc2c>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	b29b      	uxth	r3, r3
 800349c:	4618      	mov	r0, r3
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <Task_Playing+0xc28>)
 80034a0:	881a      	ldrh	r2, [r3, #0]
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <Task_Playing+0xc2c>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	08d9      	lsrs	r1, r3, #3
 80034aa:	460b      	mov	r3, r1
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	2200      	movs	r2, #0
 80034bc:	f7fd fbb2 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <Task_Playing+0xc24>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	e106      	b.n	80036d6 <Task_Playing+0xe1e>
 80034c8:	200000ec 	.word	0x200000ec
 80034cc:	2000012d 	.word	0x2000012d
 80034d0:	200000d0 	.word	0x200000d0
 80034d4:	2000012c 	.word	0x2000012c
 80034d8:	20000016 	.word	0x20000016
 80034dc:	200000cc 	.word	0x200000cc
 80034e0:	200000dc 	.word	0x200000dc
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	40010c00 	.word	0x40010c00
		}
	}
	else if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	4884      	ldr	r0, [pc, #528]	; (8003700 <Task_Playing+0xe48>)
 80034f0:	f002 fdf4 	bl	80060dc <HAL_GPIO_ReadPin>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d005      	beq.n	8003506 <Task_Playing+0xc4e>
 80034fa:	4b82      	ldr	r3, [pc, #520]	; (8003704 <Task_Playing+0xe4c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a82      	ldr	r2, [pc, #520]	; (8003708 <Task_Playing+0xe50>)
 8003500:	4293      	cmp	r3, r2
 8003502:	f040 80e8 	bne.w	80036d6 <Task_Playing+0xe1e>
		delay_ms((int)BUTTON_DELAY);
 8003506:	2014      	movs	r0, #20
 8003508:	f001 f97e 	bl	8004808 <delay_ms>
		if((NEXT_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_NEXT_CODE)){
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	487c      	ldr	r0, [pc, #496]	; (8003700 <Task_Playing+0xe48>)
 8003510:	f002 fde4 	bl	80060dc <HAL_GPIO_ReadPin>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d005      	beq.n	8003526 <Task_Playing+0xc6e>
 800351a:	4b7a      	ldr	r3, [pc, #488]	; (8003704 <Task_Playing+0xe4c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <Task_Playing+0xe50>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 80d8 	bne.w	80036d6 <Task_Playing+0xe1e>

			uint8_t temp_play = get_next_user(current_player);
 8003526:	4b79      	ldr	r3, [pc, #484]	; (800370c <Task_Playing+0xe54>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f802 	bl	8004534 <get_next_user>
 8003530:	4603      	mov	r3, r0
 8003532:	70fb      	strb	r3, [r7, #3]
			if(temp_play == 0xFF)
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d101      	bne.n	800353e <Task_Playing+0xc86>
				return temp_play;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	e276      	b.n	8003a2c <Task_Playing+0x1174>
			else if(Player[temp_play].addr < Player[current_player].addr)
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	4a73      	ldr	r2, [pc, #460]	; (8003710 <Task_Playing+0xe58>)
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	3301      	adds	r3, #1
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	4b70      	ldr	r3, [pc, #448]	; (800370c <Task_Playing+0xe54>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4970      	ldr	r1, [pc, #448]	; (8003710 <Task_Playing+0xe58>)
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	3301      	adds	r3, #1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d204      	bcs.n	8003566 <Task_Playing+0xcae>
				all_turn_cnt++;
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <Task_Playing+0xe5c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a6c      	ldr	r2, [pc, #432]	; (8003714 <Task_Playing+0xe5c>)
 8003564:	6013      	str	r3, [r2, #0]

			current_player = temp_play;
 8003566:	4a69      	ldr	r2, [pc, #420]	; (800370c <Task_Playing+0xe54>)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	7013      	strb	r3, [r2, #0]

			hit_get_point_cnt = 0;
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <Task_Playing+0xe60>)
 800356e:	2200      	movs	r2, #0
 8003570:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	e010      	b.n	800359a <Task_Playing+0xce2>
			{
				Player[i].sum_point = 0;
 8003578:	4a65      	ldr	r2, [pc, #404]	; (8003710 <Task_Playing+0xe58>)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4413      	add	r3, r2
 8003580:	330c      	adds	r3, #12
 8003582:	2200      	movs	r2, #0
 8003584:	801a      	strh	r2, [r3, #0]
				Player[i].sum_signed = 0;
 8003586:	4a62      	ldr	r2, [pc, #392]	; (8003710 <Task_Playing+0xe58>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	3302      	adds	r3, #2
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3301      	adds	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b60      	ldr	r3, [pc, #384]	; (800371c <Task_Playing+0xe64>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	dbe8      	blt.n	8003578 <Task_Playing+0xcc0>
			}
			if(all_turn_cnt < 100){
 80035a6:	4b5b      	ldr	r3, [pc, #364]	; (8003714 <Task_Playing+0xe5c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b63      	cmp	r3, #99	; 0x63
 80035ac:	d82a      	bhi.n	8003604 <Task_Playing+0xd4c>
				Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 80035ae:	4b59      	ldr	r3, [pc, #356]	; (8003714 <Task_Playing+0xe5c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5b      	ldr	r2, [pc, #364]	; (8003720 <Task_Playing+0xe68>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	4618      	mov	r0, r3
 80035bc:	4b55      	ldr	r3, [pc, #340]	; (8003714 <Task_Playing+0xe5c>)
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	4b57      	ldr	r3, [pc, #348]	; (8003720 <Task_Playing+0xe68>)
 80035c2:	fba3 2301 	umull	r2, r3, r3, r1
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	1aca      	subs	r2, r1, r3
 80035d2:	4614      	mov	r4, r2
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <Task_Playing+0xe60>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	4a51      	ldr	r2, [pc, #324]	; (8003720 <Task_Playing+0xe68>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461d      	mov	r5, r3
 80035e4:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <Task_Playing+0xe60>)
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	4b4d      	ldr	r3, [pc, #308]	; (8003720 <Task_Playing+0xe68>)
 80035ea:	fba3 1302 	umull	r1, r3, r3, r2
 80035ee:	08d9      	lsrs	r1, r3, #3
 80035f0:	460b      	mov	r3, r1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	462a      	mov	r2, r5
 80035fe:	4621      	mov	r1, r4
 8003600:	f7fd fb84 	bl	8000d0c <Led7HitCnt_Display>
			}
			Task_Upload_Display();
 8003604:	f000 fef8 	bl	80043f8 <Task_Upload_Display>
			IRcode = 0;
 8003608:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <Task_Playing+0xe4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
						tempCode = 0;
 800360e:	4b45      	ldr	r3, [pc, #276]	; (8003724 <Task_Playing+0xe6c>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
						bitIndex = 0;
 8003614:	4b44      	ldr	r3, [pc, #272]	; (8003728 <Task_Playing+0xe70>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
			buzzer_stt = 1;
 800361a:	4b44      	ldr	r3, [pc, #272]	; (800372c <Task_Playing+0xe74>)
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
			pTask_1st_Flag = 1;
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <Task_Playing+0xe78>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
			while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8003626:	e02d      	b.n	8003684 <Task_Playing+0xdcc>
			{
				button_cnt_t++;
 8003628:	4b42      	ldr	r3, [pc, #264]	; (8003734 <Task_Playing+0xe7c>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <Task_Playing+0xe7c>)
 8003632:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 30){
 8003634:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <Task_Playing+0xe7c>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	2b1e      	cmp	r3, #30
 800363a:	d920      	bls.n	800367e <Task_Playing+0xdc6>

					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 800363c:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <Task_Playing+0xe80>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	4a37      	ldr	r2, [pc, #220]	; (8003720 <Task_Playing+0xe68>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	b29b      	uxth	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <Task_Playing+0xe80>)
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <Task_Playing+0xe68>)
 8003652:	fba3 1302 	umull	r1, r3, r3, r2
 8003656:	08d9      	lsrs	r1, r3, #3
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	b29b      	uxth	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <Task_Playing+0xe7c>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	00da      	lsls	r2, r3, #3
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <Task_Playing+0xe7c>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f7fd fad3 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 800367e:	2064      	movs	r0, #100	; 0x64
 8003680:	f001 f8c2 	bl	8004808 <delay_ms>
			while(NEXT_BUT_VAL == BUTTON_ACTIVE)
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	481e      	ldr	r0, [pc, #120]	; (8003700 <Task_Playing+0xe48>)
 8003688:	f002 fd28 	bl	80060dc <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d0ca      	beq.n	8003628 <Task_Playing+0xd70>
			}
			if(button_cnt_t > 30)
 8003692:	4b28      	ldr	r3, [pc, #160]	; (8003734 <Task_Playing+0xe7c>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	2b1e      	cmp	r3, #30
 8003698:	d918      	bls.n	80036cc <Task_Playing+0xe14>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <Task_Playing+0xe80>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	4a20      	ldr	r2, [pc, #128]	; (8003720 <Task_Playing+0xe68>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4618      	mov	r0, r3
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <Task_Playing+0xe80>)
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <Task_Playing+0xe68>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	08d9      	lsrs	r1, r3, #3
 80036b6:	460b      	mov	r3, r1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	2200      	movs	r2, #0
 80036c8:	f7fd faac 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <Task_Playing+0xe7c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e000      	b.n	80036d6 <Task_Playing+0xe1e>
		if((PLUS_BUT_VAL == BUTTON_ACTIVE) || ((int)IRcode == (int)IR_PUSH_CODE)){
 80036d4:	bf00      	nop
		}
	}

	if(MODE_BUT_VAL == BUTTON_ACTIVE){
 80036d6:	2102      	movs	r1, #2
 80036d8:	4809      	ldr	r0, [pc, #36]	; (8003700 <Task_Playing+0xe48>)
 80036da:	f002 fcff 	bl	80060dc <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f040 8142 	bne.w	800396a <Task_Playing+0x10b2>
		delay_ms((int)BUTTON_DELAY);
 80036e6:	2014      	movs	r0, #20
 80036e8:	f001 f88e 	bl	8004808 <delay_ms>
		if(MODE_BUT_VAL == BUTTON_ACTIVE){
 80036ec:	2102      	movs	r1, #2
 80036ee:	4804      	ldr	r0, [pc, #16]	; (8003700 <Task_Playing+0xe48>)
 80036f0:	f002 fcf4 	bl	80060dc <HAL_GPIO_ReadPin>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	f040 8137 	bne.w	800396a <Task_Playing+0x10b2>
			while(MODE_BUT_VAL == BUTTON_ACTIVE)
 80036fc:	e10d      	b.n	800391a <Task_Playing+0x1062>
 80036fe:	bf00      	nop
 8003700:	40010c00 	.word	0x40010c00
 8003704:	200000c8 	.word	0x200000c8
 8003708:	00904904 	.word	0x00904904
 800370c:	2000012c 	.word	0x2000012c
 8003710:	200000ec 	.word	0x200000ec
 8003714:	200000e0 	.word	0x200000e0
 8003718:	200000e8 	.word	0x200000e8
 800371c:	200000d0 	.word	0x200000d0
 8003720:	cccccccd 	.word	0xcccccccd
 8003724:	20000210 	.word	0x20000210
 8003728:	20000214 	.word	0x20000214
 800372c:	20000016 	.word	0x20000016
 8003730:	200000ce 	.word	0x200000ce
 8003734:	200000cc 	.word	0x200000cc
 8003738:	200000dc 	.word	0x200000dc
			{
				button_cnt_t++;
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <Task_Playing+0x1030>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <Task_Playing+0x1030>)
 8003746:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 8003748:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <Task_Playing+0x1030>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b14      	cmp	r3, #20
 800374e:	f240 80e1 	bls.w	8003914 <Task_Playing+0x105c>
					Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003752:	4b66      	ldr	r3, [pc, #408]	; (80038ec <Task_Playing+0x1034>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	4a66      	ldr	r2, [pc, #408]	; (80038f0 <Task_Playing+0x1038>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	b29b      	uxth	r3, r3
 8003760:	4618      	mov	r0, r3
 8003762:	4b62      	ldr	r3, [pc, #392]	; (80038ec <Task_Playing+0x1034>)
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <Task_Playing+0x1038>)
 8003768:	fba3 1302 	umull	r1, r3, r3, r2
 800376c:	08d9      	lsrs	r1, r3, #3
 800376e:	460b      	mov	r3, r1
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <Task_Playing+0x1030>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	4b58      	ldr	r3, [pc, #352]	; (80038e8 <Task_Playing+0x1030>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	f7fd fa48 	bl	8000c24 <Led7TurnTime_Display>
					if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	4857      	ldr	r0, [pc, #348]	; (80038f4 <Task_Playing+0x103c>)
 8003798:	f002 fca0 	bl	80060dc <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d127      	bne.n	80037f2 <Task_Playing+0xf3a>
						Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask<<1)|0x01;
 80037a2:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <Task_Playing+0x1040>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	4a55      	ldr	r2, [pc, #340]	; (80038fc <Task_Playing+0x1044>)
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	b25a      	sxtb	r2, r3
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <Task_Playing+0x1040>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2d1      	uxtb	r1, r2
 80037be:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <Task_Playing+0x1044>)
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4413      	add	r3, r2
 80037c4:	460a      	mov	r2, r1
 80037c6:	701a      	strb	r2, [r3, #0]
						Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 80037c8:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <Task_Playing+0x1040>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <Task_Playing+0x1044>)
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	4413      	add	r3, r2
 80037d2:	3301      	adds	r3, #1
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <Task_Playing+0x1040>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4948      	ldr	r1, [pc, #288]	; (80038fc <Task_Playing+0x1044>)
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	440b      	add	r3, r1
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fd8d 	bl	8004304 <Task_led_xl>
						buzzer_stt = 1;
 80037ea:	4b45      	ldr	r3, [pc, #276]	; (8003900 <Task_Playing+0x1048>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e090      	b.n	8003914 <Task_Playing+0x105c>
						//while(PLUS_BUT_VAL == BUTTON_ACTIVE);
					}
					else if(MINUS_BUT_VAL == BUTTON_ACTIVE){
 80037f2:	2120      	movs	r1, #32
 80037f4:	483f      	ldr	r0, [pc, #252]	; (80038f4 <Task_Playing+0x103c>)
 80037f6:	f002 fc71 	bl	80060dc <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d133      	bne.n	8003868 <Task_Playing+0xfb0>
						if(Player[current_player].ledxl_mask != 0){
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <Task_Playing+0x1040>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <Task_Playing+0x1044>)
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d027      	beq.n	8003860 <Task_Playing+0xfa8>
							Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask>>1)&0x0F;
 8003810:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <Task_Playing+0x1040>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4a39      	ldr	r2, [pc, #228]	; (80038fc <Task_Playing+0x1044>)
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	4a35      	ldr	r2, [pc, #212]	; (80038f8 <Task_Playing+0x1040>)
 8003822:	7812      	ldrb	r2, [r2, #0]
 8003824:	4610      	mov	r0, r2
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	b2d9      	uxtb	r1, r3
 800382c:	4a33      	ldr	r2, [pc, #204]	; (80038fc <Task_Playing+0x1044>)
 800382e:	0103      	lsls	r3, r0, #4
 8003830:	4413      	add	r3, r2
 8003832:	460a      	mov	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
							Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <Task_Playing+0x1040>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a30      	ldr	r2, [pc, #192]	; (80038fc <Task_Playing+0x1044>)
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	4413      	add	r3, r2
 8003840:	3301      	adds	r3, #1
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <Task_Playing+0x1040>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	492c      	ldr	r1, [pc, #176]	; (80038fc <Task_Playing+0x1044>)
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	440b      	add	r3, r1
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fd56 	bl	8004304 <Task_led_xl>
							turn_time_s = PlayCfg.Parameter.turn_time_s;
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <Task_Playing+0x104c>)
 800385a:	889a      	ldrh	r2, [r3, #4]
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <Task_Playing+0x1034>)
 800385e:	801a      	strh	r2, [r3, #0]
						}
						buzzer_stt = 1;
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <Task_Playing+0x1048>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e055      	b.n	8003914 <Task_Playing+0x105c>
						//while(MINUS_BUT_VAL == BUTTON_ACTIVE);
					}
					else if(NEXT_BUT_VAL == BUTTON_ACTIVE){
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	4822      	ldr	r0, [pc, #136]	; (80038f4 <Task_Playing+0x103c>)
 800386c:	f002 fc36 	bl	80060dc <HAL_GPIO_ReadPin>
 8003870:	4603      	mov	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d14e      	bne.n	8003914 <Task_Playing+0x105c>
						stop_time = 1;
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <Task_Playing+0x1050>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
						current_player = 0;
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <Task_Playing+0x1040>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
						hit_get_point_cnt = 0;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <Task_Playing+0x1054>)
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
						rount_time_s = PlayCfg.Parameter.rount_time_s;
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <Task_Playing+0x104c>)
 800388a:	88da      	ldrh	r2, [r3, #6]
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <Task_Playing+0x1058>)
 800388e:	801a      	strh	r2, [r3, #0]

						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	e00b      	b.n	80038ae <Task_Playing+0xff6>
						{
							Task_Blink_Line(i+1, 0, 1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3301      	adds	r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2201      	movs	r2, #1
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd84 	bl	80043b0 <Task_Blink_Line>
						for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <Task_Playing+0x104c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4293      	cmp	r3, r2
 80038b8:	dbed      	blt.n	8003896 <Task_Playing+0xfde>
						}
						buzzer_stt = 1;
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <Task_Playing+0x1048>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
						if((PlayCfg.Parameter.mode_signed) && (PlayCfg.Parameter.playing_mode > 3)){
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <Task_Playing+0x104c>)
 80038c2:	7a1b      	ldrb	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00c      	beq.n	80038e2 <Task_Playing+0x102a>
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <Task_Playing+0x104c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d908      	bls.n	80038e2 <Task_Playing+0x102a>
							if(get_player_available() == 1){
 80038d0:	f000 fe0a 	bl	80044e8 <get_player_available>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <Task_Playing+0x1026>
								return 0xFF;
 80038da:	23ff      	movs	r3, #255	; 0xff
 80038dc:	e0a6      	b.n	8003a2c <Task_Playing+0x1174>
							}
							//Random address, close player
							update_rand_addr();
 80038de:	f000 febd 	bl	800465c <update_rand_addr>
						}
						//while(NEXT_BUT_VAL == BUTTON_ACTIVE);
						return 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0a2      	b.n	8003a2c <Task_Playing+0x1174>
 80038e6:	bf00      	nop
 80038e8:	200000cc 	.word	0x200000cc
 80038ec:	200000dc 	.word	0x200000dc
 80038f0:	cccccccd 	.word	0xcccccccd
 80038f4:	40010c00 	.word	0x40010c00
 80038f8:	2000012c 	.word	0x2000012c
 80038fc:	200000ec 	.word	0x200000ec
 8003900:	20000016 	.word	0x20000016
 8003904:	200000d0 	.word	0x200000d0
 8003908:	20000130 	.word	0x20000130
 800390c:	200000e8 	.word	0x200000e8
 8003910:	200000de 	.word	0x200000de
					}
				}
				delay_ms(100);
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	f000 ff77 	bl	8004808 <delay_ms>
			while(MODE_BUT_VAL == BUTTON_ACTIVE)
 800391a:	2102      	movs	r1, #2
 800391c:	4845      	ldr	r0, [pc, #276]	; (8003a34 <Task_Playing+0x117c>)
 800391e:	f002 fbdd 	bl	80060dc <HAL_GPIO_ReadPin>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	f43f af09 	beq.w	800373c <Task_Playing+0xe84>
			}
			if(button_cnt_t > 20)
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <Task_Playing+0x1180>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	2b14      	cmp	r3, #20
 8003930:	d918      	bls.n	8003964 <Task_Playing+0x10ac>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 0, 0);
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <Task_Playing+0x1184>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <Task_Playing+0x1188>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	08db      	lsrs	r3, r3, #3
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <Task_Playing+0x1184>)
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <Task_Playing+0x1188>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	08d9      	lsrs	r1, r3, #3
 800394e:	460b      	mov	r3, r1
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	b29b      	uxth	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	2300      	movs	r3, #0
 800395e:	2200      	movs	r2, #0
 8003960:	f7fd f960 	bl	8000c24 <Led7TurnTime_Display>
			button_cnt_t = 0;
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <Task_Playing+0x1180>)
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]
		}
	}

	if((int)IRcode == (int)IR_LEDXL_CODE){
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <Task_Playing+0x118c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <Task_Playing+0x1190>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d13b      	bne.n	80039ec <Task_Playing+0x1134>
		IRcode = 0;
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <Task_Playing+0x118c>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
		tempCode = 0;
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <Task_Playing+0x1194>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
		bitIndex = 0;
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <Task_Playing+0x1198>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
		if(Player[current_player].ledxl_mask != 0){
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <Task_Playing+0x119c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <Task_Playing+0x11a0>)
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d027      	beq.n	80039e6 <Task_Playing+0x112e>
			Player[current_player].ledxl_mask = (Player[current_player].ledxl_mask>>1)&0x0F;
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <Task_Playing+0x119c>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <Task_Playing+0x11a0>)
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <Task_Playing+0x119c>)
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	4610      	mov	r0, r2
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	b2d9      	uxtb	r1, r3
 80039b2:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <Task_Playing+0x11a0>)
 80039b4:	0103      	lsls	r3, r0, #4
 80039b6:	4413      	add	r3, r2
 80039b8:	460a      	mov	r2, r1
 80039ba:	701a      	strb	r2, [r3, #0]
			Task_led_xl(Player[current_player].addr, Player[current_player].ledxl_mask);
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <Task_Playing+0x119c>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <Task_Playing+0x11a0>)
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4413      	add	r3, r2
 80039c6:	3301      	adds	r3, #1
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <Task_Playing+0x119c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4922      	ldr	r1, [pc, #136]	; (8003a58 <Task_Playing+0x11a0>)
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	440b      	add	r3, r1
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fc93 	bl	8004304 <Task_led_xl>
			turn_time_s = PlayCfg.Parameter.turn_time_s;
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <Task_Playing+0x11a4>)
 80039e0:	889a      	ldrh	r2, [r3, #4]
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <Task_Playing+0x1184>)
 80039e4:	801a      	strh	r2, [r3, #0]
		}
		buzzer_stt = 1;
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <Task_Playing+0x11a8>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
	}

	if((int)IRcode == (int)IR_STOP_CODE)
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <Task_Playing+0x118c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <Task_Playing+0x11ac>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d119      	bne.n	8003a2a <Task_Playing+0x1172>
	{
		IRcode = 0;
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <Task_Playing+0x118c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
		tempCode = 0;
 80039fc:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <Task_Playing+0x1194>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
		bitIndex = 0;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <Task_Playing+0x1198>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]

		buzzer_stt = 1;
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <Task_Playing+0x11a8>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
		if(stop_time)
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <Task_Playing+0x11b0>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <Task_Playing+0x1166>
			stop_time = 0;
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <Task_Playing+0x11b0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e005      	b.n	8003a2a <Task_Playing+0x1172>
		else{
			temp_s = 0;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <Task_Playing+0x11b4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	801a      	strh	r2, [r3, #0]
			stop_time = 1;
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <Task_Playing+0x11b0>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
		}
	}

	return 0;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}
 8003a34:	40010c00 	.word	0x40010c00
 8003a38:	200000cc 	.word	0x200000cc
 8003a3c:	200000dc 	.word	0x200000dc
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	200000c8 	.word	0x200000c8
 8003a48:	00908908 	.word	0x00908908
 8003a4c:	20000210 	.word	0x20000210
 8003a50:	20000214 	.word	0x20000214
 8003a54:	2000012c 	.word	0x2000012c
 8003a58:	200000ec 	.word	0x200000ec
 8003a5c:	200000d0 	.word	0x200000d0
 8003a60:	20000016 	.word	0x20000016
 8003a64:	00920920 	.word	0x00920920
 8003a68:	20000130 	.word	0x20000130
 8003a6c:	2000012e 	.word	0x2000012e

08003a70 <Task_TestMode_Display>:

void Task_TestMode_Display(uint8_t global_num, uint32_t irCODE)
{
 8003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	b098      	sub	sp, #96	; 0x60
 8003a76:	af0e      	add	r7, sp, #56	; 0x38
 8003a78:	4603      	mov	r3, r0
 8003a7a:	6239      	str	r1, [r7, #32]
 8003a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	static uint8_t lednum = 16;
	buzzer_stt = 1;
 8003a80:	4b6b      	ldr	r3, [pc, #428]	; (8003c30 <Task_TestMode_Display+0x1c0>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]

	Task_Led_StartPoint(global_num, global_num, global_num);
 8003a86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a8a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fc4c 	bl	8004330 <Task_Led_StartPoint>

	if(lednum%16>7)
 8003a98:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <Task_TestMode_Display+0x4e>
		Led7TurnTime_Display(global_num, global_num, 8, (lednum%8));
 8003aa6:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003aaa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	f7fd f8b4 	bl	8000c24 <Led7TurnTime_Display>
 8003abc:	e00a      	b.n	8003ad4 <Task_TestMode_Display+0x64>
	else
		Led7TurnTime_Display(global_num, global_num, lednum%8, 0);
 8003abe:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003ac2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003ac6:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f003 0207 	and.w	r2, r3, #7
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f7fd f8a8 	bl	8000c24 <Led7TurnTime_Display>

	Led7HitCnt_Display(global_num, global_num, global_num, global_num);
 8003ad4:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003ad8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003adc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae4:	f7fd f912 	bl	8000d0c <Led7HitCnt_Display>
	Led7RoundTime_Display(global_num, global_num, global_num, global_num, 1);
 8003ae8:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003aec:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003af0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af8:	2401      	movs	r4, #1
 8003afa:	9400      	str	r4, [sp, #0]
 8003afc:	f7fd f976 	bl	8000dec <Led7RoundTime_Display>

	if(IRcode == 0){
 8003b00:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <Task_TestMode_Display+0x1c8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d14d      	bne.n	8003ba4 <Task_TestMode_Display+0x134>
		printf("ADDR0%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n", (int)DATA_LED7_TYPE,
 8003b08:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8003b0c:	f897 e027 	ldrb.w	lr, [r7, #39]	; 0x27
 8003b10:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003b14:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003b18:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003b1c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003b20:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b2e:	61ba      	str	r2, [r7, #24]
 8003b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b3a:	613a      	str	r2, [r7, #16]
 8003b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b46:	60ba      	str	r2, [r7, #8]
 8003b48:	f897 8027 	ldrb.w	r8, [r7, #39]	; 0x27
 8003b4c:	f8c7 8004 	str.w	r8, [r7, #4]
 8003b50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b58:	930d      	str	r3, [sp, #52]	; 0x34
 8003b5a:	920c      	str	r2, [sp, #48]	; 0x30
 8003b5c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8003b60:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003b64:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8003b68:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003b6c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003b70:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003b74:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8003b78:	f8cd 8020 	str.w	r8, [sp, #32]
 8003b7c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8003b80:	f8cd 801c 	str.w	r8, [sp, #28]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	9206      	str	r2, [sp, #24]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	9305      	str	r3, [sp, #20]
 8003b8c:	9604      	str	r6, [sp, #16]
 8003b8e:	9503      	str	r5, [sp, #12]
 8003b90:	9402      	str	r4, [sp, #8]
 8003b92:	9001      	str	r0, [sp, #4]
 8003b94:	9100      	str	r1, [sp, #0]
 8003b96:	4673      	mov	r3, lr
 8003b98:	4662      	mov	r2, ip
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4827      	ldr	r0, [pc, #156]	; (8003c3c <Task_TestMode_Display+0x1cc>)
 8003b9e:	f004 f86f 	bl	8007c80 <iprintf>
 8003ba2:	e02c      	b.n	8003bfe <Task_TestMode_Display+0x18e>
				global_num, global_num, global_num, global_num, global_num,
				global_num, global_num, global_num, global_num, global_num,
				global_num, global_num, global_num, global_num, global_num, global_num);
	}
	else{
		printf("ADDR0%d%d%d%d%d%d%d%d%d%d%d%x\n", (int)DATA_LED7_TYPE,
 8003ba4:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8003ba8:	f897 e027 	ldrb.w	lr, [r7, #39]	; 0x27
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bb4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003bb8:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003bbc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003bc0:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003bc4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003bc8:	f897 8027 	ldrb.w	r8, [r7, #39]	; 0x27
 8003bcc:	f8c7 801c 	str.w	r8, [r7, #28]
 8003bd0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003c38 <Task_TestMode_Display+0x1c8>
 8003bd4:	f8d8 8000 	ldr.w	r8, [r8]
 8003bd8:	f8cd 8020 	str.w	r8, [sp, #32]
 8003bdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003be0:	f8cd 801c 	str.w	r8, [sp, #28]
 8003be4:	9606      	str	r6, [sp, #24]
 8003be6:	9505      	str	r5, [sp, #20]
 8003be8:	9404      	str	r4, [sp, #16]
 8003bea:	9003      	str	r0, [sp, #12]
 8003bec:	9102      	str	r1, [sp, #8]
 8003bee:	9201      	str	r2, [sp, #4]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	4673      	mov	r3, lr
 8003bf4:	4662      	mov	r2, ip
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4811      	ldr	r0, [pc, #68]	; (8003c40 <Task_TestMode_Display+0x1d0>)
 8003bfa:	f004 f841 	bl	8007c80 <iprintf>
					global_num, global_num, global_num, global_num, global_num,
					global_num, global_num, global_num, global_num, global_num, (int)IRcode);
	}
	printf("ADDR0%d\n", (int)UPDATE_LED7_TYPE);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4810      	ldr	r0, [pc, #64]	; (8003c44 <Task_TestMode_Display+0x1d4>)
 8003c02:	f004 f83d 	bl	8007c80 <iprintf>
	delay_ms(200);
 8003c06:	20c8      	movs	r0, #200	; 0xc8
 8003c08:	f000 fdfe 	bl	8004808 <delay_ms>

	lednum--;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003c16:	701a      	strb	r2, [r3, #0]
	if(lednum == 0)
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <Task_TestMode_Display+0x1b6>
		lednum = 16;
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <Task_TestMode_Display+0x1c4>)
 8003c22:	2210      	movs	r2, #16
 8003c24:	701a      	strb	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3728      	adds	r7, #40	; 0x28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	20000016 	.word	0x20000016
 8003c34:	20000018 	.word	0x20000018
 8003c38:	200000c8 	.word	0x200000c8
 8003c3c:	08008cac 	.word	0x08008cac
 8003c40:	08008cd8 	.word	0x08008cd8
 8003c44:	08008cf8 	.word	0x08008cf8

08003c48 <Task_Run_TestMode>:

uint8_t Task_Run_TestMode(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	static uint8_t num = 0;
	static uint8_t lxl_mask = 0x0F;

	if(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	48a6      	ldr	r0, [pc, #664]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003c50:	f002 fa44 	bl	80060dc <HAL_GPIO_ReadPin>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d178      	bne.n	8003d4c <Task_Run_TestMode+0x104>
	{
		delay_ms((int)BUTTON_DELAY);
 8003c5a:	2014      	movs	r0, #20
 8003c5c:	f000 fdd4 	bl	8004808 <delay_ms>
		if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	48a1      	ldr	r0, [pc, #644]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003c64:	f002 fa3a 	bl	80060dc <HAL_GPIO_ReadPin>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	f040 8139 	bne.w	8003ee2 <Task_Run_TestMode+0x29a>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003c70:	e02d      	b.n	8003cce <Task_Run_TestMode+0x86>
				button_cnt_t++;
 8003c72:	4b9e      	ldr	r3, [pc, #632]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	3301      	adds	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	4b9c      	ldr	r3, [pc, #624]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003c7c:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 8003c7e:	4b9b      	ldr	r3, [pc, #620]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	2b14      	cmp	r3, #20
 8003c84:	d920      	bls.n	8003cc8 <Task_Run_TestMode+0x80>
					Led7TurnTime_Display(num/10, num%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003c86:	4b9a      	ldr	r3, [pc, #616]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4a9a      	ldr	r2, [pc, #616]	; (8003ef4 <Task_Run_TestMode+0x2ac>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4618      	mov	r0, r3
 8003c96:	4b96      	ldr	r3, [pc, #600]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	4b96      	ldr	r3, [pc, #600]	; (8003ef4 <Task_Run_TestMode+0x2ac>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	08d9      	lsrs	r1, r3, #3
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4b8e      	ldr	r3, [pc, #568]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	00da      	lsls	r2, r3, #3
 8003cba:	4b8c      	ldr	r3, [pc, #560]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	f7fc ffae 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8003cc8:	2064      	movs	r0, #100	; 0x64
 8003cca:	f000 fd9d 	bl	8004808 <delay_ms>
			while(PLUS_BUT_VAL == BUTTON_ACTIVE){
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	4885      	ldr	r0, [pc, #532]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003cd2:	f002 fa03 	bl	80060dc <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d0ca      	beq.n	8003c72 <Task_Run_TestMode+0x2a>
			}
			if(button_cnt_t > 20){
 8003cdc:	4b83      	ldr	r3, [pc, #524]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	2b14      	cmp	r3, #20
 8003ce2:	d904      	bls.n	8003cee <Task_Run_TestMode+0xa6>
				button_cnt_t = 0;
 8003ce4:	4b81      	ldr	r3, [pc, #516]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
				return 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0fa      	b.n	8003ee4 <Task_Run_TestMode+0x29c>
			}
			button_cnt_t = 0;
 8003cee:	4b7f      	ldr	r3, [pc, #508]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]

			lxl_mask = (lxl_mask>>1)&0x0F;
 8003cf4:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003d04:	701a      	strb	r2, [r3, #0]
			Task_led_xl(0, lxl_mask);
 8003d06:	4b7c      	ldr	r3, [pc, #496]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f000 faf9 	bl	8004304 <Task_led_xl>
			if(lxl_mask == 0)
 8003d12:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <Task_Run_TestMode+0xd8>
				lxl_mask = 0x1F;
 8003d1a:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003d1c:	221f      	movs	r2, #31
 8003d1e:	701a      	strb	r2, [r3, #0]

			num++;
 8003d20:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003d2a:	701a      	strb	r2, [r3, #0]
			if(num > 9)
 8003d2c:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d902      	bls.n	8003d3a <Task_Run_TestMode+0xf2>
				num = 0;
 8003d34:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
			Task_TestMode_Display(num, IRcode);
 8003d3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	4a6f      	ldr	r2, [pc, #444]	; (8003efc <Task_Run_TestMode+0x2b4>)
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe93 	bl	8003a70 <Task_TestMode_Display>
 8003d4a:	e0ca      	b.n	8003ee2 <Task_Run_TestMode+0x29a>
		}
	}
	else if ((MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (POWER_BUT_VAL == BUTTON_ACTIVE) || (IRcode != 0))
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	4866      	ldr	r0, [pc, #408]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003d50:	f002 f9c4 	bl	80060dc <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d019      	beq.n	8003d8e <Task_Run_TestMode+0x146>
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	4862      	ldr	r0, [pc, #392]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003d5e:	f002 f9bd 	bl	80060dc <HAL_GPIO_ReadPin>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d012      	beq.n	8003d8e <Task_Run_TestMode+0x146>
 8003d68:	2102      	movs	r1, #2
 8003d6a:	485f      	ldr	r0, [pc, #380]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003d6c:	f002 f9b6 	bl	80060dc <HAL_GPIO_ReadPin>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d00b      	beq.n	8003d8e <Task_Run_TestMode+0x146>
 8003d76:	2101      	movs	r1, #1
 8003d78:	485b      	ldr	r0, [pc, #364]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003d7a:	f002 f9af 	bl	80060dc <HAL_GPIO_ReadPin>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d004      	beq.n	8003d8e <Task_Run_TestMode+0x146>
 8003d84:	4b5d      	ldr	r3, [pc, #372]	; (8003efc <Task_Run_TestMode+0x2b4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80aa 	beq.w	8003ee2 <Task_Run_TestMode+0x29a>
	{
		delay_ms((int)BUTTON_DELAY);
 8003d8e:	2014      	movs	r0, #20
 8003d90:	f000 fd3a 	bl	8004808 <delay_ms>
		if((MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (POWER_BUT_VAL == BUTTON_ACTIVE) || (IRcode != 0))
 8003d94:	2120      	movs	r1, #32
 8003d96:	4854      	ldr	r0, [pc, #336]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003d98:	f002 f9a0 	bl	80060dc <HAL_GPIO_ReadPin>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d019      	beq.n	8003dd6 <Task_Run_TestMode+0x18e>
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	4850      	ldr	r0, [pc, #320]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003da6:	f002 f999 	bl	80060dc <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d012      	beq.n	8003dd6 <Task_Run_TestMode+0x18e>
 8003db0:	2102      	movs	r1, #2
 8003db2:	484d      	ldr	r0, [pc, #308]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003db4:	f002 f992 	bl	80060dc <HAL_GPIO_ReadPin>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d00b      	beq.n	8003dd6 <Task_Run_TestMode+0x18e>
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4849      	ldr	r0, [pc, #292]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003dc2:	f002 f98b 	bl	80060dc <HAL_GPIO_ReadPin>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d004      	beq.n	8003dd6 <Task_Run_TestMode+0x18e>
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <Task_Run_TestMode+0x2b4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8086 	beq.w	8003ee2 <Task_Run_TestMode+0x29a>
		{
			//IRcode = 0;

			lxl_mask = (lxl_mask>>1)&0x0F;
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b44      	ldr	r3, [pc, #272]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003de6:	701a      	strb	r2, [r3, #0]
			Task_led_xl(0, lxl_mask);
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	2000      	movs	r0, #0
 8003df0:	f000 fa88 	bl	8004304 <Task_led_xl>
			if(lxl_mask == 0)
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <Task_Run_TestMode+0x1ba>
				lxl_mask = 0x1F;
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <Task_Run_TestMode+0x2b0>)
 8003dfe:	221f      	movs	r2, #31
 8003e00:	701a      	strb	r2, [r3, #0]

			num++;
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e0c:	701a      	strb	r2, [r3, #0]
			if(num > 9)
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b09      	cmp	r3, #9
 8003e14:	d902      	bls.n	8003e1c <Task_Run_TestMode+0x1d4>
				num = 0;
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
			Task_TestMode_Display(num, IRcode);
 8003e1c:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4a36      	ldr	r2, [pc, #216]	; (8003efc <Task_Run_TestMode+0x2b4>)
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fe22 	bl	8003a70 <Task_TestMode_Display>
			IRcode = 0;
 8003e2c:	4b33      	ldr	r3, [pc, #204]	; (8003efc <Task_Run_TestMode+0x2b4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
			tempCode = 0;
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <Task_Run_TestMode+0x2b8>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <Task_Run_TestMode+0x2bc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
			while((POWER_BUT_VAL == BUTTON_ACTIVE) || (MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (PLUS_BUT_VAL == BUTTON_ACTIVE))
 8003e3e:	e02d      	b.n	8003e9c <Task_Run_TestMode+0x254>
			{
				button_cnt_t++;
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003e4a:	801a      	strh	r2, [r3, #0]
				if(button_cnt_t > 20){
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	2b14      	cmp	r3, #20
 8003e52:	d920      	bls.n	8003e96 <Task_Run_TestMode+0x24e>
					Led7TurnTime_Display(num/10, num%10, 8*(button_cnt_t%2), 8*(button_cnt_t%2));
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <Task_Run_TestMode+0x2ac>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	08db      	lsrs	r3, r3, #3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <Task_Run_TestMode+0x2a8>)
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <Task_Run_TestMode+0x2ac>)
 8003e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6e:	08d9      	lsrs	r1, r3, #3
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	00da      	lsls	r2, r3, #3
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <Task_Run_TestMode+0x2a4>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	f7fc fec7 	bl	8000c24 <Led7TurnTime_Display>
				}
				delay_ms(100);
 8003e96:	2064      	movs	r0, #100	; 0x64
 8003e98:	f000 fcb6 	bl	8004808 <delay_ms>
			while((POWER_BUT_VAL == BUTTON_ACTIVE) || (MINUS_BUT_VAL == BUTTON_ACTIVE) || (NEXT_BUT_VAL == BUTTON_ACTIVE) || (MODE_BUT_VAL == BUTTON_ACTIVE) || (PLUS_BUT_VAL == BUTTON_ACTIVE))
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4812      	ldr	r0, [pc, #72]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003ea0:	f002 f91c 	bl	80060dc <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d0ca      	beq.n	8003e40 <Task_Run_TestMode+0x1f8>
 8003eaa:	2120      	movs	r1, #32
 8003eac:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003eae:	f002 f915 	bl	80060dc <HAL_GPIO_ReadPin>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d0c3      	beq.n	8003e40 <Task_Run_TestMode+0x1f8>
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	480b      	ldr	r0, [pc, #44]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003ebc:	f002 f90e 	bl	80060dc <HAL_GPIO_ReadPin>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d0bc      	beq.n	8003e40 <Task_Run_TestMode+0x1f8>
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003eca:	f002 f907 	bl	80060dc <HAL_GPIO_ReadPin>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d0b5      	beq.n	8003e40 <Task_Run_TestMode+0x1f8>
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <Task_Run_TestMode+0x2a0>)
 8003ed8:	f002 f900 	bl	80060dc <HAL_GPIO_ReadPin>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d0ae      	beq.n	8003e40 <Task_Run_TestMode+0x1f8>
			}
		}
	}
	return 0;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	200000cc 	.word	0x200000cc
 8003ef0:	20000132 	.word	0x20000132
 8003ef4:	cccccccd 	.word	0xcccccccd
 8003ef8:	20000019 	.word	0x20000019
 8003efc:	200000c8 	.word	0x200000c8
 8003f00:	20000210 	.word	0x20000210
 8003f04:	20000214 	.word	0x20000214

08003f08 <Task_100ms>:

void Task_100ms(void)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af02      	add	r7, sp, #8
	if(task100ms_flag == 0)
 8003f0e:	4b97      	ldr	r3, [pc, #604]	; (800416c <Task_100ms+0x264>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 81c6 	beq.w	80042a6 <Task_100ms+0x39e>
		return;
	task100ms_flag = 0;
 8003f1a:	4b94      	ldr	r3, [pc, #592]	; (800416c <Task_100ms+0x264>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
//	else if(buzzer_stt == 0){
//		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
//		buzzer_stt = 0xFF;
//	}

	if(stop_time)
 8003f20:	4b93      	ldr	r3, [pc, #588]	; (8004170 <Task_100ms+0x268>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 81c0 	bne.w	80042aa <Task_100ms+0x3a2>
		return;

	temp_s++;
 8003f2a:	4b92      	ldr	r3, [pc, #584]	; (8004174 <Task_100ms+0x26c>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b90      	ldr	r3, [pc, #576]	; (8004174 <Task_100ms+0x26c>)
 8003f34:	801a      	strh	r2, [r3, #0]
	if(temp_s>=600)
 8003f36:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <Task_100ms+0x26c>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f3e:	d302      	bcc.n	8003f46 <Task_100ms+0x3e>
		temp_s = 0;
 8003f40:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <Task_100ms+0x26c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	801a      	strh	r2, [r3, #0]

	if((temp_s%10) == 0){
 8003f46:	4b8b      	ldr	r3, [pc, #556]	; (8004174 <Task_100ms+0x26c>)
 8003f48:	881a      	ldrh	r2, [r3, #0]
 8003f4a:	4b8b      	ldr	r3, [pc, #556]	; (8004178 <Task_100ms+0x270>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	08d9      	lsrs	r1, r3, #3
 8003f52:	460b      	mov	r3, r1
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 8137 	bne.w	80041d2 <Task_100ms+0x2ca>
		if(PlayCfg.Parameter.mode_signed){
 8003f64:	4b85      	ldr	r3, [pc, #532]	; (800417c <Task_100ms+0x274>)
 8003f66:	7a1b      	ldrb	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05c      	beq.n	8004026 <Task_100ms+0x11e>
			if (rount_time_s>0){
 8003f6c:	4b84      	ldr	r3, [pc, #528]	; (8004180 <Task_100ms+0x278>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80ae 	beq.w	80040d2 <Task_100ms+0x1ca>
				rount_time_s--;
 8003f76:	4b82      	ldr	r3, [pc, #520]	; (8004180 <Task_100ms+0x278>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	4b80      	ldr	r3, [pc, #512]	; (8004180 <Task_100ms+0x278>)
 8003f80:	801a      	strh	r2, [r3, #0]
				Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 8003f82:	4b7f      	ldr	r3, [pc, #508]	; (8004180 <Task_100ms+0x278>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	4a7f      	ldr	r2, [pc, #508]	; (8004184 <Task_100ms+0x27c>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4618      	mov	r0, r3
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <Task_100ms+0x278>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	4a7c      	ldr	r2, [pc, #496]	; (8004188 <Task_100ms+0x280>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	4b75      	ldr	r3, [pc, #468]	; (8004178 <Task_100ms+0x270>)
 8003fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa6:	08d9      	lsrs	r1, r3, #3
 8003fa8:	460b      	mov	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <Task_100ms+0x278>)
 8003fb8:	881a      	ldrh	r2, [r3, #0]
 8003fba:	4b73      	ldr	r3, [pc, #460]	; (8004188 <Task_100ms+0x280>)
 8003fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc0:	0959      	lsrs	r1, r3, #5
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a5b      	subs	r3, r3, r1
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4a6a      	ldr	r2, [pc, #424]	; (8004178 <Task_100ms+0x270>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461d      	mov	r5, r3
 8003fda:	4b69      	ldr	r3, [pc, #420]	; (8004180 <Task_100ms+0x278>)
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <Task_100ms+0x280>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	0959      	lsrs	r1, r3, #5
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <Task_100ms+0x270>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	08d9      	lsrs	r1, r3, #3
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	2301      	movs	r3, #1
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	462a      	mov	r2, r5
 8004010:	4621      	mov	r1, r4
 8004012:	f7fc feeb 	bl	8000dec <Led7RoundTime_Display>
				if(rount_time_s == 0){
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <Task_100ms+0x278>)
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d159      	bne.n	80040d2 <Task_100ms+0x1ca>
					buzzer_stt = 15;
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <Task_100ms+0x284>)
 8004020:	220f      	movs	r2, #15
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e055      	b.n	80040d2 <Task_100ms+0x1ca>
				}
			}
		}
		else{
			if(rount_time_s/60 <= 99){
 8004026:	4b56      	ldr	r3, [pc, #344]	; (8004180 <Task_100ms+0x278>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	f241 726f 	movw	r2, #5999	; 0x176f
 800402e:	4293      	cmp	r3, r2
 8004030:	d84f      	bhi.n	80040d2 <Task_100ms+0x1ca>
				rount_time_s++;
 8004032:	4b53      	ldr	r3, [pc, #332]	; (8004180 <Task_100ms+0x278>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b51      	ldr	r3, [pc, #324]	; (8004180 <Task_100ms+0x278>)
 800403c:	801a      	strh	r2, [r3, #0]
				Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 1);
 800403e:	4b50      	ldr	r3, [pc, #320]	; (8004180 <Task_100ms+0x278>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	4a50      	ldr	r2, [pc, #320]	; (8004184 <Task_100ms+0x27c>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	b29b      	uxth	r3, r3
 800404c:	4618      	mov	r0, r3
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <Task_100ms+0x278>)
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <Task_100ms+0x280>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	b29a      	uxth	r2, r3
 800405c:	4b46      	ldr	r3, [pc, #280]	; (8004178 <Task_100ms+0x270>)
 800405e:	fba3 1302 	umull	r1, r3, r3, r2
 8004062:	08d9      	lsrs	r1, r3, #3
 8004064:	460b      	mov	r3, r1
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	461c      	mov	r4, r3
 8004072:	4b43      	ldr	r3, [pc, #268]	; (8004180 <Task_100ms+0x278>)
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	4b44      	ldr	r3, [pc, #272]	; (8004188 <Task_100ms+0x280>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	0959      	lsrs	r1, r3, #5
 800407e:	460b      	mov	r3, r1
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a5b      	subs	r3, r3, r1
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	b29b      	uxth	r3, r3
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <Task_100ms+0x270>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	b29b      	uxth	r3, r3
 8004094:	461d      	mov	r5, r3
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <Task_100ms+0x278>)
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <Task_100ms+0x280>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	0959      	lsrs	r1, r3, #5
 80040a2:	460b      	mov	r3, r1
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b32      	ldr	r3, [pc, #200]	; (8004178 <Task_100ms+0x270>)
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	08d9      	lsrs	r1, r3, #3
 80040b6:	460b      	mov	r3, r1
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	2301      	movs	r3, #1
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	462a      	mov	r2, r5
 80040cc:	4621      	mov	r1, r4
 80040ce:	f7fc fe8d 	bl	8000dec <Led7RoundTime_Display>
			}
		}

		if(turn_time_s > 0){
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <Task_100ms+0x288>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d07b      	beq.n	80041d2 <Task_100ms+0x2ca>
			turn_time_s--;
 80040da:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <Task_100ms+0x288>)
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <Task_100ms+0x288>)
 80040e4:	801a      	strh	r2, [r3, #0]
			if(turn_time_s>=16){
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <Task_100ms+0x288>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d919      	bls.n	8004122 <Task_100ms+0x21a>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <Task_100ms+0x288>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	4a21      	ldr	r2, [pc, #132]	; (8004178 <Task_100ms+0x270>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <Task_100ms+0x288>)
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <Task_100ms+0x270>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	08d9      	lsrs	r1, r3, #3
 800410a:	460b      	mov	r3, r1
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	b29b      	uxth	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	2308      	movs	r3, #8
 800411a:	2208      	movs	r2, #8
 800411c:	f7fc fd82 	bl	8000c24 <Led7TurnTime_Display>
 8004120:	e057      	b.n	80041d2 <Task_100ms+0x2ca>
			}
			else if(turn_time_s>7){
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <Task_100ms+0x288>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2b07      	cmp	r3, #7
 8004128:	d934      	bls.n	8004194 <Task_100ms+0x28c>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, (turn_time_s%8));
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <Task_100ms+0x288>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <Task_100ms+0x270>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	b29b      	uxth	r3, r3
 8004138:	4618      	mov	r0, r3
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <Task_100ms+0x288>)
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <Task_100ms+0x270>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	08d9      	lsrs	r1, r3, #3
 8004146:	460b      	mov	r3, r1
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <Task_100ms+0x288>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	2208      	movs	r2, #8
 800415e:	f7fc fd61 	bl	8000c24 <Led7TurnTime_Display>
				buzzer_stt = 1;
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <Task_100ms+0x284>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e033      	b.n	80041d2 <Task_100ms+0x2ca>
 800416a:	bf00      	nop
 800416c:	200000c6 	.word	0x200000c6
 8004170:	20000130 	.word	0x20000130
 8004174:	2000012e 	.word	0x2000012e
 8004178:	cccccccd 	.word	0xcccccccd
 800417c:	200000d0 	.word	0x200000d0
 8004180:	200000de 	.word	0x200000de
 8004184:	1b4e81b5 	.word	0x1b4e81b5
 8004188:	88888889 	.word	0x88888889
 800418c:	20000016 	.word	0x20000016
 8004190:	200000dc 	.word	0x200000dc
			}
			else{
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, turn_time_s%8, 0);
 8004194:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <Task_100ms+0x3a8>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <Task_100ms+0x3ac>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4618      	mov	r0, r3
 80041a4:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <Task_100ms+0x3a8>)
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <Task_100ms+0x3ac>)
 80041aa:	fba3 1302 	umull	r1, r3, r3, r2
 80041ae:	08d9      	lsrs	r1, r3, #3
 80041b0:	460b      	mov	r3, r1
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	4b3c      	ldr	r3, [pc, #240]	; (80042b0 <Task_100ms+0x3a8>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	2300      	movs	r3, #0
 80041c8:	f7fc fd2c 	bl	8000c24 <Led7TurnTime_Display>
				buzzer_stt = 1;
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <Task_100ms+0x3b0>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(((temp_s%5) == 0) && ((temp_s%10) != 0) && (temp_s != 0))
 80041d2:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <Task_100ms+0x3b4>)
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <Task_100ms+0x3ac>)
 80041d8:	fba3 1302 	umull	r1, r3, r3, r2
 80041dc:	0899      	lsrs	r1, r3, #2
 80041de:	460b      	mov	r3, r1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d15f      	bne.n	80042ac <Task_100ms+0x3a4>
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <Task_100ms+0x3b4>)
 80041ee:	881a      	ldrh	r2, [r3, #0]
 80041f0:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <Task_100ms+0x3ac>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	08d9      	lsrs	r1, r3, #3
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d051      	beq.n	80042ac <Task_100ms+0x3a4>
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <Task_100ms+0x3b4>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d04d      	beq.n	80042ac <Task_100ms+0x3a4>
	{
		Led7RoundTime_Display((rount_time_s/60)/10, (rount_time_s/60)%10, (rount_time_s%60)/10, (rount_time_s%60)%10, 0);
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <Task_100ms+0x3b8>)
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <Task_100ms+0x3bc>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	b29b      	uxth	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <Task_100ms+0x3b8>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <Task_100ms+0x3c0>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	b29a      	uxth	r2, r3
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <Task_100ms+0x3ac>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	08d9      	lsrs	r1, r3, #3
 8004236:	460b      	mov	r3, r1
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	461c      	mov	r4, r3
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <Task_100ms+0x3b8>)
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <Task_100ms+0x3c0>)
 800424a:	fba3 1302 	umull	r1, r3, r3, r2
 800424e:	0959      	lsrs	r1, r3, #5
 8004250:	460b      	mov	r3, r1
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <Task_100ms+0x3ac>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	b29b      	uxth	r3, r3
 8004266:	461d      	mov	r5, r3
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <Task_100ms+0x3b8>)
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <Task_100ms+0x3c0>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	0959      	lsrs	r1, r3, #5
 8004274:	460b      	mov	r3, r1
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a5b      	subs	r3, r3, r1
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <Task_100ms+0x3ac>)
 8004282:	fba3 1302 	umull	r1, r3, r3, r2
 8004286:	08d9      	lsrs	r1, r3, #3
 8004288:	460b      	mov	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	462a      	mov	r2, r5
 800429e:	4621      	mov	r1, r4
 80042a0:	f7fc fda4 	bl	8000dec <Led7RoundTime_Display>
 80042a4:	e002      	b.n	80042ac <Task_100ms+0x3a4>
		return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <Task_100ms+0x3a4>
		return;
 80042aa:	bf00      	nop
	}
}
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}
 80042b0:	200000dc 	.word	0x200000dc
 80042b4:	cccccccd 	.word	0xcccccccd
 80042b8:	20000016 	.word	0x20000016
 80042bc:	2000012e 	.word	0x2000012e
 80042c0:	200000de 	.word	0x200000de
 80042c4:	1b4e81b5 	.word	0x1b4e81b5
 80042c8:	88888889 	.word	0x88888889

080042cc <Task_Clear_Display>:

void Task_Clear_Display(uint8_t addr)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
	printf("ADDR%d%dEEEEEEEEEEEEEEEE\n", (int)addr, (int)DATA_LED7_TYPE);
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	2201      	movs	r2, #1
 80042da:	4619      	mov	r1, r3
 80042dc:	4807      	ldr	r0, [pc, #28]	; (80042fc <Task_Clear_Display+0x30>)
 80042de:	f003 fccf 	bl	8007c80 <iprintf>
	printf("ADDR%d%d\n", (int)addr, (int)UPDATE_LED7_TYPE);
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2202      	movs	r2, #2
 80042e6:	4619      	mov	r1, r3
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <Task_Clear_Display+0x34>)
 80042ea:	f003 fcc9 	bl	8007c80 <iprintf>
	delay_ms(200);
 80042ee:	20c8      	movs	r0, #200	; 0xc8
 80042f0:	f000 fa8a 	bl	8004808 <delay_ms>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08008d04 	.word	0x08008d04
 8004300:	08008d20 	.word	0x08008d20

08004304 <Task_led_xl>:

void Task_led_xl(uint8_t addr, uint8_t state)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	460a      	mov	r2, r1
 800430e:	71fb      	strb	r3, [r7, #7]
 8004310:	4613      	mov	r3, r2
 8004312:	71bb      	strb	r3, [r7, #6]
	printf("ADDR%d%d%c\n", addr, DATA_LEDXL_TYPE, (int)state+48);
 8004314:	79f9      	ldrb	r1, [r7, #7]
 8004316:	79bb      	ldrb	r3, [r7, #6]
 8004318:	3330      	adds	r3, #48	; 0x30
 800431a:	2203      	movs	r2, #3
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <Task_led_xl+0x28>)
 800431e:	f003 fcaf 	bl	8007c80 <iprintf>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08008d2c 	.word	0x08008d2c

08004330 <Task_Led_StartPoint>:

void Task_Led_StartPoint(uint8_t tram, uint8_t chuc, uint8_t donvi)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af02      	add	r7, sp, #8
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
 800433a:	460b      	mov	r3, r1
 800433c:	71bb      	strb	r3, [r7, #6]
 800433e:	4613      	mov	r3, r2
 8004340:	717b      	strb	r3, [r7, #5]
	if(donvi == 12){
 8004342:	797b      	ldrb	r3, [r7, #5]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d104      	bne.n	8004352 <Task_Led_StartPoint+0x22>
		printf("ADDR5%dEEE\n", DATA_LED7_TYPE);
 8004348:	2101      	movs	r1, #1
 800434a:	4814      	ldr	r0, [pc, #80]	; (800439c <Task_Led_StartPoint+0x6c>)
 800434c:	f003 fc98 	bl	8007c80 <iprintf>
 8004350:	e01c      	b.n	800438c <Task_Led_StartPoint+0x5c>
	}
	else if(donvi == 11){
 8004352:	797b      	ldrb	r3, [r7, #5]
 8004354:	2b0b      	cmp	r3, #11
 8004356:	d106      	bne.n	8004366 <Task_Led_StartPoint+0x36>
		printf("ADDR5%dE%dD\n", DATA_LED7_TYPE, chuc);
 8004358:	79bb      	ldrb	r3, [r7, #6]
 800435a:	461a      	mov	r2, r3
 800435c:	2101      	movs	r1, #1
 800435e:	4810      	ldr	r0, [pc, #64]	; (80043a0 <Task_Led_StartPoint+0x70>)
 8004360:	f003 fc8e 	bl	8007c80 <iprintf>
 8004364:	e012      	b.n	800438c <Task_Led_StartPoint+0x5c>
	}
	else if(donvi == 10){
 8004366:	797b      	ldrb	r3, [r7, #5]
 8004368:	2b0a      	cmp	r3, #10
 800436a:	d106      	bne.n	800437a <Task_Led_StartPoint+0x4a>
		printf("ADDR5%dE%dE\n", DATA_LED7_TYPE, chuc);
 800436c:	79bb      	ldrb	r3, [r7, #6]
 800436e:	461a      	mov	r2, r3
 8004370:	2101      	movs	r1, #1
 8004372:	480c      	ldr	r0, [pc, #48]	; (80043a4 <Task_Led_StartPoint+0x74>)
 8004374:	f003 fc84 	bl	8007c80 <iprintf>
 8004378:	e008      	b.n	800438c <Task_Led_StartPoint+0x5c>
	}
	else{
		printf("ADDR5%d%d%d%d\n", DATA_LED7_TYPE, (int)tram, (int)chuc, (int)donvi);
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	79b9      	ldrb	r1, [r7, #6]
 800437e:	797b      	ldrb	r3, [r7, #5]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	460b      	mov	r3, r1
 8004384:	2101      	movs	r1, #1
 8004386:	4808      	ldr	r0, [pc, #32]	; (80043a8 <Task_Led_StartPoint+0x78>)
 8004388:	f003 fc7a 	bl	8007c80 <iprintf>
	}
	printf("ADDR52\n");
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <Task_Led_StartPoint+0x7c>)
 800438e:	f003 fcfd 	bl	8007d8c <puts>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	08008d38 	.word	0x08008d38
 80043a0:	08008d44 	.word	0x08008d44
 80043a4:	08008d54 	.word	0x08008d54
 80043a8:	08008d64 	.word	0x08008d64
 80043ac:	08008d74 	.word	0x08008d74

080043b0 <Task_Blink_Line>:

void Task_Blink_Line(uint8_t addr, uint8_t state, uint8_t line)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
 80043ba:	460b      	mov	r3, r1
 80043bc:	71bb      	strb	r3, [r7, #6]
 80043be:	4613      	mov	r3, r2
 80043c0:	717b      	strb	r3, [r7, #5]
	printf("ADDR%d%d%d%d\n", (int)addr, (int)UPDATE_BLINK_STATE, (int)state, (int)line);
 80043c2:	79f9      	ldrb	r1, [r7, #7]
 80043c4:	79ba      	ldrb	r2, [r7, #6]
 80043c6:	797b      	ldrb	r3, [r7, #5]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	2204      	movs	r2, #4
 80043ce:	4803      	ldr	r0, [pc, #12]	; (80043dc <Task_Blink_Line+0x2c>)
 80043d0:	f003 fc56 	bl	8007c80 <iprintf>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	08008d7c 	.word	0x08008d7c

080043e0 <Task_Buzzer_Enable>:

void Task_Buzzer_Enable(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
	buzzer_stt = 1;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <Task_Buzzer_Enable+0x14>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000016 	.word	0x20000016

080043f8 <Task_Upload_Display>:
/* Private function -----------------------------------------------*/
static void Task_Upload_Display(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	e007      	b.n	8004414 <Task_Upload_Display+0x1c>
	{
		update_led7_data(i);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f819 	bl	8004440 <update_led7_data>
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3301      	adds	r3, #1
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <Task_Upload_Display+0x40>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4293      	cmp	r3, r2
 800441e:	dbf1      	blt.n	8004404 <Task_Upload_Display+0xc>
	}
	printf("ADDR0%d\n", (int)UPDATE_LED7_TYPE);
 8004420:	2102      	movs	r1, #2
 8004422:	4806      	ldr	r0, [pc, #24]	; (800443c <Task_Upload_Display+0x44>)
 8004424:	f003 fc2c 	bl	8007c80 <iprintf>
	delay_ms(300);
 8004428:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800442c:	f000 f9ec 	bl	8004808 <delay_ms>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200000d0 	.word	0x200000d0
 800443c:	08008cf8 	.word	0x08008cf8

08004440 <update_led7_data>:

static void update_led7_data(uint8_t player_num)
{
 8004440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	b088      	sub	sp, #32
 8004446:	af06      	add	r7, sp, #24
 8004448:	4603      	mov	r3, r0
 800444a:	71fb      	strb	r3, [r7, #7]
//				(int)0, (int)0, (int)0, (int)0, (int)0,
//				(int)0, (int)0, (int)0, (int)0, (int)0, (int)IRcode);
//	}
//	else{
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
				(int)Player[player_num].addr,
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <update_led7_data+0x9c>)
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4413      	add	r3, r2
 8004454:	3301      	adds	r3, #1
 8004456:	781b      	ldrb	r3, [r3, #0]
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 8004458:	4698      	mov	r8, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	1c5c      	adds	r4, r3, #1
				(int)DATA_LED7_TYPE,
				(int)(player_num+1),
				(int)Player[player_num].point,
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <update_led7_data+0x9c>)
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4413      	add	r3, r2
 8004466:	3308      	adds	r3, #8
 8004468:	881b      	ldrh	r3, [r3, #0]
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 800446a:	461d      	mov	r5, r3
				(int)(Player[player_num].average*100),
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <update_led7_data+0x9c>)
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4413      	add	r3, r2
 8004474:	3304      	adds	r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4919      	ldr	r1, [pc, #100]	; (80044e0 <update_led7_data+0xa0>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc f9ba 	bl	80007f4 <__aeabi_fmul>
 8004480:	4603      	mov	r3, r0
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc fb06 	bl	8000a94 <__aeabi_f2iz>
 8004488:	4601      	mov	r1, r0
				(int)Player[player_num].max_hit_get_point,
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <update_led7_data+0x9c>)
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	4413      	add	r3, r2
 8004492:	330a      	adds	r3, #10
 8004494:	881b      	ldrh	r3, [r3, #0]
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 8004496:	461e      	mov	r6, r3
				Player[player_num].sum_signed==0?'E':'D',
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	4a10      	ldr	r2, [pc, #64]	; (80044dc <update_led7_data+0x9c>)
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	4413      	add	r3, r2
 80044a0:	3302      	adds	r3, #2
 80044a2:	781b      	ldrb	r3, [r3, #0]
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <update_led7_data+0x6c>
 80044a8:	2345      	movs	r3, #69	; 0x45
 80044aa:	e000      	b.n	80044ae <update_led7_data+0x6e>
 80044ac:	2344      	movs	r3, #68	; 0x44
				(int)Player[player_num].sum_point);
 80044ae:	79fa      	ldrb	r2, [r7, #7]
 80044b0:	480a      	ldr	r0, [pc, #40]	; (80044dc <update_led7_data+0x9c>)
 80044b2:	0112      	lsls	r2, r2, #4
 80044b4:	4402      	add	r2, r0
 80044b6:	320c      	adds	r2, #12
 80044b8:	8812      	ldrh	r2, [r2, #0]
		printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80044ba:	9204      	str	r2, [sp, #16]
 80044bc:	9303      	str	r3, [sp, #12]
 80044be:	9602      	str	r6, [sp, #8]
 80044c0:	9101      	str	r1, [sp, #4]
 80044c2:	9500      	str	r5, [sp, #0]
 80044c4:	4623      	mov	r3, r4
 80044c6:	2201      	movs	r2, #1
 80044c8:	4641      	mov	r1, r8
 80044ca:	4806      	ldr	r0, [pc, #24]	; (80044e4 <update_led7_data+0xa4>)
 80044cc:	f003 fbd8 	bl	8007c80 <iprintf>
//	}
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044da:	bf00      	nop
 80044dc:	200000ec 	.word	0x200000ec
 80044e0:	42c80000 	.word	0x42c80000
 80044e4:	08008d8c 	.word	0x08008d8c

080044e8 <get_player_available>:

static uint8_t get_player_available(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
	uint8_t player = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	e00d      	b.n	8004514 <get_player_available+0x2c>
	{
		if(Player[i].point > 0){
 80044f8:	4a0c      	ldr	r2, [pc, #48]	; (800452c <get_player_available+0x44>)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	3308      	adds	r3, #8
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <get_player_available+0x26>
			player++;
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	3301      	adds	r3, #1
 800450c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PlayCfg.Parameter.playing_mode;i++)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <get_player_available+0x48>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	4293      	cmp	r3, r2
 800451e:	dbeb      	blt.n	80044f8 <get_player_available+0x10>
		}
	}
	return player;
 8004520:	79fb      	ldrb	r3, [r7, #7]
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	200000ec 	.word	0x200000ec
 8004530:	200000d0 	.word	0x200000d0

08004534 <get_next_user>:

static uint8_t get_next_user(uint8_t current_play)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_user_buff[4];
	int i, j;

	if((PlayCfg.Parameter.mode_signed == 0) || (PlayCfg.Parameter.playing_mode == 2))
 800453e:	4b45      	ldr	r3, [pc, #276]	; (8004654 <get_next_user+0x120>)
 8004540:	7a1b      	ldrb	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <get_next_user+0x1a>
 8004546:	4b43      	ldr	r3, [pc, #268]	; (8004654 <get_next_user+0x120>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d10a      	bne.n	8004564 <get_next_user+0x30>
	{
		return (current_play+1)%PlayCfg.Parameter.playing_mode;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	3301      	adds	r3, #1
 8004552:	4a40      	ldr	r2, [pc, #256]	; (8004654 <get_next_user+0x120>)
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	fb93 f1f2 	sdiv	r1, r3, r2
 800455a:	fb01 f202 	mul.w	r2, r1, r2
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e072      	b.n	800464a <get_next_user+0x116>
	}


	for(i=0;i<PlayCfg.Parameter.playing_mode;i++)
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e022      	b.n	80045b0 <get_next_user+0x7c>
	{
		for(j=0;j<PlayCfg.Parameter.playing_mode;j++)
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e016      	b.n	800459e <get_next_user+0x6a>
		{
			if(Player[j].addr == (i+1)){
 8004570:	4a39      	ldr	r2, [pc, #228]	; (8004658 <get_next_user+0x124>)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4413      	add	r3, r2
 8004578:	3301      	adds	r3, #1
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3301      	adds	r3, #1
 8004582:	429a      	cmp	r2, r3
 8004584:	d108      	bne.n	8004598 <get_next_user+0x64>
				temp_user_buff[i] = j;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	b2d9      	uxtb	r1, r3
 800458a:	f107 020c 	add.w	r2, r7, #12
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4413      	add	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	701a      	strb	r2, [r3, #0]
				break;
 8004596:	e008      	b.n	80045aa <get_next_user+0x76>
		for(j=0;j<PlayCfg.Parameter.playing_mode;j++)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <get_next_user+0x120>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4293      	cmp	r3, r2
 80045a8:	dbe2      	blt.n	8004570 <get_next_user+0x3c>
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3301      	adds	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	4b28      	ldr	r3, [pc, #160]	; (8004654 <get_next_user+0x120>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4293      	cmp	r3, r2
 80045ba:	dbd6      	blt.n	800456a <get_next_user+0x36>
			}
		}
	}
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e00a      	b.n	80045d8 <get_next_user+0xa4>
		if(temp_user_buff[i] == current_play)
 80045c2:	f107 020c 	add.w	r2, r7, #12
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	79fa      	ldrb	r2, [r7, #7]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d009      	beq.n	80045e6 <get_next_user+0xb2>
	for(i=0;i<PlayCfg.Parameter.playing_mode;i++){
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3301      	adds	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <get_next_user+0x120>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	dbee      	blt.n	80045c2 <get_next_user+0x8e>
 80045e4:	e000      	b.n	80045e8 <get_next_user+0xb4>
			break;
 80045e6:	bf00      	nop
	}

	for(j=1;j<PlayCfg.Parameter.playing_mode;j++){
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e026      	b.n	800463c <get_next_user+0x108>
		if(Player[temp_user_buff[(i+j)%PlayCfg.Parameter.playing_mode]].point > 0)
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <get_next_user+0x120>)
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80045fc:	fb01 f202 	mul.w	r2, r1, r2
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	3318      	adds	r3, #24
 8004604:	443b      	add	r3, r7
 8004606:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <get_next_user+0x124>)
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4413      	add	r3, r2
 8004610:	3308      	adds	r3, #8
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <get_next_user+0x102>
		 return temp_user_buff[(i+j)%PlayCfg.Parameter.playing_mode];
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <get_next_user+0x120>)
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	fb93 f1f2 	sdiv	r1, r3, r2
 8004626:	fb01 f202 	mul.w	r2, r1, r2
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	3318      	adds	r3, #24
 800462e:	443b      	add	r3, r7
 8004630:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004634:	e009      	b.n	800464a <get_next_user+0x116>
	for(j=1;j<PlayCfg.Parameter.playing_mode;j++){
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3301      	adds	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <get_next_user+0x120>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4293      	cmp	r3, r2
 8004646:	dbd2      	blt.n	80045ee <get_next_user+0xba>
	}

	return 0xFF;
 8004648:	23ff      	movs	r3, #255	; 0xff
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	200000d0 	.word	0x200000d0
 8004658:	200000ec 	.word	0x200000ec

0800465c <update_rand_addr>:

static void update_rand_addr(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
	uint16_t rand_input = sys_millis;
 8004662:	4b66      	ldr	r3, [pc, #408]	; (80047fc <update_rand_addr+0x1a0>)
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	81fb      	strh	r3, [r7, #14]
	uint8_t temp_user_buff[4];
	uint8_t temp_addr_buff[4];
	int i, j;
	for(i=0;i<(int)MAX_PLAYER_NUM;i++)
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e02a      	b.n	80046c4 <update_rand_addr+0x68>
	{
		for(j=0;j<(int)MAX_PLAYER_NUM;j++)
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e021      	b.n	80046b8 <update_rand_addr+0x5c>
		{
			if(Player[j].addr == (i+1)){
 8004674:	4a62      	ldr	r2, [pc, #392]	; (8004800 <update_rand_addr+0x1a4>)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4413      	add	r3, r2
 800467c:	3301      	adds	r3, #1
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	429a      	cmp	r2, r3
 8004688:	d113      	bne.n	80046b2 <update_rand_addr+0x56>
				temp_user_buff[i] = j;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	b2d9      	uxtb	r1, r3
 800468e:	f107 0208 	add.w	r2, r7, #8
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	460a      	mov	r2, r1
 8004698:	701a      	strb	r2, [r3, #0]
				temp_addr_buff[i] = Player[j].addr;
 800469a:	4a59      	ldr	r2, [pc, #356]	; (8004800 <update_rand_addr+0x1a4>)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4413      	add	r3, r2
 80046a2:	3301      	adds	r3, #1
 80046a4:	7819      	ldrb	r1, [r3, #0]
 80046a6:	1d3a      	adds	r2, r7, #4
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4413      	add	r3, r2
 80046ac:	460a      	mov	r2, r1
 80046ae:	701a      	strb	r2, [r3, #0]
				break;
 80046b0:	e005      	b.n	80046be <update_rand_addr+0x62>
		for(j=0;j<(int)MAX_PLAYER_NUM;j++)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3301      	adds	r3, #1
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	ddda      	ble.n	8004674 <update_rand_addr+0x18>
	for(i=0;i<(int)MAX_PLAYER_NUM;i++)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3301      	adds	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	ddd1      	ble.n	800466e <update_rand_addr+0x12>
			}
		}
	}

	Player[temp_user_buff[0]].addr = temp_addr_buff[1];
 80046ca:	7a3b      	ldrb	r3, [r7, #8]
 80046cc:	7979      	ldrb	r1, [r7, #5]
 80046ce:	4a4c      	ldr	r2, [pc, #304]	; (8004800 <update_rand_addr+0x1a4>)
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	4413      	add	r3, r2
 80046d4:	3301      	adds	r3, #1
 80046d6:	460a      	mov	r2, r1
 80046d8:	701a      	strb	r2, [r3, #0]
	switch(rand_input%3)
 80046da:	89fa      	ldrh	r2, [r7, #14]
 80046dc:	4b49      	ldr	r3, [pc, #292]	; (8004804 <update_rand_addr+0x1a8>)
 80046de:	fba3 1302 	umull	r1, r3, r3, r2
 80046e2:	0859      	lsrs	r1, r3, #1
 80046e4:	460b      	mov	r3, r1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	440b      	add	r3, r1
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d04f      	beq.n	8004792 <update_rand_addr+0x136>
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	dc7d      	bgt.n	80047f2 <update_rand_addr+0x196>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <update_rand_addr+0xa4>
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d019      	beq.n	8004732 <update_rand_addr+0xd6>
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
			}
			break;
		}
	}
}
 80046fe:	e078      	b.n	80047f2 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[0];
 8004700:	7a7b      	ldrb	r3, [r7, #9]
 8004702:	7939      	ldrb	r1, [r7, #4]
 8004704:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <update_rand_addr+0x1a4>)
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	3301      	adds	r3, #1
 800470c:	460a      	mov	r2, r1
 800470e:	701a      	strb	r2, [r3, #0]
			Player[temp_user_buff[2]].addr = temp_addr_buff[3];
 8004710:	7abb      	ldrb	r3, [r7, #10]
 8004712:	79f9      	ldrb	r1, [r7, #7]
 8004714:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <update_rand_addr+0x1a4>)
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4413      	add	r3, r2
 800471a:	3301      	adds	r3, #1
 800471c:	460a      	mov	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]
			Player[temp_user_buff[3]].addr = temp_addr_buff[2];
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	79b9      	ldrb	r1, [r7, #6]
 8004724:	4a36      	ldr	r2, [pc, #216]	; (8004800 <update_rand_addr+0x1a4>)
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	4413      	add	r3, r2
 800472a:	3301      	adds	r3, #1
 800472c:	460a      	mov	r2, r1
 800472e:	701a      	strb	r2, [r3, #0]
			break;
 8004730:	e05f      	b.n	80047f2 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[2];
 8004732:	7a7b      	ldrb	r3, [r7, #9]
 8004734:	79b9      	ldrb	r1, [r7, #6]
 8004736:	4a32      	ldr	r2, [pc, #200]	; (8004800 <update_rand_addr+0x1a4>)
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	4413      	add	r3, r2
 800473c:	3301      	adds	r3, #1
 800473e:	460a      	mov	r2, r1
 8004740:	701a      	strb	r2, [r3, #0]
			if(rand_input%2 == 1){
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <update_rand_addr+0x114>
				Player[temp_user_buff[2]].addr = temp_addr_buff[0];
 800474e:	7abb      	ldrb	r3, [r7, #10]
 8004750:	7939      	ldrb	r1, [r7, #4]
 8004752:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <update_rand_addr+0x1a4>)
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	4413      	add	r3, r2
 8004758:	3301      	adds	r3, #1
 800475a:	460a      	mov	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[3];
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	79f9      	ldrb	r1, [r7, #7]
 8004762:	4a27      	ldr	r2, [pc, #156]	; (8004800 <update_rand_addr+0x1a4>)
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4413      	add	r3, r2
 8004768:	3301      	adds	r3, #1
 800476a:	460a      	mov	r2, r1
 800476c:	701a      	strb	r2, [r3, #0]
			break;
 800476e:	e040      	b.n	80047f2 <update_rand_addr+0x196>
				Player[temp_user_buff[2]].addr = temp_addr_buff[3];
 8004770:	7abb      	ldrb	r3, [r7, #10]
 8004772:	79f9      	ldrb	r1, [r7, #7]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <update_rand_addr+0x1a4>)
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	4413      	add	r3, r2
 800477a:	3301      	adds	r3, #1
 800477c:	460a      	mov	r2, r1
 800477e:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	7939      	ldrb	r1, [r7, #4]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <update_rand_addr+0x1a4>)
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4413      	add	r3, r2
 800478a:	3301      	adds	r3, #1
 800478c:	460a      	mov	r2, r1
 800478e:	701a      	strb	r2, [r3, #0]
			break;
 8004790:	e02f      	b.n	80047f2 <update_rand_addr+0x196>
			Player[temp_user_buff[1]].addr = temp_addr_buff[3];
 8004792:	7a7b      	ldrb	r3, [r7, #9]
 8004794:	79f9      	ldrb	r1, [r7, #7]
 8004796:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <update_rand_addr+0x1a4>)
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	3301      	adds	r3, #1
 800479e:	460a      	mov	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]
			if(rand_input%2 == 0){
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d110      	bne.n	80047d0 <update_rand_addr+0x174>
				Player[temp_user_buff[2]].addr = temp_addr_buff[0];
 80047ae:	7abb      	ldrb	r3, [r7, #10]
 80047b0:	7939      	ldrb	r1, [r7, #4]
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <update_rand_addr+0x1a4>)
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	4413      	add	r3, r2
 80047b8:	3301      	adds	r3, #1
 80047ba:	460a      	mov	r2, r1
 80047bc:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[2];
 80047be:	7afb      	ldrb	r3, [r7, #11]
 80047c0:	79b9      	ldrb	r1, [r7, #6]
 80047c2:	4a0f      	ldr	r2, [pc, #60]	; (8004800 <update_rand_addr+0x1a4>)
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4413      	add	r3, r2
 80047c8:	3301      	adds	r3, #1
 80047ca:	460a      	mov	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]
			break;
 80047ce:	e00f      	b.n	80047f0 <update_rand_addr+0x194>
				Player[temp_user_buff[2]].addr = temp_addr_buff[2];
 80047d0:	7abb      	ldrb	r3, [r7, #10]
 80047d2:	79b9      	ldrb	r1, [r7, #6]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <update_rand_addr+0x1a4>)
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	3301      	adds	r3, #1
 80047dc:	460a      	mov	r2, r1
 80047de:	701a      	strb	r2, [r3, #0]
				Player[temp_user_buff[3]].addr = temp_addr_buff[0];
 80047e0:	7afb      	ldrb	r3, [r7, #11]
 80047e2:	7939      	ldrb	r1, [r7, #4]
 80047e4:	4a06      	ldr	r2, [pc, #24]	; (8004800 <update_rand_addr+0x1a4>)
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4413      	add	r3, r2
 80047ea:	3301      	adds	r3, #1
 80047ec:	460a      	mov	r2, r1
 80047ee:	701a      	strb	r2, [r3, #0]
			break;
 80047f0:	bf00      	nop
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	200000bc 	.word	0x200000bc
 8004800:	200000ec 	.word	0x200000ec
 8004804:	aaaaaaab 	.word	0xaaaaaaab

08004808 <delay_ms>:

void delay_ms(unsigned int x)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	static unsigned long uDelay = 0;
	uDelay = x;
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <delay_ms+0x38>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]
	bFlagDelay = 1;
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <delay_ms+0x3c>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
	uCountDelay = 0;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <delay_ms+0x40>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
	while(uCountDelay<=uDelay)
 8004822:	bf00      	nop
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <delay_ms+0x40>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <delay_ms+0x38>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d9f9      	bls.n	8004824 <delay_ms+0x1c>
	{

	}
	bFlagDelay = 0;
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <delay_ms+0x3c>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	20000134 	.word	0x20000134
 8004844:	200000be 	.word	0x200000be
 8004848:	200000c0 	.word	0x200000c0

0800484c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004854:	1d39      	adds	r1, r7, #4
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	2201      	movs	r2, #1
 800485c:	4803      	ldr	r0, [pc, #12]	; (800486c <__io_putchar+0x20>)
 800485e:	f002 fd52 	bl	8007306 <HAL_UART_Transmit>
  return ch;
 8004862:	687b      	ldr	r3, [r7, #4]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200001c8 	.word	0x200001c8

08004870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004876:	f000 fe83 	bl	8005580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800487a:	f000 fa79 	bl	8004d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800487e:	f000 fb79 	bl	8004f74 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004882:	f000 fb4d 	bl	8004f20 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004886:	f000 faff 	bl	8004e88 <MX_TIM2_Init>
  MX_TIM1_Init();
 800488a:	f000 faad 	bl	8004de8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800488e:	48b4      	ldr	r0, [pc, #720]	; (8004b60 <main+0x2f0>)
 8004890:	f002 f8ee 	bl	8006a70 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8004894:	4bb2      	ldr	r3, [pc, #712]	; (8004b60 <main+0x2f0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Base_Start_IT(&htim2);
 800489c:	48b1      	ldr	r0, [pc, #708]	; (8004b64 <main+0x2f4>)
 800489e:	f002 f931 	bl	8006b04 <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Task_User_1stInit(1);
 80048a2:	2001      	movs	r0, #1
 80048a4:	f7fd fe52 	bl	800254c <Task_User_1stInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch(eUserTask_State)
 80048a8:	4baf      	ldr	r3, [pc, #700]	; (8004b68 <main+0x2f8>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d8fb      	bhi.n	80048a8 <main+0x38>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <main+0x48>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	08004a31 	.word	0x08004a31
 80048c0:	08004b7d 	.word	0x08004b7d
 80048c4:	08004c77 	.word	0x08004c77
 80048c8:	08004c45 	.word	0x08004c45
	 {
		 case E_STATE_STARTUP:
		 {
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 80048cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048d0:	48a6      	ldr	r0, [pc, #664]	; (8004b6c <main+0x2fc>)
 80048d2:	f001 fc32 	bl	800613a <HAL_GPIO_TogglePin>

			 Led7TurnTime_Display(10, 10, 0, 0);
 80048d6:	2300      	movs	r3, #0
 80048d8:	2200      	movs	r2, #0
 80048da:	210a      	movs	r1, #10
 80048dc:	200a      	movs	r0, #10
 80048de:	f7fc f9a1 	bl	8000c24 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 80048e2:	230a      	movs	r3, #10
 80048e4:	220a      	movs	r2, #10
 80048e6:	210a      	movs	r1, #10
 80048e8:	200a      	movs	r0, #10
 80048ea:	f7fc fa0f 	bl	8000d0c <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10, 0);
 80048ee:	2300      	movs	r3, #0
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	230a      	movs	r3, #10
 80048f4:	220a      	movs	r2, #10
 80048f6:	210a      	movs	r1, #10
 80048f8:	200a      	movs	r0, #10
 80048fa:	f7fc fa77 	bl	8000dec <Led7RoundTime_Display>

			 Task_Blink_Line(0, 0, 1);
 80048fe:	2201      	movs	r2, #1
 8004900:	2100      	movs	r1, #0
 8004902:	2000      	movs	r0, #0
 8004904:	f7ff fd54 	bl	80043b0 <Task_Blink_Line>
			 Task_Led_StartPoint(12, 12, 12);
 8004908:	220c      	movs	r2, #12
 800490a:	210c      	movs	r1, #12
 800490c:	200c      	movs	r0, #12
 800490e:	f7ff fd0f 	bl	8004330 <Task_Led_StartPoint>
			 Task_led_xl(0, 0x00);
 8004912:	2100      	movs	r1, #0
 8004914:	2000      	movs	r0, #0
 8004916:	f7ff fcf5 	bl	8004304 <Task_led_xl>
			 Task_Clear_Display(0);
 800491a:	2000      	movs	r0, #0
 800491c:	f7ff fcd6 	bl	80042cc <Task_Clear_Display>
			 Task_Buzzer_Enable();
 8004920:	f7ff fd5e 	bl	80043e0 <Task_Buzzer_Enable>

			 while(1)
			 {
				 //Task_100ms();
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004924:	2101      	movs	r1, #1
 8004926:	4892      	ldr	r0, [pc, #584]	; (8004b70 <main+0x300>)
 8004928:	f001 fbd8 	bl	80060dc <HAL_GPIO_ReadPin>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d139      	bne.n	80049a6 <main+0x136>
					 delay_ms(BUTTON_DELAY);
 8004932:	2014      	movs	r0, #20
 8004934:	f7ff ff68 	bl	8004808 <delay_ms>
					 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004938:	2101      	movs	r1, #1
 800493a:	488d      	ldr	r0, [pc, #564]	; (8004b70 <main+0x300>)
 800493c:	f001 fbce 	bl	80060dc <HAL_GPIO_ReadPin>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d16d      	bne.n	8004a22 <main+0x1b2>
						 while(POWER_BUT_VAL == BUTTON_ACTIVE)
 8004946:	e01a      	b.n	800497e <main+0x10e>
						 {
							 button_press_cnt++;
 8004948:	4b8a      	ldr	r3, [pc, #552]	; (8004b74 <main+0x304>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <main+0x304>)
 8004952:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004954:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <main+0x304>)
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2b14      	cmp	r3, #20
 800495a:	d90d      	bls.n	8004978 <main+0x108>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 800495c:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <main+0x304>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	00da      	lsls	r2, r3, #3
 8004966:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <main+0x304>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	210a      	movs	r1, #10
 8004972:	200a      	movs	r0, #10
 8004974:	f7fc f956 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	f7ff ff45 	bl	8004808 <delay_ms>
						 while(POWER_BUT_VAL == BUTTON_ACTIVE)
 800497e:	2101      	movs	r1, #1
 8004980:	487b      	ldr	r0, [pc, #492]	; (8004b70 <main+0x300>)
 8004982:	f001 fbab 	bl	80060dc <HAL_GPIO_ReadPin>
 8004986:	4603      	mov	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d0dd      	beq.n	8004948 <main+0xd8>
						 }
						 if(button_press_cnt > 20){
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <main+0x304>)
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	2b14      	cmp	r3, #20
 8004992:	d904      	bls.n	800499e <main+0x12e>
							 Task_Buzzer_Enable();
 8004994:	f7ff fd24 	bl	80043e0 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_POWER_ON;
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <main+0x2f8>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 800499e:	4b75      	ldr	r3, [pc, #468]	; (8004b74 <main+0x304>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	e03d      	b.n	8004a22 <main+0x1b2>
					 }
				 }
				 else if(PLUS_BUT_VAL == BUTTON_ACTIVE){
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	4871      	ldr	r0, [pc, #452]	; (8004b70 <main+0x300>)
 80049aa:	f001 fb97 	bl	80060dc <HAL_GPIO_ReadPin>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d136      	bne.n	8004a22 <main+0x1b2>
					 delay_ms((int)BUTTON_DELAY);
 80049b4:	2014      	movs	r0, #20
 80049b6:	f7ff ff27 	bl	8004808 <delay_ms>
					 if(PLUS_BUT_VAL ==BUTTON_ACTIVE){
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	486c      	ldr	r0, [pc, #432]	; (8004b70 <main+0x300>)
 80049be:	f001 fb8d 	bl	80060dc <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d12c      	bne.n	8004a22 <main+0x1b2>
						 while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 80049c8:	e01a      	b.n	8004a00 <main+0x190>
						 {
							 button_press_cnt++;
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <main+0x304>)
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	4b68      	ldr	r3, [pc, #416]	; (8004b74 <main+0x304>)
 80049d4:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <main+0x304>)
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2b14      	cmp	r3, #20
 80049dc:	d90d      	bls.n	80049fa <main+0x18a>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 80049de:	4b65      	ldr	r3, [pc, #404]	; (8004b74 <main+0x304>)
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	4b62      	ldr	r3, [pc, #392]	; (8004b74 <main+0x304>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	210a      	movs	r1, #10
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7fc f915 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 80049fa:	2064      	movs	r0, #100	; 0x64
 80049fc:	f7ff ff04 	bl	8004808 <delay_ms>
						 while(PLUS_BUT_VAL == BUTTON_ACTIVE)
 8004a00:	2180      	movs	r1, #128	; 0x80
 8004a02:	485b      	ldr	r0, [pc, #364]	; (8004b70 <main+0x300>)
 8004a04:	f001 fb6a 	bl	80060dc <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d0dd      	beq.n	80049ca <main+0x15a>
						 }
						 if(button_press_cnt > 20){
 8004a0e:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <main+0x304>)
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	2b14      	cmp	r3, #20
 8004a14:	d902      	bls.n	8004a1c <main+0x1ac>
							 eUserTask_State = E_STATE_RUN_MODE;
 8004a16:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <main+0x2f8>)
 8004a18:	2204      	movs	r2, #4
 8004a1a:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004a1c:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <main+0x304>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	801a      	strh	r2, [r3, #0]
//						 }
//						 button_press_cnt = 0;
//					 }
//				 }

				 if(eUserTask_State!=E_STATE_STARTUP){
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <main+0x2f8>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d100      	bne.n	8004a2c <main+0x1bc>
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004a2a:	e77b      	b.n	8004924 <main+0xb4>
					 break;
 8004a2c:	bf00      	nop
				 }
			 }
			 break;
 8004a2e:	e194      	b.n	8004d5a <main+0x4ea>
		 }

		 case E_STATE_POWER_ON:
		 {
			 //Send data ON LXL
			 Task_led_xl(0, 0x00);
 8004a30:	2100      	movs	r1, #0
 8004a32:	2000      	movs	r0, #0
 8004a34:	f7ff fc66 	bl	8004304 <Task_led_xl>
			 Task_Round_Init();
 8004a38:	f7fd fdc4 	bl	80025c4 <Task_Round_Init>
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8004a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a40:	484a      	ldr	r0, [pc, #296]	; (8004b6c <main+0x2fc>)
 8004a42:	f001 fb7a 	bl	800613a <HAL_GPIO_TogglePin>
			 while(1)
			 {
				 Task_100ms();
 8004a46:	f7ff fa5f 	bl	8003f08 <Task_100ms>
				 if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4848      	ldr	r0, [pc, #288]	; (8004b70 <main+0x300>)
 8004a4e:	f001 fb45 	bl	80060dc <HAL_GPIO_ReadPin>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d13d      	bne.n	8004ad4 <main+0x264>
					 delay_ms((int)BUTTON_DELAY);
 8004a58:	2014      	movs	r0, #20
 8004a5a:	f7ff fed5 	bl	8004808 <delay_ms>
					 if (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4843      	ldr	r0, [pc, #268]	; (8004b70 <main+0x300>)
 8004a62:	f001 fb3b 	bl	80060dc <HAL_GPIO_ReadPin>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d173      	bne.n	8004b54 <main+0x2e4>
						 while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004a6c:	e01a      	b.n	8004aa4 <main+0x234>
							 button_press_cnt++;
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <main+0x304>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <main+0x304>)
 8004a78:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004a7a:	4b3e      	ldr	r3, [pc, #248]	; (8004b74 <main+0x304>)
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	2b14      	cmp	r3, #20
 8004a80:	d90d      	bls.n	8004a9e <main+0x22e>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004a82:	4b3c      	ldr	r3, [pc, #240]	; (8004b74 <main+0x304>)
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	00da      	lsls	r2, r3, #3
 8004a8c:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <main+0x304>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	210a      	movs	r1, #10
 8004a98:	200a      	movs	r0, #10
 8004a9a:	f7fc f8c3 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004a9e:	2064      	movs	r0, #100	; 0x64
 8004aa0:	f7ff feb2 	bl	8004808 <delay_ms>
						 while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4832      	ldr	r0, [pc, #200]	; (8004b70 <main+0x300>)
 8004aa8:	f001 fb18 	bl	80060dc <HAL_GPIO_ReadPin>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d0dd      	beq.n	8004a6e <main+0x1fe>
						 }
						 if (button_press_cnt > 20){
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <main+0x304>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	2b14      	cmp	r3, #20
 8004ab8:	d903      	bls.n	8004ac2 <main+0x252>
							 eUserTask_State = E_STATE_STARTUP;
 8004aba:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <main+0x2f8>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	e004      	b.n	8004acc <main+0x25c>
						 }
						 else {
							 Task_Buzzer_Enable();
 8004ac2:	f7ff fc8d 	bl	80043e0 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_PLAYING;
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <main+0x2f8>)
 8004ac8:	2202      	movs	r2, #2
 8004aca:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <main+0x304>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e03f      	b.n	8004b54 <main+0x2e4>
					 }
				 }
				 else if(MODE_BUT_VAL == BUTTON_ACTIVE){
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4826      	ldr	r0, [pc, #152]	; (8004b70 <main+0x300>)
 8004ad8:	f001 fb00 	bl	80060dc <HAL_GPIO_ReadPin>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d138      	bne.n	8004b54 <main+0x2e4>
					 delay_ms((int)BUTTON_DELAY);
 8004ae2:	2014      	movs	r0, #20
 8004ae4:	f7ff fe90 	bl	8004808 <delay_ms>
					 if (MODE_BUT_VAL == BUTTON_ACTIVE){
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4821      	ldr	r0, [pc, #132]	; (8004b70 <main+0x300>)
 8004aec:	f001 faf6 	bl	80060dc <HAL_GPIO_ReadPin>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d12e      	bne.n	8004b54 <main+0x2e4>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004af6:	e01a      	b.n	8004b2e <main+0x2be>
						 {
							 button_press_cnt++;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <main+0x304>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <main+0x304>)
 8004b02:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <main+0x304>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	2b14      	cmp	r3, #20
 8004b0a:	d90d      	bls.n	8004b28 <main+0x2b8>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <main+0x304>)
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	00da      	lsls	r2, r3, #3
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <main+0x304>)
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	210a      	movs	r1, #10
 8004b22:	200a      	movs	r0, #10
 8004b24:	f7fc f87e 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004b28:	2064      	movs	r0, #100	; 0x64
 8004b2a:	f7ff fe6d 	bl	8004808 <delay_ms>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004b2e:	2102      	movs	r1, #2
 8004b30:	480f      	ldr	r0, [pc, #60]	; (8004b70 <main+0x300>)
 8004b32:	f001 fad3 	bl	80060dc <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d0dd      	beq.n	8004af8 <main+0x288>
						 }
						 if(button_press_cnt > 20){
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <main+0x304>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	2b14      	cmp	r3, #20
 8004b42:	d904      	bls.n	8004b4e <main+0x2de>
							 Task_Buzzer_Enable();
 8004b44:	f7ff fc4c 	bl	80043e0 <Task_Buzzer_Enable>
							 eUserTask_State = E_STATE_CFG_MODE;
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <main+0x2f8>)
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <main+0x304>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	801a      	strh	r2, [r3, #0]
					 }
				 }

				 if(eUserTask_State!=E_STATE_POWER_ON)
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <main+0x2f8>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10d      	bne.n	8004b78 <main+0x308>
				 Task_100ms();
 8004b5c:	e773      	b.n	8004a46 <main+0x1d6>
 8004b5e:	bf00      	nop
 8004b60:	20000138 	.word	0x20000138
 8004b64:	20000180 	.word	0x20000180
 8004b68:	2000020c 	.word	0x2000020c
 8004b6c:	40010800 	.word	0x40010800
 8004b70:	40010c00 	.word	0x40010c00
 8004b74:	2000020e 	.word	0x2000020e
					 break;
 8004b78:	bf00      	nop
			 }
			 break;
 8004b7a:	e0ee      	b.n	8004d5a <main+0x4ea>
		 }

		 case E_STATE_PLAYING:
		 {
			 HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8004b7c:	2108      	movs	r1, #8
 8004b7e:	4877      	ldr	r0, [pc, #476]	; (8004d5c <main+0x4ec>)
 8004b80:	f001 fadb 	bl	800613a <HAL_GPIO_TogglePin>

			 while(1)
			 {
				Playing_Stt = Task_Playing();
 8004b84:	f7fd fe98 	bl	80028b8 <Task_Playing>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4b74      	ldr	r3, [pc, #464]	; (8004d60 <main+0x4f0>)
 8004b8e:	701a      	strb	r2, [r3, #0]
				if(Playing_Stt == 0x01)			//Next Rout
 8004b90:	4b73      	ldr	r3, [pc, #460]	; (8004d60 <main+0x4f0>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d103      	bne.n	8004ba0 <main+0x330>
					eUserTask_State = E_STATE_POWER_ON;
 8004b98:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <main+0x4f4>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e007      	b.n	8004bb0 <main+0x340>
				else if(Playing_Stt == 0xFF)	//Winner -> Reset
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <main+0x4f0>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2bff      	cmp	r3, #255	; 0xff
 8004ba6:	d103      	bne.n	8004bb0 <main+0x340>
					Task_led_xl(0, 0x0F);
 8004ba8:	210f      	movs	r1, #15
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7ff fbaa 	bl	8004304 <Task_led_xl>

				Task_100ms();
 8004bb0:	f7ff f9aa 	bl	8003f08 <Task_100ms>
				if(POWER_BUT_VAL == BUTTON_ACTIVE){
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4869      	ldr	r0, [pc, #420]	; (8004d5c <main+0x4ec>)
 8004bb8:	f001 fa90 	bl	80060dc <HAL_GPIO_ReadPin>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d139      	bne.n	8004c36 <main+0x3c6>
					delay_ms((int)BUTTON_DELAY);
 8004bc2:	2014      	movs	r0, #20
 8004bc4:	f7ff fe20 	bl	8004808 <delay_ms>
					if (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4864      	ldr	r0, [pc, #400]	; (8004d5c <main+0x4ec>)
 8004bcc:	f001 fa86 	bl	80060dc <HAL_GPIO_ReadPin>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d12f      	bne.n	8004c36 <main+0x3c6>
						while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004bd6:	e01a      	b.n	8004c0e <main+0x39e>
							button_press_cnt++;
 8004bd8:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <main+0x4f8>)
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <main+0x4f8>)
 8004be2:	801a      	strh	r2, [r3, #0]
							if(button_press_cnt > 20){
 8004be4:	4b60      	ldr	r3, [pc, #384]	; (8004d68 <main+0x4f8>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	2b14      	cmp	r3, #20
 8004bea:	d90d      	bls.n	8004c08 <main+0x398>
								Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004bec:	4b5e      	ldr	r3, [pc, #376]	; (8004d68 <main+0x4f8>)
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	00da      	lsls	r2, r3, #3
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <main+0x4f8>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	210a      	movs	r1, #10
 8004c02:	200a      	movs	r0, #10
 8004c04:	f7fc f80e 	bl	8000c24 <Led7TurnTime_Display>
							}
							delay_ms(100);
 8004c08:	2064      	movs	r0, #100	; 0x64
 8004c0a:	f7ff fdfd 	bl	8004808 <delay_ms>
						while (POWER_BUT_VAL == BUTTON_ACTIVE){
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4852      	ldr	r0, [pc, #328]	; (8004d5c <main+0x4ec>)
 8004c12:	f001 fa63 	bl	80060dc <HAL_GPIO_ReadPin>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d0dd      	beq.n	8004bd8 <main+0x368>
						}
						if(button_press_cnt > 20){
 8004c1c:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <main+0x4f8>)
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	2b14      	cmp	r3, #20
 8004c22:	d905      	bls.n	8004c30 <main+0x3c0>
							Task_User_1stInit(0);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7fd fc91 	bl	800254c <Task_User_1stInit>
							eUserTask_State = E_STATE_STARTUP;
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <main+0x4f4>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
						}
						button_press_cnt = 0;
 8004c30:	4b4d      	ldr	r3, [pc, #308]	; (8004d68 <main+0x4f8>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	801a      	strh	r2, [r3, #0]
					}
				}

				if(eUserTask_State!=E_STATE_PLAYING)
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <main+0x4f4>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d100      	bne.n	8004c40 <main+0x3d0>
				Playing_Stt = Task_Playing();
 8004c3e:	e7a1      	b.n	8004b84 <main+0x314>
					break;
 8004c40:	bf00      	nop
			 }
			 break;
 8004c42:	e08a      	b.n	8004d5a <main+0x4ea>
		 }
		 case E_STATE_RUN_MODE:
		 {
			 Task_led_xl(0, 0x0F);
 8004c44:	210f      	movs	r1, #15
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7ff fb5c 	bl	8004304 <Task_led_xl>
			 Task_TestMode_Display(0, IRcode);
 8004c4c:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <main+0x4fc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7fe ff0c 	bl	8003a70 <Task_TestMode_Display>
			 while(1){
				if(Task_Run_TestMode()){
 8004c58:	f7fe fff6 	bl	8003c48 <Task_Run_TestMode>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <main+0x3f8>
					eUserTask_State = E_STATE_STARTUP;
 8004c62:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <main+0x4f4>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
				}
				if(eUserTask_State!=E_STATE_RUN_MODE)
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <main+0x4f4>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d100      	bne.n	8004c72 <main+0x402>
				if(Task_Run_TestMode()){
 8004c70:	e7f2      	b.n	8004c58 <main+0x3e8>
					break;
 8004c72:	bf00      	nop
			 }
			 break;
 8004c74:	e071      	b.n	8004d5a <main+0x4ea>
		 }
		 case E_STATE_CFG_MODE:
		 {
			 Task_Read_Cfg();
 8004c76:	f7fc fbf3 	bl	8001460 <Task_Read_Cfg>
			 Led7TurnTime_Display(10, 10, 0, 0);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	210a      	movs	r1, #10
 8004c80:	200a      	movs	r0, #10
 8004c82:	f7fb ffcf 	bl	8000c24 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 8004c86:	230a      	movs	r3, #10
 8004c88:	220a      	movs	r2, #10
 8004c8a:	210a      	movs	r1, #10
 8004c8c:	200a      	movs	r0, #10
 8004c8e:	f7fc f83d 	bl	8000d0c <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10, 0);
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	230a      	movs	r3, #10
 8004c98:	220a      	movs	r2, #10
 8004c9a:	210a      	movs	r1, #10
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fc f8a5 	bl	8000dec <Led7RoundTime_Display>

			 Task_Led_StartPoint(12, 12, 12);
 8004ca2:	220c      	movs	r2, #12
 8004ca4:	210c      	movs	r1, #12
 8004ca6:	200c      	movs	r0, #12
 8004ca8:	f7ff fb42 	bl	8004330 <Task_Led_StartPoint>
			 Task_led_xl(0, 0x00);
 8004cac:	2100      	movs	r1, #0
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7ff fb28 	bl	8004304 <Task_led_xl>
			 Task_Clear_Display(0);
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7ff fb09 	bl	80042cc <Task_Clear_Display>
			 while(1)
			 {
				 Task_Mode_Cfg();
 8004cba:	f7fc fc0d 	bl	80014d8 <Task_Mode_Cfg>
				 Task_100ms();
 8004cbe:	f7ff f923 	bl	8003f08 <Task_100ms>
				 if(MODE_BUT_VAL == BUTTON_ACTIVE){
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	4825      	ldr	r0, [pc, #148]	; (8004d5c <main+0x4ec>)
 8004cc6:	f001 fa09 	bl	80060dc <HAL_GPIO_ReadPin>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d13d      	bne.n	8004d4c <main+0x4dc>
					 delay_ms((int)BUTTON_DELAY);
 8004cd0:	2014      	movs	r0, #20
 8004cd2:	f7ff fd99 	bl	8004808 <delay_ms>
					 if (MODE_BUT_VAL == BUTTON_ACTIVE){
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	4820      	ldr	r0, [pc, #128]	; (8004d5c <main+0x4ec>)
 8004cda:	f001 f9ff 	bl	80060dc <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d133      	bne.n	8004d4c <main+0x4dc>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004ce4:	e01a      	b.n	8004d1c <main+0x4ac>
						 {
							 button_press_cnt++;
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <main+0x4f8>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <main+0x4f8>)
 8004cf0:	801a      	strh	r2, [r3, #0]
							 if(button_press_cnt > 20){
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <main+0x4f8>)
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	2b14      	cmp	r3, #20
 8004cf8:	d90d      	bls.n	8004d16 <main+0x4a6>
								 Led7TurnTime_Display(10, 10, 8*(button_press_cnt%2), 8*(button_press_cnt%2));
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <main+0x4f8>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	00da      	lsls	r2, r3, #3
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <main+0x4f8>)
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	210a      	movs	r1, #10
 8004d10:	200a      	movs	r0, #10
 8004d12:	f7fb ff87 	bl	8000c24 <Led7TurnTime_Display>
							 }
							 delay_ms(100);
 8004d16:	2064      	movs	r0, #100	; 0x64
 8004d18:	f7ff fd76 	bl	8004808 <delay_ms>
						 while(MODE_BUT_VAL == BUTTON_ACTIVE)
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	480f      	ldr	r0, [pc, #60]	; (8004d5c <main+0x4ec>)
 8004d20:	f001 f9dc 	bl	80060dc <HAL_GPIO_ReadPin>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d0dd      	beq.n	8004ce6 <main+0x476>
						 }
						 if(button_press_cnt > 20){
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <main+0x4f8>)
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	2b14      	cmp	r3, #20
 8004d30:	d909      	bls.n	8004d46 <main+0x4d6>
							 Task_Buzzer_Enable();
 8004d32:	f7ff fb55 	bl	80043e0 <Task_Buzzer_Enable>
							 Task_User_1stInit(0);
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7fd fc08 	bl	800254c <Task_User_1stInit>
							Task_Save_Cfg();
 8004d3c:	f7fc fbbe 	bl	80014bc <Task_Save_Cfg>
							eUserTask_State = E_STATE_POWER_ON;
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <main+0x4f4>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
						 }
						 button_press_cnt = 0;
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <main+0x4f8>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	801a      	strh	r2, [r3, #0]
					 }
				 }
				 if(eUserTask_State!=E_STATE_CFG_MODE)
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <main+0x4f4>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d100      	bne.n	8004d56 <main+0x4e6>
				 Task_Mode_Cfg();
 8004d54:	e7b1      	b.n	8004cba <main+0x44a>
					break;
 8004d56:	bf00      	nop
			 }
			 break;
 8004d58:	bf00      	nop
	 switch(eUserTask_State)
 8004d5a:	e5a5      	b.n	80048a8 <main+0x38>
 8004d5c:	40010c00 	.word	0x40010c00
 8004d60:	2000020d 	.word	0x2000020d
 8004d64:	2000020c 	.word	0x2000020c
 8004d68:	2000020e 	.word	0x2000020e
 8004d6c:	200000c8 	.word	0x200000c8

08004d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b090      	sub	sp, #64	; 0x40
 8004d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d76:	f107 0318 	add.w	r3, r7, #24
 8004d7a:	2228      	movs	r2, #40	; 0x28
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f002 ff76 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d92:	2302      	movs	r3, #2
 8004d94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d96:	2301      	movs	r3, #1
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004da2:	f107 0318 	add.w	r3, r7, #24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f9f8 	bl	800619c <HAL_RCC_OscConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8004db2:	f000 f9b7 	bl	8005124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004db6:	230f      	movs	r3, #15
 8004db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fc66 	bl	80066a0 <HAL_RCC_ClockConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004dda:	f000 f9a3 	bl	8005124 <Error_Handler>
  }
}
 8004dde:	bf00      	nop
 8004de0:	3740      	adds	r7, #64	; 0x40
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <MX_TIM1_Init+0x9c>)
 8004e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e30:	4813      	ldr	r0, [pc, #76]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e32:	f001 fdcd 	bl	80069d0 <HAL_TIM_Base_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004e3c:	f000 f972 	bl	8005124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e46:	f107 0308 	add.w	r3, r7, #8
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e4e:	f001 ffb3 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004e58:	f000 f964 	bl	8005124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e64:	463b      	mov	r3, r7
 8004e66:	4619      	mov	r1, r3
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e6a:	f002 f98f 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004e74:	f000 f956 	bl	8005124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000138 	.word	0x20000138
 8004e84:	40012c00 	.word	0x40012c00

08004e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004eae:	224f      	movs	r2, #79	; 0x4f
 8004eb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004eba:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ecc:	4813      	ldr	r0, [pc, #76]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004ece:	f001 fd7f 	bl	80069d0 <HAL_TIM_Base_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004ed8:	f000 f924 	bl	8005124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	480c      	ldr	r0, [pc, #48]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004eea:	f001 ff65 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004ef4:	f000 f916 	bl	8005124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f00:	463b      	mov	r3, r7
 8004f02:	4619      	mov	r1, r3
 8004f04:	4805      	ldr	r0, [pc, #20]	; (8004f1c <MX_TIM2_Init+0x94>)
 8004f06:	f002 f941 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004f10:	f000 f908 	bl	8005124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f14:	bf00      	nop
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000180 	.word	0x20000180

08004f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f26:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <MX_USART3_UART_Init+0x50>)
 8004f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f46:	220c      	movs	r2, #12
 8004f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f56:	4805      	ldr	r0, [pc, #20]	; (8004f6c <MX_USART3_UART_Init+0x4c>)
 8004f58:	f002 f988 	bl	800726c <HAL_UART_Init>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004f62:	f000 f8df 	bl	8005124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200001c8 	.word	0x200001c8
 8004f70:	40004800 	.word	0x40004800

08004f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	609a      	str	r2, [r3, #8]
 8004f86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f88:	4b33      	ldr	r3, [pc, #204]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4a32      	ldr	r2, [pc, #200]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004f8e:	f043 0304 	orr.w	r3, r3, #4
 8004f92:	6193      	str	r3, [r2, #24]
 8004f94:	4b30      	ldr	r3, [pc, #192]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004fa6:	f043 0308 	orr.w	r3, r3, #8
 8004faa:	6193      	str	r3, [r2, #24]
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <MX_GPIO_Init+0xe4>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO1_Pin|IO2_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8004fbe:	4827      	ldr	r0, [pc, #156]	; (800505c <MX_GPIO_Init+0xe8>)
 8004fc0:	f001 f8a3 	bl	800610a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f24f 1118 	movw	r1, #61720	; 0xf118
 8004fca:	4825      	ldr	r0, [pc, #148]	; (8005060 <MX_GPIO_Init+0xec>)
 8004fcc:	f001 f89d 	bl	800610a <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IO1_Pin IO2_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = IO1_Pin|IO2_Pin|LED_Y_Pin;
 8004fd0:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8004fd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	481c      	ldr	r0, [pc, #112]	; (800505c <MX_GPIO_Init+0xe8>)
 8004fea:	f000 fef3 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin
                           BTN_5_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin
 8004fee:	23e3      	movs	r3, #227	; 0xe3
 8004ff0:	60bb      	str	r3, [r7, #8]
                          |BTN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4619      	mov	r1, r3
 8005000:	4817      	ldr	r0, [pc, #92]	; (8005060 <MX_GPIO_Init+0xec>)
 8005002:	f000 fee7 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_1_Pin DIO_1_Pin CLK_2_Pin DIO_2_Pin
                           LED_R_Pin LED_G_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 8005006:	f24f 1318 	movw	r3, #61720	; 0xf118
 800500a:	60bb      	str	r3, [r7, #8]
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800500c:	2301      	movs	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005014:	2302      	movs	r3, #2
 8005016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	4810      	ldr	r0, [pc, #64]	; (8005060 <MX_GPIO_Init+0xec>)
 8005020:	f000 fed8 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IR_SIGNAL_Pin;
 8005024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <MX_GPIO_Init+0xf0>)
 800502c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800502e:	2301      	movs	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IR_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	4619      	mov	r1, r3
 8005038:	4808      	ldr	r0, [pc, #32]	; (800505c <MX_GPIO_Init+0xe8>)
 800503a:	f000 fecb 	bl	8005dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	2028      	movs	r0, #40	; 0x28
 8005044:	f000 fbd5 	bl	80057f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005048:	2028      	movs	r0, #40	; 0x28
 800504a:	f000 fbee 	bl	800582a <HAL_NVIC_EnableIRQ>

}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	40010800 	.word	0x40010800
 8005060:	40010c00 	.word	0x40010c00
 8005064:	10310000 	.word	0x10310000

08005068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == IR_SIGNAL_Pin) {
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005078:	d145      	bne.n	8005106 <HAL_GPIO_EXTI_Callback+0x9e>
	if(HAL_GPIO_ReadPin(IR_SIGNAL_GPIO_Port, IR_SIGNAL_Pin) == GPIO_PIN_RESET)
 800507a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800507e:	4824      	ldr	r0, [pc, #144]	; (8005110 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005080:	f001 f82c 	bl	80060dc <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800508a:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_GPIO_EXTI_Callback+0xac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
  } else {
      __NOP();
  }
}
 8005092:	e039      	b.n	8005108 <HAL_GPIO_EXTI_Callback+0xa0>
		if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8005094:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <HAL_GPIO_EXTI_Callback+0xac>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509e:	d90d      	bls.n	80050bc <HAL_GPIO_EXTI_Callback+0x54>
			tempCode |= (1UL << (31-bitIndex));   // write 1
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050ac:	fa23 f202 	lsr.w	r2, r3, r2
 80050b0:	4b1a      	ldr	r3, [pc, #104]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e00c      	b.n	80050d6 <HAL_GPIO_EXTI_Callback+0x6e>
			tempCode &= ~(1UL << (31-bitIndex));  // write 0
 80050bc:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050c8:	40d3      	lsrs	r3, r2
 80050ca:	43da      	mvns	r2, r3
 80050cc:	4b13      	ldr	r3, [pc, #76]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4013      	ands	r3, r2
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050d4:	6013      	str	r3, [r2, #0]
		bitIndex++;
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	3301      	adds	r3, #1
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 80050e2:	701a      	strb	r2, [r3, #0]
		if(bitIndex == 24)
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b18      	cmp	r3, #24
 80050ec:	d10c      	bne.n	8005108 <HAL_GPIO_EXTI_Callback+0xa0>
			IRcode = tempCode >> 8; // Second last 8 bits
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <HAL_GPIO_EXTI_Callback+0xb8>)
 80050f6:	6013      	str	r3, [r2, #0]
			tempCode = 0;
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_GPIO_EXTI_Callback+0xb4>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
}
 8005104:	e000      	b.n	8005108 <HAL_GPIO_EXTI_Callback+0xa0>
      __NOP();
 8005106:	bf00      	nop
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40010800 	.word	0x40010800
 8005114:	20000138 	.word	0x20000138
 8005118:	20000214 	.word	0x20000214
 800511c:	20000210 	.word	0x20000210
 8005120:	200000c8 	.word	0x200000c8

08005124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005128:	b672      	cpsid	i
}
 800512a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800512c:	e7fe      	b.n	800512c <Error_Handler+0x8>
	...

08005130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_MspInit+0x5c>)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	4a14      	ldr	r2, [pc, #80]	; (800518c <HAL_MspInit+0x5c>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6193      	str	r3, [r2, #24]
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_MspInit+0x5c>)
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <HAL_MspInit+0x5c>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <HAL_MspInit+0x5c>)
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005158:	61d3      	str	r3, [r2, #28]
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_MspInit+0x5c>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_MspInit+0x60>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_MspInit+0x60>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40021000 	.word	0x40021000
 8005190:	40010000 	.word	0x40010000

08005194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIM_Base_MspInit+0x68>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10c      	bne.n	80051c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051b0:	6193      	str	r3, [r2, #24]
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80051be:	e018      	b.n	80051f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d113      	bne.n	80051f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	61d3      	str	r3, [r2, #28]
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_TIM_Base_MspInit+0x6c>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80051e2:	2200      	movs	r2, #0
 80051e4:	2101      	movs	r1, #1
 80051e6:	201c      	movs	r0, #28
 80051e8:	f000 fb03 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051ec:	201c      	movs	r0, #28
 80051ee:	f000 fb1c 	bl	800582a <HAL_NVIC_EnableIRQ>
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40021000 	.word	0x40021000

08005204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <HAL_UART_MspInit+0x9c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d139      	bne.n	8005298 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 800522a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800522e:	61d3      	str	r3, [r2, #28]
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 8005242:	f043 0308 	orr.w	r3, r3, #8
 8005246:	6193      	str	r3, [r2, #24]
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_UART_MspInit+0xa0>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525a:	2302      	movs	r3, #2
 800525c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800525e:	2303      	movs	r3, #3
 8005260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005262:	f107 0310 	add.w	r3, r7, #16
 8005266:	4619      	mov	r1, r3
 8005268:	480f      	ldr	r0, [pc, #60]	; (80052a8 <HAL_UART_MspInit+0xa4>)
 800526a:	f000 fdb3 	bl	8005dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800526e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527c:	f107 0310 	add.w	r3, r7, #16
 8005280:	4619      	mov	r1, r3
 8005282:	4809      	ldr	r0, [pc, #36]	; (80052a8 <HAL_UART_MspInit+0xa4>)
 8005284:	f000 fda6 	bl	8005dd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005288:	2200      	movs	r2, #0
 800528a:	2102      	movs	r1, #2
 800528c:	2027      	movs	r0, #39	; 0x27
 800528e:	f000 fab0 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005292:	2027      	movs	r0, #39	; 0x27
 8005294:	f000 fac9 	bl	800582a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005298:	bf00      	nop
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40010c00 	.word	0x40010c00

080052ac <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sys_millis++;
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <SysTick_Handler+0x90>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3301      	adds	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <SysTick_Handler+0x90>)
 80052bc:	801a      	strh	r2, [r3, #0]
	if(bFlagDelay==1)
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <SysTick_Handler+0x94>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <SysTick_Handler+0x28>
		uCountDelay++;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <SysTick_Handler+0x98>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <SysTick_Handler+0x98>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e002      	b.n	80052da <SysTick_Handler+0x2e>
	else
		uCountDelay=0;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <SysTick_Handler+0x98>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

	if(sys_millis==10000)	sys_millis = 0;
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <SysTick_Handler+0x90>)
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d102      	bne.n	80052ee <SysTick_Handler+0x42>
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <SysTick_Handler+0x90>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	801a      	strh	r2, [r3, #0]
	if(sys_millis%TASK1 == 0)	Task1_Flag = 1;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <SysTick_Handler+0x90>)
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4a14      	ldr	r2, [pc, #80]	; (8005348 <SysTick_Handler+0x9c>)
 80052f6:	fba2 1203 	umull	r1, r2, r2, r3
 80052fa:	0952      	lsrs	r2, r2, #5
 80052fc:	2164      	movs	r1, #100	; 0x64
 80052fe:	fb01 f202 	mul.w	r2, r1, r2
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <SysTick_Handler+0x64>
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <SysTick_Handler+0xa0>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
	if(sys_millis%TASK2 == 0)	Task2_Flag = 1;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <SysTick_Handler+0x90>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <SysTick_Handler+0x9c>)
 8005318:	fba2 1203 	umull	r1, r2, r2, r3
 800531c:	0952      	lsrs	r2, r2, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f202 	mul.w	r2, r1, r2
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <SysTick_Handler+0x86>
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <SysTick_Handler+0xa4>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005332:	f000 f96b 	bl	800560c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200000bc 	.word	0x200000bc
 8005340:	200000be 	.word	0x200000be
 8005344:	200000c0 	.word	0x200000c0
 8005348:	51eb851f 	.word	0x51eb851f
 800534c:	200000c4 	.word	0x200000c4
 8005350:	200000c5 	.word	0x200000c5

08005354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//Task_100ms();
	task100ms_flag = 1;
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <TIM2_IRQHandler+0x60>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
	if((buzzer_stt > 0) && (buzzer_stt != 0xFF)){
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <TIM2_IRQHandler+0x64>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <TIM2_IRQHandler+0x3a>
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <TIM2_IRQHandler+0x64>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2bff      	cmp	r3, #255	; 0xff
 8005370:	d00d      	beq.n	800538e <TIM2_IRQHandler+0x3a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005372:	2201      	movs	r2, #1
 8005374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005378:	4810      	ldr	r0, [pc, #64]	; (80053bc <TIM2_IRQHandler+0x68>)
 800537a:	f000 fec6 	bl	800610a <HAL_GPIO_WritePin>
		buzzer_stt--;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <TIM2_IRQHandler+0x64>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <TIM2_IRQHandler+0x64>)
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e00d      	b.n	80053aa <TIM2_IRQHandler+0x56>
	}
	else if(buzzer_stt == 0){
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <TIM2_IRQHandler+0x64>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <TIM2_IRQHandler+0x56>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800539e:	4807      	ldr	r0, [pc, #28]	; (80053bc <TIM2_IRQHandler+0x68>)
 80053a0:	f000 feb3 	bl	800610a <HAL_GPIO_WritePin>
		buzzer_stt = 0xFF;
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <TIM2_IRQHandler+0x64>)
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053aa:	4805      	ldr	r0, [pc, #20]	; (80053c0 <TIM2_IRQHandler+0x6c>)
 80053ac:	f001 fbfc 	bl	8006ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200000c6 	.word	0x200000c6
 80053b8:	20000016 	.word	0x20000016
 80053bc:	40010c00 	.word	0x40010c00
 80053c0:	20000180 	.word	0x20000180

080053c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053c8:	4802      	ldr	r0, [pc, #8]	; (80053d4 <USART3_IRQHandler+0x10>)
 80053ca:	f002 f82f 	bl	800742c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200001c8 	.word	0x200001c8

080053d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_SIGNAL_Pin);
 80053dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053e0:	f000 fec4 	bl	800616c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e00a      	b.n	8005410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053fa:	f3af 8000 	nop.w
 80053fe:	4601      	mov	r1, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	60ba      	str	r2, [r7, #8]
 8005406:	b2ca      	uxtb	r2, r1
 8005408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	3301      	adds	r3, #1
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	dbf0      	blt.n	80053fa <_read+0x12>
  }

  return len;
 8005418:	687b      	ldr	r3, [r7, #4]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e009      	b.n	8005448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	60ba      	str	r2, [r7, #8]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fa05 	bl	800484c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3301      	adds	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	dbf1      	blt.n	8005434 <_write+0x12>
  }
  return len;
 8005450:	687b      	ldr	r3, [r7, #4]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <_close>:

int _close(int file)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005480:	605a      	str	r2, [r3, #4]
  return 0;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <_isatty>:

int _isatty(int file)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005496:	2301      	movs	r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
	...

080054bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054c4:	4a14      	ldr	r2, [pc, #80]	; (8005518 <_sbrk+0x5c>)
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <_sbrk+0x60>)
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <_sbrk+0x64>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <_sbrk+0x64>)
 80054da:	4a12      	ldr	r2, [pc, #72]	; (8005524 <_sbrk+0x68>)
 80054dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <_sbrk+0x64>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d207      	bcs.n	80054fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054ec:	f002 fb96 	bl	8007c1c <__errno>
 80054f0:	4603      	mov	r3, r0
 80054f2:	220c      	movs	r2, #12
 80054f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	e009      	b.n	8005510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <_sbrk+0x64>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <_sbrk+0x64>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <_sbrk+0x64>)
 800550c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800550e:	68fb      	ldr	r3, [r7, #12]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20005000 	.word	0x20005000
 800551c:	00000400 	.word	0x00000400
 8005520:	20000218 	.word	0x20000218
 8005524:	20000250 	.word	0x20000250

08005528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005534:	480c      	ldr	r0, [pc, #48]	; (8005568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005536:	490d      	ldr	r1, [pc, #52]	; (800556c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800553a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800553c:	e002      	b.n	8005544 <LoopCopyDataInit>

0800553e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800553e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005542:	3304      	adds	r3, #4

08005544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005548:	d3f9      	bcc.n	800553e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800554c:	4c0a      	ldr	r4, [pc, #40]	; (8005578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800554e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005550:	e001      	b.n	8005556 <LoopFillZerobss>

08005552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005554:	3204      	adds	r2, #4

08005556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005558:	d3fb      	bcc.n	8005552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800555a:	f7ff ffe5 	bl	8005528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800555e:	f002 fb63 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005562:	f7ff f985 	bl	8004870 <main>
  bx lr
 8005566:	4770      	bx	lr
  ldr r0, =_sdata
 8005568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800556c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005570:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8005574:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005578:	20000250 	.word	0x20000250

0800557c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800557c:	e7fe      	b.n	800557c <ADC1_2_IRQHandler>
	...

08005580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005584:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_Init+0x28>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_Init+0x28>)
 800558a:	f043 0310 	orr.w	r3, r3, #16
 800558e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005590:	2003      	movs	r0, #3
 8005592:	f000 f923 	bl	80057dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005596:	200f      	movs	r0, #15
 8005598:	f000 f808 	bl	80055ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800559c:	f7ff fdc8 	bl	8005130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40022000 	.word	0x40022000

080055ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <HAL_InitTick+0x54>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_InitTick+0x58>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f93b 	bl	8005846 <HAL_SYSTICK_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00e      	b.n	80055f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d80a      	bhi.n	80055f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055e0:	2200      	movs	r2, #0
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	f000 f903 	bl	80057f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055ec:	4a06      	ldr	r2, [pc, #24]	; (8005608 <HAL_InitTick+0x5c>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e000      	b.n	80055f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	2000001c 	.word	0x2000001c
 8005604:	20000024 	.word	0x20000024
 8005608:	20000020 	.word	0x20000020

0800560c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_IncTick+0x1c>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_IncTick+0x20>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4413      	add	r3, r2
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <HAL_IncTick+0x20>)
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000024 	.word	0x20000024
 800562c:	2000021c 	.word	0x2000021c

08005630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return uwTick;
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <HAL_GetTick+0x10>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	2000021c 	.word	0x2000021c

08005644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005660:	4013      	ands	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800566c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	60d3      	str	r3, [r2, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0307 	and.w	r3, r3, #7
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db0b      	blt.n	80056d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	f003 021f 	and.w	r2, r3, #31
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <__NVIC_EnableIRQ+0x34>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2001      	movs	r0, #1
 80056ca:	fa00 f202 	lsl.w	r2, r0, r2
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	e000e100 	.word	0xe000e100

080056e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	db0a      	blt.n	800570a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	490c      	ldr	r1, [pc, #48]	; (800572c <__NVIC_SetPriority+0x4c>)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	0112      	lsls	r2, r2, #4
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	440b      	add	r3, r1
 8005704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005708:	e00a      	b.n	8005720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4908      	ldr	r1, [pc, #32]	; (8005730 <__NVIC_SetPriority+0x50>)
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	3b04      	subs	r3, #4
 8005718:	0112      	lsls	r2, r2, #4
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	440b      	add	r3, r1
 800571e:	761a      	strb	r2, [r3, #24]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e100 	.word	0xe000e100
 8005730:	e000ed00 	.word	0xe000ed00

08005734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	; 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f1c3 0307 	rsb	r3, r3, #7
 800574e:	2b04      	cmp	r3, #4
 8005750:	bf28      	it	cs
 8005752:	2304      	movcs	r3, #4
 8005754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3304      	adds	r3, #4
 800575a:	2b06      	cmp	r3, #6
 800575c:	d902      	bls.n	8005764 <NVIC_EncodePriority+0x30>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3b03      	subs	r3, #3
 8005762:	e000      	b.n	8005766 <NVIC_EncodePriority+0x32>
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	401a      	ands	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800577c:	f04f 31ff 	mov.w	r1, #4294967295
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43d9      	mvns	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800578c:	4313      	orrs	r3, r2
         );
}
 800578e:	4618      	mov	r0, r3
 8005790:	3724      	adds	r7, #36	; 0x24
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a8:	d301      	bcc.n	80057ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057aa:	2301      	movs	r3, #1
 80057ac:	e00f      	b.n	80057ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <SysTick_Config+0x40>)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057b6:	210f      	movs	r1, #15
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	f7ff ff90 	bl	80056e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <SysTick_Config+0x40>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <SysTick_Config+0x40>)
 80057c8:	2207      	movs	r2, #7
 80057ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	e000e010 	.word	0xe000e010

080057dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff2d 	bl	8005644 <__NVIC_SetPriorityGrouping>
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4603      	mov	r3, r0
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005804:	f7ff ff42 	bl	800568c <__NVIC_GetPriorityGrouping>
 8005808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff ff90 	bl	8005734 <NVIC_EncodePriority>
 8005814:	4602      	mov	r2, r0
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ff5f 	bl	80056e0 <__NVIC_SetPriority>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff35 	bl	80056a8 <__NVIC_EnableIRQ>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff ffa2 	bl	8005798 <SysTick_Config>
 8005854:	4603      	mov	r3, r0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005870:	2b02      	cmp	r3, #2
 8005872:	d008      	beq.n	8005886 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2204      	movs	r2, #4
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e020      	b.n	80058c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 020e 	bic.w	r2, r2, #14
 8005894:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	2101      	movs	r1, #1
 80058b0:	fa01 f202 	lsl.w	r2, r1, r2
 80058b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d005      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e051      	b.n	800599a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 020e 	bic.w	r2, r2, #14
 8005904:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <HAL_DMA_Abort_IT+0xd0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d029      	beq.n	8005974 <HAL_DMA_Abort_IT+0xa0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <HAL_DMA_Abort_IT+0xd4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_DMA_Abort_IT+0x9c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <HAL_DMA_Abort_IT+0xd8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01a      	beq.n	800596a <HAL_DMA_Abort_IT+0x96>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <HAL_DMA_Abort_IT+0xdc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d012      	beq.n	8005964 <HAL_DMA_Abort_IT+0x90>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <HAL_DMA_Abort_IT+0xe0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00a      	beq.n	800595e <HAL_DMA_Abort_IT+0x8a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1a      	ldr	r2, [pc, #104]	; (80059b8 <HAL_DMA_Abort_IT+0xe4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d102      	bne.n	8005958 <HAL_DMA_Abort_IT+0x84>
 8005952:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005956:	e00e      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 8005958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595c:	e00b      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 800595e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005962:	e008      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 8005964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005968:	e005      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 800596a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596e:	e002      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 8005970:	2310      	movs	r3, #16
 8005972:	e000      	b.n	8005976 <HAL_DMA_Abort_IT+0xa2>
 8005974:	2301      	movs	r3, #1
 8005976:	4a11      	ldr	r2, [pc, #68]	; (80059bc <HAL_DMA_Abort_IT+0xe8>)
 8005978:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
    } 
  }
  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40020008 	.word	0x40020008
 80059a8:	4002001c 	.word	0x4002001c
 80059ac:	40020030 	.word	0x40020030
 80059b0:	40020044 	.word	0x40020044
 80059b4:	40020058 	.word	0x40020058
 80059b8:	4002006c 	.word	0x4002006c
 80059bc:	40020000 	.word	0x40020000

080059c0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_FLASH_Program+0xd8>)
 80059dc:	7e1b      	ldrb	r3, [r3, #24]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_FLASH_Program+0x26>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e054      	b.n	8005a90 <HAL_FLASH_Program+0xd0>
 80059e6:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <HAL_FLASH_Program+0xd8>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059f0:	f000 f8b2 	bl	8005b58 <FLASH_WaitForLastOperation>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d144      	bne.n	8005a88 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d102      	bne.n	8005a0a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	757b      	strb	r3, [r7, #21]
 8005a08:	e007      	b.n	8005a1a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d102      	bne.n	8005a16 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005a10:	2302      	movs	r3, #2
 8005a12:	757b      	strb	r3, [r7, #21]
 8005a14:	e001      	b.n	8005a1a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005a16:	2304      	movs	r3, #4
 8005a18:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75bb      	strb	r3, [r7, #22]
 8005a1e:	e02d      	b.n	8005a7c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005a20:	7dbb      	ldrb	r3, [r7, #22]
 8005a22:	005a      	lsls	r2, r3, #1
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	eb02 0c03 	add.w	ip, r2, r3
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	0119      	lsls	r1, r3, #4
 8005a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a32:	f1c1 0620 	rsb	r6, r1, #32
 8005a36:	f1a1 0020 	sub.w	r0, r1, #32
 8005a3a:	fa22 f401 	lsr.w	r4, r2, r1
 8005a3e:	fa03 f606 	lsl.w	r6, r3, r6
 8005a42:	4334      	orrs	r4, r6
 8005a44:	fa23 f000 	lsr.w	r0, r3, r0
 8005a48:	4304      	orrs	r4, r0
 8005a4a:	fa23 f501 	lsr.w	r5, r3, r1
 8005a4e:	b2a3      	uxth	r3, r4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4660      	mov	r0, ip
 8005a54:	f000 f864 	bl	8005b20 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a5c:	f000 f87c 	bl	8005b58 <FLASH_WaitForLastOperation>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_FLASH_Program+0xdc>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <HAL_FLASH_Program+0xdc>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005a76:	7dbb      	ldrb	r3, [r7, #22]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	75bb      	strb	r3, [r7, #22]
 8005a7c:	7dba      	ldrb	r2, [r7, #22]
 8005a7e:	7d7b      	ldrb	r3, [r7, #21]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3cd      	bcc.n	8005a20 <HAL_FLASH_Program+0x60>
 8005a84:	e000      	b.n	8005a88 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005a86:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <HAL_FLASH_Program+0xd8>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	761a      	strb	r2, [r3, #24]

  return status;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a98:	20000220 	.word	0x20000220
 8005a9c:	40022000 	.word	0x40022000

08005aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <HAL_FLASH_Unlock+0x40>)
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_FLASH_Unlock+0x40>)
 8005ab8:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <HAL_FLASH_Unlock+0x44>)
 8005aba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_FLASH_Unlock+0x40>)
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <HAL_FLASH_Unlock+0x48>)
 8005ac0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <HAL_FLASH_Unlock+0x40>)
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	45670123 	.word	0x45670123
 8005ae8:	cdef89ab 	.word	0xcdef89ab

08005aec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_FLASH_Lock+0x1c>)
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_FLASH_Lock+0x1c>)
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40022000 	.word	0x40022000

08005b0c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005b10:	4b02      	ldr	r3, [pc, #8]	; (8005b1c <HAL_FLASH_GetError+0x10>)
 8005b12:	69db      	ldr	r3, [r3, #28]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	20000220 	.word	0x20000220

08005b20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <FLASH_Program_HalfWord+0x30>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <FLASH_Program_HalfWord+0x34>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4a07      	ldr	r2, [pc, #28]	; (8005b54 <FLASH_Program_HalfWord+0x34>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	801a      	strh	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000220 	.word	0x20000220
 8005b54:	40022000 	.word	0x40022000

08005b58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005b60:	f7ff fd66 	bl	8005630 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b66:	e010      	b.n	8005b8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d00c      	beq.n	8005b8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <FLASH_WaitForLastOperation+0x2e>
 8005b76:	f7ff fd5b 	bl	8005630 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d201      	bcs.n	8005b8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e025      	b.n	8005bd6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e8      	bne.n	8005b68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <FLASH_WaitForLastOperation+0x88>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005bcc:	f000 f80a 	bl	8005be4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40022000 	.word	0x40022000

08005be4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005bee:	4b23      	ldr	r3, [pc, #140]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005bfa:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f043 0302 	orr.w	r3, r3, #2
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005c04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f043 0310 	orr.w	r3, r3, #16
 8005c0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005c24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005c3a:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <FLASH_SetErrorCode+0x9c>)
 8005c44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f240 1201 	movw	r2, #257	; 0x101
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d106      	bne.n	8005c6a <FLASH_SetErrorCode+0x86>
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	4a06      	ldr	r2, [pc, #24]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	61d3      	str	r3, [r2, #28]
}  
 8005c68:	e002      	b.n	8005c70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <FLASH_SetErrorCode+0x98>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60d3      	str	r3, [r2, #12]
}  
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	20000220 	.word	0x20000220

08005c84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c96:	4b2f      	ldr	r3, [pc, #188]	; (8005d54 <HAL_FLASHEx_Erase+0xd0>)
 8005c98:	7e1b      	ldrb	r3, [r3, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_FLASHEx_Erase+0x1e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e053      	b.n	8005d4a <HAL_FLASHEx_Erase+0xc6>
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <HAL_FLASHEx_Erase+0xd0>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d116      	bne.n	8005cde <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005cb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cb4:	f7ff ff50 	bl	8005b58 <FLASH_WaitForLastOperation>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d141      	bne.n	8005d42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f000 f84c 	bl	8005d5c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cc8:	f7ff ff46 	bl	8005b58 <FLASH_WaitForLastOperation>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005cd0:	4b21      	ldr	r3, [pc, #132]	; (8005d58 <HAL_FLASHEx_Erase+0xd4>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <HAL_FLASHEx_Erase+0xd4>)
 8005cd6:	f023 0304 	bic.w	r3, r3, #4
 8005cda:	6113      	str	r3, [r2, #16]
 8005cdc:	e031      	b.n	8005d42 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005cde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ce2:	f7ff ff39 	bl	8005b58 <FLASH_WaitForLastOperation>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d12a      	bne.n	8005d42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	e019      	b.n	8005d30 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005cfc:	68b8      	ldr	r0, [r7, #8]
 8005cfe:	f000 f849 	bl	8005d94 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d06:	f7ff ff27 	bl	8005b58 <FLASH_WaitForLastOperation>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_FLASHEx_Erase+0xd4>)
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <HAL_FLASHEx_Erase+0xd4>)
 8005d14:	f023 0302 	bic.w	r3, r3, #2
 8005d18:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	601a      	str	r2, [r3, #0]
            break;
 8005d26:	e00c      	b.n	8005d42 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	029a      	lsls	r2, r3, #10
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d3dc      	bcc.n	8005cfc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d42:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <HAL_FLASHEx_Erase+0xd0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	761a      	strb	r2, [r3, #24]

  return status;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000220 	.word	0x20000220
 8005d58:	40022000 	.word	0x40022000

08005d5c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <FLASH_MassErase+0x30>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <FLASH_MassErase+0x34>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <FLASH_MassErase+0x34>)
 8005d70:	f043 0304 	orr.w	r3, r3, #4
 8005d74:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <FLASH_MassErase+0x34>)
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <FLASH_MassErase+0x34>)
 8005d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d80:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	20000220 	.word	0x20000220
 8005d90:	40022000 	.word	0x40022000

08005d94 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <FLASH_PageErase+0x38>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <FLASH_PageErase+0x3c>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <FLASH_PageErase+0x3c>)
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <FLASH_PageErase+0x3c>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <FLASH_PageErase+0x3c>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <FLASH_PageErase+0x3c>)
 8005dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dbe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000220 	.word	0x20000220
 8005dd0:	40022000 	.word	0x40022000

08005dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b08b      	sub	sp, #44	; 0x2c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005de2:	2300      	movs	r3, #0
 8005de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005de6:	e169      	b.n	80060bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005de8:	2201      	movs	r2, #1
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	f040 8158 	bne.w	80060b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4a9a      	ldr	r2, [pc, #616]	; (8006074 <HAL_GPIO_Init+0x2a0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d05e      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
 8005e10:	4a98      	ldr	r2, [pc, #608]	; (8006074 <HAL_GPIO_Init+0x2a0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d875      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e16:	4a98      	ldr	r2, [pc, #608]	; (8006078 <HAL_GPIO_Init+0x2a4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d058      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
 8005e1c:	4a96      	ldr	r2, [pc, #600]	; (8006078 <HAL_GPIO_Init+0x2a4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d86f      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e22:	4a96      	ldr	r2, [pc, #600]	; (800607c <HAL_GPIO_Init+0x2a8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d052      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
 8005e28:	4a94      	ldr	r2, [pc, #592]	; (800607c <HAL_GPIO_Init+0x2a8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d869      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e2e:	4a94      	ldr	r2, [pc, #592]	; (8006080 <HAL_GPIO_Init+0x2ac>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d04c      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
 8005e34:	4a92      	ldr	r2, [pc, #584]	; (8006080 <HAL_GPIO_Init+0x2ac>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d863      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e3a:	4a92      	ldr	r2, [pc, #584]	; (8006084 <HAL_GPIO_Init+0x2b0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d046      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
 8005e40:	4a90      	ldr	r2, [pc, #576]	; (8006084 <HAL_GPIO_Init+0x2b0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d85d      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e46:	2b12      	cmp	r3, #18
 8005e48:	d82a      	bhi.n	8005ea0 <HAL_GPIO_Init+0xcc>
 8005e4a:	2b12      	cmp	r3, #18
 8005e4c:	d859      	bhi.n	8005f02 <HAL_GPIO_Init+0x12e>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_GPIO_Init+0x80>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005ecf 	.word	0x08005ecf
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ebb 	.word	0x08005ebb
 8005e60:	08005efd 	.word	0x08005efd
 8005e64:	08005f03 	.word	0x08005f03
 8005e68:	08005f03 	.word	0x08005f03
 8005e6c:	08005f03 	.word	0x08005f03
 8005e70:	08005f03 	.word	0x08005f03
 8005e74:	08005f03 	.word	0x08005f03
 8005e78:	08005f03 	.word	0x08005f03
 8005e7c:	08005f03 	.word	0x08005f03
 8005e80:	08005f03 	.word	0x08005f03
 8005e84:	08005f03 	.word	0x08005f03
 8005e88:	08005f03 	.word	0x08005f03
 8005e8c:	08005f03 	.word	0x08005f03
 8005e90:	08005f03 	.word	0x08005f03
 8005e94:	08005f03 	.word	0x08005f03
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	4a79      	ldr	r2, [pc, #484]	; (8006088 <HAL_GPIO_Init+0x2b4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005ea6:	e02c      	b.n	8005f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	623b      	str	r3, [r7, #32]
          break;
 8005eae:	e029      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	623b      	str	r3, [r7, #32]
          break;
 8005eb8:	e024      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	623b      	str	r3, [r7, #32]
          break;
 8005ec2:	e01f      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	623b      	str	r3, [r7, #32]
          break;
 8005ecc:	e01a      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	623b      	str	r3, [r7, #32]
          break;
 8005eda:	e013      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d105      	bne.n	8005ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	611a      	str	r2, [r3, #16]
          break;
 8005eee:	e009      	b.n	8005f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	615a      	str	r2, [r3, #20]
          break;
 8005efa:	e003      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005efc:	2300      	movs	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
          break;
 8005f00:	e000      	b.n	8005f04 <HAL_GPIO_Init+0x130>
          break;
 8005f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2bff      	cmp	r3, #255	; 0xff
 8005f08:	d801      	bhi.n	8005f0e <HAL_GPIO_Init+0x13a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	e001      	b.n	8005f12 <HAL_GPIO_Init+0x13e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2bff      	cmp	r3, #255	; 0xff
 8005f18:	d802      	bhi.n	8005f20 <HAL_GPIO_Init+0x14c>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	e002      	b.n	8005f26 <HAL_GPIO_Init+0x152>
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	3b08      	subs	r3, #8
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	210f      	movs	r1, #15
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	401a      	ands	r2, r3
 8005f38:	6a39      	ldr	r1, [r7, #32]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	431a      	orrs	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80b1 	beq.w	80060b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f54:	4b4d      	ldr	r3, [pc, #308]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	4a4c      	ldr	r2, [pc, #304]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6193      	str	r3, [r2, #24]
 8005f60:	4b4a      	ldr	r3, [pc, #296]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f6c:	4a48      	ldr	r2, [pc, #288]	; (8006090 <HAL_GPIO_Init+0x2bc>)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	089b      	lsrs	r3, r3, #2
 8005f72:	3302      	adds	r3, #2
 8005f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	220f      	movs	r2, #15
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a40      	ldr	r2, [pc, #256]	; (8006094 <HAL_GPIO_Init+0x2c0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_GPIO_Init+0x1ec>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <HAL_GPIO_Init+0x2c4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00d      	beq.n	8005fbc <HAL_GPIO_Init+0x1e8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3e      	ldr	r2, [pc, #248]	; (800609c <HAL_GPIO_Init+0x2c8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <HAL_GPIO_Init+0x1e4>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3d      	ldr	r2, [pc, #244]	; (80060a0 <HAL_GPIO_Init+0x2cc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_GPIO_Init+0x1e0>
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e006      	b.n	8005fc2 <HAL_GPIO_Init+0x1ee>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	e004      	b.n	8005fc2 <HAL_GPIO_Init+0x1ee>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e002      	b.n	8005fc2 <HAL_GPIO_Init+0x1ee>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <HAL_GPIO_Init+0x1ee>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	f002 0203 	and.w	r2, r2, #3
 8005fc8:	0092      	lsls	r2, r2, #2
 8005fca:	4093      	lsls	r3, r2
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005fd2:	492f      	ldr	r1, [pc, #188]	; (8006090 <HAL_GPIO_Init+0x2bc>)
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	089b      	lsrs	r3, r3, #2
 8005fd8:	3302      	adds	r3, #2
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005fec:	4b2d      	ldr	r3, [pc, #180]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	492c      	ldr	r1, [pc, #176]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	e006      	b.n	8006008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	43db      	mvns	r3, r3
 8006002:	4928      	ldr	r1, [pc, #160]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006004:	4013      	ands	r3, r2
 8006006:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006014:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4922      	ldr	r1, [pc, #136]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
 8006020:	e006      	b.n	8006030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	43db      	mvns	r3, r3
 800602a:	491e      	ldr	r1, [pc, #120]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 800602c:	4013      	ands	r3, r2
 800602e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4918      	ldr	r1, [pc, #96]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	4313      	orrs	r3, r2
 8006046:	608b      	str	r3, [r1, #8]
 8006048:	e006      	b.n	8006058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800604a:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	43db      	mvns	r3, r3
 8006052:	4914      	ldr	r1, [pc, #80]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006054:	4013      	ands	r3, r2
 8006056:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d021      	beq.n	80060a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	490e      	ldr	r1, [pc, #56]	; (80060a4 <HAL_GPIO_Init+0x2d0>)
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e021      	b.n	80060b6 <HAL_GPIO_Init+0x2e2>
 8006072:	bf00      	nop
 8006074:	10320000 	.word	0x10320000
 8006078:	10310000 	.word	0x10310000
 800607c:	10220000 	.word	0x10220000
 8006080:	10210000 	.word	0x10210000
 8006084:	10120000 	.word	0x10120000
 8006088:	10110000 	.word	0x10110000
 800608c:	40021000 	.word	0x40021000
 8006090:	40010000 	.word	0x40010000
 8006094:	40010800 	.word	0x40010800
 8006098:	40010c00 	.word	0x40010c00
 800609c:	40011000 	.word	0x40011000
 80060a0:	40011400 	.word	0x40011400
 80060a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_GPIO_Init+0x304>)
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	4909      	ldr	r1, [pc, #36]	; (80060d8 <HAL_GPIO_Init+0x304>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	3301      	adds	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	fa22 f303 	lsr.w	r3, r2, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f ae8e 	bne.w	8005de8 <HAL_GPIO_Init+0x14>
  }
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	372c      	adds	r7, #44	; 0x2c
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	40010400 	.word	0x40010400

080060dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e001      	b.n	80060fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr

0800610a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	807b      	strh	r3, [r7, #2]
 8006116:	4613      	mov	r3, r2
 8006118:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800611a:	787b      	ldrb	r3, [r7, #1]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006120:	887a      	ldrh	r2, [r7, #2]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006126:	e003      	b.n	8006130 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	041a      	lsls	r2, r3, #16
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	611a      	str	r2, [r3, #16]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4013      	ands	r3, r2
 8006152:	041a      	lsls	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	43d9      	mvns	r1, r3
 8006158:	887b      	ldrh	r3, [r7, #2]
 800615a:	400b      	ands	r3, r1
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006176:	4b08      	ldr	r3, [pc, #32]	; (8006198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006182:	4a05      	ldr	r2, [pc, #20]	; (8006198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe ff6c 	bl	8005068 <HAL_GPIO_EXTI_Callback>
  }
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40010400 	.word	0x40010400

0800619c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e272      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8087 	beq.w	80062ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061bc:	4b92      	ldr	r3, [pc, #584]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d00c      	beq.n	80061e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061c8:	4b8f      	ldr	r3, [pc, #572]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d112      	bne.n	80061fa <HAL_RCC_OscConfig+0x5e>
 80061d4:	4b8c      	ldr	r3, [pc, #560]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d10b      	bne.n	80061fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e2:	4b89      	ldr	r3, [pc, #548]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d06c      	beq.n	80062c8 <HAL_RCC_OscConfig+0x12c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d168      	bne.n	80062c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e24c      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006202:	d106      	bne.n	8006212 <HAL_RCC_OscConfig+0x76>
 8006204:	4b80      	ldr	r3, [pc, #512]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a7f      	ldr	r2, [pc, #508]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e02e      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x98>
 800621a:	4b7b      	ldr	r3, [pc, #492]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7a      	ldr	r2, [pc, #488]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b78      	ldr	r3, [pc, #480]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a77      	ldr	r2, [pc, #476]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800622c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e01d      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0xbc>
 800623e:	4b72      	ldr	r3, [pc, #456]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a71      	ldr	r2, [pc, #452]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b6f      	ldr	r3, [pc, #444]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6e      	ldr	r2, [pc, #440]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006258:	4b6b      	ldr	r3, [pc, #428]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a6a      	ldr	r2, [pc, #424]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b68      	ldr	r3, [pc, #416]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a67      	ldr	r2, [pc, #412]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006278:	f7ff f9da 	bl	8005630 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7ff f9d6 	bl	8005630 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e200      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b5d      	ldr	r3, [pc, #372]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0xe4>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7ff f9c6 	bl	8005630 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a8:	f7ff f9c2 	bl	8005630 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	; 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e1ec      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ba:	4b53      	ldr	r3, [pc, #332]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x10c>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d063      	beq.n	800639e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062d6:	4b4c      	ldr	r3, [pc, #304]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062e2:	4b49      	ldr	r3, [pc, #292]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d11c      	bne.n	8006328 <HAL_RCC_OscConfig+0x18c>
 80062ee:	4b46      	ldr	r3, [pc, #280]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d116      	bne.n	8006328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fa:	4b43      	ldr	r3, [pc, #268]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_RCC_OscConfig+0x176>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e1c0      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006312:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4939      	ldr	r1, [pc, #228]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006326:	e03a      	b.n	800639e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d020      	beq.n	8006372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006330:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCC_OscConfig+0x270>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7ff f97b 	bl	8005630 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633e:	f7ff f977 	bl	8005630 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1a1      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635c:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4927      	ldr	r1, [pc, #156]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]
 8006370:	e015      	b.n	800639e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006372:	4b26      	ldr	r3, [pc, #152]	; (800640c <HAL_RCC_OscConfig+0x270>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006378:	f7ff f95a 	bl	8005630 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7ff f956 	bl	8005630 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e180      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d03a      	beq.n	8006420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d019      	beq.n	80063e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <HAL_RCC_OscConfig+0x274>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b8:	f7ff f93a 	bl	8005630 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c0:	f7ff f936 	bl	8005630 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e160      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <HAL_RCC_OscConfig+0x26c>)
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063de:	2001      	movs	r0, #1
 80063e0:	f000 fad8 	bl	8006994 <RCC_Delay>
 80063e4:	e01c      	b.n	8006420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e6:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_RCC_OscConfig+0x274>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7ff f920 	bl	8005630 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f2:	e00f      	b.n	8006414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7ff f91c 	bl	8005630 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d908      	bls.n	8006414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e146      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000
 800640c:	42420000 	.word	0x42420000
 8006410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006414:	4b92      	ldr	r3, [pc, #584]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e9      	bne.n	80063f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80a6 	beq.w	800657a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006432:	4b8b      	ldr	r3, [pc, #556]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643e:	4b88      	ldr	r3, [pc, #544]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4a87      	ldr	r2, [pc, #540]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006448:	61d3      	str	r3, [r2, #28]
 800644a:	4b85      	ldr	r3, [pc, #532]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645a:	4b82      	ldr	r3, [pc, #520]	; (8006664 <HAL_RCC_OscConfig+0x4c8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d118      	bne.n	8006498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006466:	4b7f      	ldr	r3, [pc, #508]	; (8006664 <HAL_RCC_OscConfig+0x4c8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a7e      	ldr	r2, [pc, #504]	; (8006664 <HAL_RCC_OscConfig+0x4c8>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006472:	f7ff f8dd 	bl	8005630 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647a:	f7ff f8d9 	bl	8005630 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b64      	cmp	r3, #100	; 0x64
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e103      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	4b75      	ldr	r3, [pc, #468]	; (8006664 <HAL_RCC_OscConfig+0x4c8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x312>
 80064a0:	4b6f      	ldr	r3, [pc, #444]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	4a6e      	ldr	r2, [pc, #440]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6213      	str	r3, [r2, #32]
 80064ac:	e02d      	b.n	800650a <HAL_RCC_OscConfig+0x36e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x334>
 80064b6:	4b6a      	ldr	r3, [pc, #424]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	4a69      	ldr	r2, [pc, #420]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6213      	str	r3, [r2, #32]
 80064c2:	4b67      	ldr	r3, [pc, #412]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4a66      	ldr	r2, [pc, #408]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	6213      	str	r3, [r2, #32]
 80064ce:	e01c      	b.n	800650a <HAL_RCC_OscConfig+0x36e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCC_OscConfig+0x356>
 80064d8:	4b61      	ldr	r3, [pc, #388]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4a60      	ldr	r2, [pc, #384]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064de:	f043 0304 	orr.w	r3, r3, #4
 80064e2:	6213      	str	r3, [r2, #32]
 80064e4:	4b5e      	ldr	r3, [pc, #376]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	4a5d      	ldr	r2, [pc, #372]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6213      	str	r3, [r2, #32]
 80064f0:	e00b      	b.n	800650a <HAL_RCC_OscConfig+0x36e>
 80064f2:	4b5b      	ldr	r3, [pc, #364]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	4a5a      	ldr	r2, [pc, #360]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	6213      	str	r3, [r2, #32]
 80064fe:	4b58      	ldr	r3, [pc, #352]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	4a57      	ldr	r2, [pc, #348]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006504:	f023 0304 	bic.w	r3, r3, #4
 8006508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d015      	beq.n	800653e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006512:	f7ff f88d 	bl	8005630 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	e00a      	b.n	8006530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651a:	f7ff f889 	bl	8005630 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f241 3288 	movw	r2, #5000	; 0x1388
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0b1      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006530:	4b4b      	ldr	r3, [pc, #300]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ee      	beq.n	800651a <HAL_RCC_OscConfig+0x37e>
 800653c:	e014      	b.n	8006568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653e:	f7ff f877 	bl	8005630 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7ff f873 	bl	8005630 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e09b      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655c:	4b40      	ldr	r3, [pc, #256]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ee      	bne.n	8006546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d105      	bne.n	800657a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b3c      	ldr	r3, [pc, #240]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	4a3b      	ldr	r2, [pc, #236]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8087 	beq.w	8006692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006584:	4b36      	ldr	r3, [pc, #216]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	2b08      	cmp	r3, #8
 800658e:	d061      	beq.n	8006654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d146      	bne.n	8006626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006598:	4b33      	ldr	r3, [pc, #204]	; (8006668 <HAL_RCC_OscConfig+0x4cc>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7ff f847 	bl	8005630 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a6:	f7ff f843 	bl	8005630 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e06d      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b8:	4b29      	ldr	r3, [pc, #164]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065cc:	d108      	bne.n	80065e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4921      	ldr	r1, [pc, #132]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a19      	ldr	r1, [r3, #32]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	430b      	orrs	r3, r1
 80065f2:	491b      	ldr	r1, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <HAL_RCC_OscConfig+0x4cc>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fe:	f7ff f817 	bl	8005630 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006606:	f7ff f813 	bl	8005630 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e03d      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x46a>
 8006624:	e035      	b.n	8006692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <HAL_RCC_OscConfig+0x4cc>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7ff f800 	bl	8005630 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006634:	f7fe fffc 	bl	8005630 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e026      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_RCC_OscConfig+0x4c4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCC_OscConfig+0x498>
 8006652:	e01e      	b.n	8006692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d107      	bne.n	800666c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e019      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
 8006660:	40021000 	.word	0x40021000
 8006664:	40007000 	.word	0x40007000
 8006668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <HAL_RCC_OscConfig+0x500>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	429a      	cmp	r2, r3
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d001      	beq.n	8006692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40021000 	.word	0x40021000

080066a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0d0      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066b4:	4b6a      	ldr	r3, [pc, #424]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d910      	bls.n	80066e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066c2:	4b67      	ldr	r3, [pc, #412]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 0207 	bic.w	r2, r3, #7
 80066ca:	4965      	ldr	r1, [pc, #404]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d2:	4b63      	ldr	r3, [pc, #396]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d001      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0b8      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d020      	beq.n	8006732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066fc:	4b59      	ldr	r3, [pc, #356]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a58      	ldr	r2, [pc, #352]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006714:	4b53      	ldr	r3, [pc, #332]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a52      	ldr	r2, [pc, #328]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800671a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800671e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006720:	4b50      	ldr	r3, [pc, #320]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	494d      	ldr	r1, [pc, #308]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800672e:	4313      	orrs	r3, r2
 8006730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d040      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d107      	bne.n	8006756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006746:	4b47      	ldr	r3, [pc, #284]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d115      	bne.n	800677e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e07f      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675e:	4b41      	ldr	r3, [pc, #260]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e073      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800676e:	4b3d      	ldr	r3, [pc, #244]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e06b      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800677e:	4b39      	ldr	r3, [pc, #228]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f023 0203 	bic.w	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4936      	ldr	r1, [pc, #216]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006790:	f7fe ff4e 	bl	8005630 <HAL_GetTick>
 8006794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006796:	e00a      	b.n	80067ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006798:	f7fe ff4a 	bl	8005630 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e053      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ae:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 020c 	and.w	r2, r3, #12
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	429a      	cmp	r2, r3
 80067be:	d1eb      	bne.n	8006798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d210      	bcs.n	80067f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f023 0207 	bic.w	r2, r3, #7
 80067d6:	4922      	ldr	r1, [pc, #136]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <HAL_RCC_ClockConfig+0x1c0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e032      	b.n	8006856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067fc:	4b19      	ldr	r3, [pc, #100]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4916      	ldr	r1, [pc, #88]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	490e      	ldr	r1, [pc, #56]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800682e:	f000 f821 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 8006832:	4602      	mov	r2, r0
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_RCC_ClockConfig+0x1c4>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	490a      	ldr	r1, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x1c8>)
 8006840:	5ccb      	ldrb	r3, [r1, r3]
 8006842:	fa22 f303 	lsr.w	r3, r2, r3
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <HAL_RCC_ClockConfig+0x1cc>)
 8006848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <HAL_RCC_ClockConfig+0x1d0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe feac 	bl	80055ac <HAL_InitTick>

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40022000 	.word	0x40022000
 8006864:	40021000 	.word	0x40021000
 8006868:	08008e00 	.word	0x08008e00
 800686c:	2000001c 	.word	0x2000001c
 8006870:	20000020 	.word	0x20000020

08006874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006874:	b490      	push	{r4, r7}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800687a:	4b29      	ldr	r3, [pc, #164]	; (8006920 <HAL_RCC_GetSysClockFreq+0xac>)
 800687c:	1d3c      	adds	r4, r7, #4
 800687e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006884:	f240 2301 	movw	r3, #513	; 0x201
 8006888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	2300      	movs	r3, #0
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800689e:	4b21      	ldr	r3, [pc, #132]	; (8006924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d002      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x40>
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x46>
 80068b2:	e02b      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068b4:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068b6:	623b      	str	r3, [r7, #32]
      break;
 80068b8:	e02b      	b.n	8006912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	0c9b      	lsrs	r3, r3, #18
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	3328      	adds	r3, #40	; 0x28
 80068c4:	443b      	add	r3, r7
 80068c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d012      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	0c5b      	lsrs	r3, r3, #17
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	3328      	adds	r3, #40	; 0x28
 80068e2:	443b      	add	r3, r7
 80068e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	4a0e      	ldr	r2, [pc, #56]	; (8006928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068ee:	fb03 f202 	mul.w	r2, r3, r2
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
 80068fa:	e004      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4a0b      	ldr	r2, [pc, #44]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	623b      	str	r3, [r7, #32]
      break;
 800690a:	e002      	b.n	8006912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800690e:	623b      	str	r3, [r7, #32]
      break;
 8006910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006912:	6a3b      	ldr	r3, [r7, #32]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3728      	adds	r7, #40	; 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	bc90      	pop	{r4, r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	08008db0 	.word	0x08008db0
 8006924:	40021000 	.word	0x40021000
 8006928:	007a1200 	.word	0x007a1200
 800692c:	003d0900 	.word	0x003d0900

08006930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <HAL_RCC_GetHCLKFreq+0x10>)
 8006936:	681b      	ldr	r3, [r3, #0]
}
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr
 8006940:	2000001c 	.word	0x2000001c

08006944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006948:	f7ff fff2 	bl	8006930 <HAL_RCC_GetHCLKFreq>
 800694c:	4602      	mov	r2, r0
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	4903      	ldr	r1, [pc, #12]	; (8006968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800695a:	5ccb      	ldrb	r3, [r1, r3]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40021000 	.word	0x40021000
 8006968:	08008e10 	.word	0x08008e10

0800696c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006970:	f7ff ffde 	bl	8006930 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	0adb      	lsrs	r3, r3, #11
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4903      	ldr	r1, [pc, #12]	; (8006990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40021000 	.word	0x40021000
 8006990:	08008e10 	.word	0x08008e10

08006994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <RCC_Delay+0x34>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <RCC_Delay+0x38>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	0a5b      	lsrs	r3, r3, #9
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069b0:	bf00      	nop
  }
  while (Delay --);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1e5a      	subs	r2, r3, #1
 80069b6:	60fa      	str	r2, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f9      	bne.n	80069b0 <RCC_Delay+0x1c>
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr
 80069c8:	2000001c 	.word	0x2000001c
 80069cc:	10624dd3 	.word	0x10624dd3

080069d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e041      	b.n	8006a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fe fbcc 	bl	8005194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 fac4 	bl	8006f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d001      	beq.n	8006a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e032      	b.n	8006aee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_TIM_Base_Start+0x88>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x48>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x48>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a14      	ldr	r2, [pc, #80]	; (8006afc <HAL_TIM_Base_Start+0x8c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x48>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <HAL_TIM_Base_Start+0x90>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d111      	bne.n	8006adc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b06      	cmp	r3, #6
 8006ac8:	d010      	beq.n	8006aec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0201 	orr.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	e007      	b.n	8006aec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800

08006b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e03a      	b.n	8006b92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <HAL_TIM_Base_Start_IT+0x98>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00e      	beq.n	8006b5c <HAL_TIM_Base_Start_IT+0x58>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b46:	d009      	beq.n	8006b5c <HAL_TIM_Base_Start_IT+0x58>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <HAL_TIM_Base_Start_IT+0x58>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d111      	bne.n	8006b80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b06      	cmp	r3, #6
 8006b6c:	d010      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7e:	e007      	b.n	8006b90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800

08006ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d122      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d11b      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0202 	mvn.w	r2, #2
 8006bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9ba 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006bf0:	e005      	b.n	8006bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9ad 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f9bc 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d122      	bne.n	8006c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d11b      	bne.n	8006c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0204 	mvn.w	r2, #4
 8006c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f990 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006c44:	e005      	b.n	8006c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f983 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f992 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0208 	mvn.w	r2, #8
 8006c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2204      	movs	r2, #4
 8006c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f966 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f959 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f968 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b10      	cmp	r3, #16
 8006cb8:	d122      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d11b      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0210 	mvn.w	r2, #16
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f93c 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f92f 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f93e 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d10e      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d107      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0201 	mvn.w	r2, #1
 8006d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f90a 	bl	8006f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d10e      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d44:	2b80      	cmp	r3, #128	; 0x80
 8006d46:	d107      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa81 	bl	800725a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d10e      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d107      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f902 	bl	8006f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d107      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0220 	mvn.w	r2, #32
 8006da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa4c 	bl	8007248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIM_ConfigClockSource+0x18>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e0b3      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x180>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e08:	d03e      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0xd0>
 8006e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0e:	f200 8087 	bhi.w	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	f000 8085 	beq.w	8006f24 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1e:	d87f      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e20:	2b70      	cmp	r3, #112	; 0x70
 8006e22:	d01a      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xa2>
 8006e24:	2b70      	cmp	r3, #112	; 0x70
 8006e26:	d87b      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e28:	2b60      	cmp	r3, #96	; 0x60
 8006e2a:	d050      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x116>
 8006e2c:	2b60      	cmp	r3, #96	; 0x60
 8006e2e:	d877      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e30:	2b50      	cmp	r3, #80	; 0x50
 8006e32:	d03c      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0xf6>
 8006e34:	2b50      	cmp	r3, #80	; 0x50
 8006e36:	d873      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d058      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x136>
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d86f      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e40:	2b30      	cmp	r3, #48	; 0x30
 8006e42:	d064      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x156>
 8006e44:	2b30      	cmp	r3, #48	; 0x30
 8006e46:	d86b      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d060      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x156>
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d867      	bhi.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d05c      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x156>
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d05a      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006e58:	e062      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6899      	ldr	r1, [r3, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f000 f970 	bl	800714e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	609a      	str	r2, [r3, #8]
      break;
 8006e86:	e04e      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6899      	ldr	r1, [r3, #8]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f000 f959 	bl	800714e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eaa:	609a      	str	r2, [r3, #8]
      break;
 8006eac:	e03b      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f000 f8d0 	bl	8007060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2150      	movs	r1, #80	; 0x50
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f927 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006ecc:	e02b      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 f8ee 	bl	80070bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2160      	movs	r1, #96	; 0x60
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f917 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006eec:	e01b      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 f8b0 	bl	8007060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2140      	movs	r1, #64	; 0x40
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f907 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e00b      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f000 f8fe 	bl	800711a <TIM_ITRx_SetConfig>
        break;
 8006f1e:	e002      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr
	...

08006f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a29      	ldr	r2, [pc, #164]	; (8007054 <TIM_Base_SetConfig+0xb8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <TIM_Base_SetConfig+0x30>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d007      	beq.n	8006fcc <TIM_Base_SetConfig+0x30>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <TIM_Base_SetConfig+0xbc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0x30>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a25      	ldr	r2, [pc, #148]	; (800705c <TIM_Base_SetConfig+0xc0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <TIM_Base_SetConfig+0xb8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00b      	beq.n	8006ffe <TIM_Base_SetConfig+0x62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d007      	beq.n	8006ffe <TIM_Base_SetConfig+0x62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <TIM_Base_SetConfig+0xbc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d003      	beq.n	8006ffe <TIM_Base_SetConfig+0x62>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <TIM_Base_SetConfig+0xc0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d108      	bne.n	8007010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a07      	ldr	r2, [pc, #28]	; (8007054 <TIM_Base_SetConfig+0xb8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d103      	bne.n	8007044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	615a      	str	r2, [r3, #20]
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800

08007060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f023 0210 	bic.w	r2, r3, #16
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	031b      	lsls	r3, r3, #12
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	f043 0307 	orr.w	r3, r3, #7
 800713c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	609a      	str	r2, [r3, #8]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800714e:	b480      	push	{r7}
 8007150:	b087      	sub	sp, #28
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	021a      	lsls	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	431a      	orrs	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4313      	orrs	r3, r2
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	609a      	str	r2, [r3, #8]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e046      	b.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a16      	ldr	r2, [pc, #88]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f0:	d009      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a12      	ldr	r2, [pc, #72]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a10      	ldr	r2, [pc, #64]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10c      	bne.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	4313      	orrs	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800

08007248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e03f      	b.n	80072fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fd ffb6 	bl	8005204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2224      	movs	r2, #36	; 0x24
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc25 	bl	8007b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695a      	ldr	r2, [r3, #20]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b08a      	sub	sp, #40	; 0x28
 800730a:	af02      	add	r7, sp, #8
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b20      	cmp	r3, #32
 8007324:	d17c      	bne.n	8007420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_UART_Transmit+0x2c>
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e075      	b.n	8007422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_UART_Transmit+0x3e>
 8007340:	2302      	movs	r3, #2
 8007342:	e06e      	b.n	8007422 <HAL_UART_Transmit+0x11c>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2221      	movs	r2, #33	; 0x21
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800735a:	f7fe f969 	bl	8005630 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	88fa      	ldrh	r2, [r7, #6]
 800736a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d108      	bne.n	8007388 <HAL_UART_Transmit+0x82>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e003      	b.n	8007390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007398:	e02a      	b.n	80073f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2180      	movs	r1, #128	; 0x80
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa11 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e036      	b.n	8007422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	3302      	adds	r3, #2
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	e007      	b.n	80073e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1cf      	bne.n	800739a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2200      	movs	r2, #0
 8007402:	2140      	movs	r1, #64	; 0x40
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f9e1 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e006      	b.n	8007422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10d      	bne.n	800747e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x52>
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa99 	bl	80079ae <UART_Receive_IT>
      return;
 800747c:	e17b      	b.n	8007776 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 80b1 	beq.w	80075e8 <HAL_UART_IRQHandler+0x1bc>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <HAL_UART_IRQHandler+0x70>
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80a6 	beq.w	80075e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <HAL_UART_IRQHandler+0x90>
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_UART_IRQHandler+0xb0>
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	f043 0202 	orr.w	r2, r3, #2
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_UART_IRQHandler+0xd0>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	f043 0204 	orr.w	r2, r3, #4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <HAL_UART_IRQHandler+0xfa>
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_UART_IRQHandler+0xee>
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 811e 	beq.w	800776c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <HAL_UART_IRQHandler+0x11e>
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fa32 	bl	80079ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d102      	bne.n	8007572 <HAL_UART_IRQHandler+0x146>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d031      	beq.n	80075d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f974 	bl	8007860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d023      	beq.n	80075ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007594:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d013      	beq.n	80075c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	4a76      	ldr	r2, [pc, #472]	; (800777c <HAL_UART_IRQHandler+0x350>)
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe f992 	bl	80058d4 <HAL_DMA_Abort_IT>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	e00e      	b.n	80075e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8ec 	bl	80077a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075cc:	e00a      	b.n	80075e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f8e8 	bl	80077a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	e006      	b.n	80075e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f8e4 	bl	80077a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075e2:	e0c3      	b.n	800776c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e4:	bf00      	nop
    return;
 80075e6:	e0c1      	b.n	800776c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	f040 80a1 	bne.w	8007734 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 809b 	beq.w	8007734 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8095 	beq.w	8007734 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d04e      	beq.n	80076cc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007638:	8a3b      	ldrh	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8098 	beq.w	8007770 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007644:	8a3a      	ldrh	r2, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	f080 8092 	bcs.w	8007770 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8a3a      	ldrh	r2, [r7, #16]
 8007650:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	2b20      	cmp	r3, #32
 800765a:	d02b      	beq.n	80076b4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800766a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695a      	ldr	r2, [r3, #20]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0201 	bic.w	r2, r2, #1
 800767a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695a      	ldr	r2, [r3, #20]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0210 	bic.w	r2, r2, #16
 80076a8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe f8d5 	bl	800585e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f876 	bl	80077b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076ca:	e051      	b.n	8007770 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d047      	beq.n	8007774 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d044      	beq.n	8007774 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0210 	bic.w	r2, r2, #16
 8007726:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007728:	8a7b      	ldrh	r3, [r7, #18]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f842 	bl	80077b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007732:	e01f      	b.n	8007774 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773a:	2b00      	cmp	r3, #0
 800773c:	d008      	beq.n	8007750 <HAL_UART_IRQHandler+0x324>
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f8c9 	bl	80078e0 <UART_Transmit_IT>
    return;
 800774e:	e012      	b.n	8007776 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <HAL_UART_IRQHandler+0x34a>
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f90a 	bl	800797e <UART_EndTransmit_IT>
    return;
 800776a:	e004      	b.n	8007776 <HAL_UART_IRQHandler+0x34a>
    return;
 800776c:	bf00      	nop
 800776e:	e002      	b.n	8007776 <HAL_UART_IRQHandler+0x34a>
      return;
 8007770:	bf00      	nop
 8007772:	e000      	b.n	8007776 <HAL_UART_IRQHandler+0x34a>
      return;
 8007774:	bf00      	nop
  }
}
 8007776:	3728      	adds	r7, #40	; 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	080078b9 	.word	0x080078b9

08007780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr

08007792 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077dc:	e02c      	b.n	8007838 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d028      	beq.n	8007838 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <UART_WaitOnFlagUntilTimeout+0x30>
 80077ec:	f7fd ff20 	bl	8005630 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d21d      	bcs.n	8007838 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800780a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695a      	ldr	r2, [r3, #20]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e00f      	b.n	8007858 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	4013      	ands	r3, r2
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	bf0c      	ite	eq
 8007848:	2301      	moveq	r3, #1
 800784a:	2300      	movne	r3, #0
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	429a      	cmp	r2, r3
 8007854:	d0c3      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007876:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	2b01      	cmp	r3, #1
 800788e:	d107      	bne.n	80078a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0210 	bic.w	r2, r2, #16
 800789e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff ff66 	bl	80077a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b21      	cmp	r3, #33	; 0x21
 80078f2:	d13e      	bne.n	8007972 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fc:	d114      	bne.n	8007928 <UART_Transmit_IT+0x48>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d110      	bne.n	8007928 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800791a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	1c9a      	adds	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	621a      	str	r2, [r3, #32]
 8007926:	e008      	b.n	800793a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6211      	str	r1, [r2, #32]
 8007932:	781a      	ldrb	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29b      	uxth	r3, r3
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4619      	mov	r1, r3
 8007948:	84d1      	strh	r1, [r2, #38]	; 0x26
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800795c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800796c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007972:	2302      	movs	r3, #2
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff feee 	bl	8007780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b22      	cmp	r3, #34	; 0x22
 80079c0:	f040 8099 	bne.w	8007af6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d117      	bne.n	80079fe <UART_Receive_IT+0x50>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d113      	bne.n	80079fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
 80079fc:	e026      	b.n	8007a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a10:	d007      	beq.n	8007a22 <UART_Receive_IT+0x74>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <UART_Receive_IT+0x82>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e008      	b.n	8007a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d148      	bne.n	8007af2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0220 	bic.w	r2, r2, #32
 8007a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d123      	bne.n	8007ae8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0210 	bic.w	r2, r2, #16
 8007ab4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d10a      	bne.n	8007ada <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe68 	bl	80077b6 <HAL_UARTEx_RxEventCallback>
 8007ae6:	e002      	b.n	8007aee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fe52 	bl	8007792 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e002      	b.n	8007af8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b3a:	f023 030c 	bic.w	r3, r3, #12
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	430b      	orrs	r3, r1
 8007b46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <UART_SetConfig+0x114>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d103      	bne.n	8007b70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7fe ff00 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	e002      	b.n	8007b76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b70:	f7fe fee8 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 8007b74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009a      	lsls	r2, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8c:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <UART_SetConfig+0x118>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	0119      	lsls	r1, r3, #4
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009a      	lsls	r2, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bac:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <UART_SetConfig+0x118>)
 8007bae:	fba3 0302 	umull	r0, r3, r3, r2
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	2064      	movs	r0, #100	; 0x64
 8007bb6:	fb00 f303 	mul.w	r3, r0, r3
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	3332      	adds	r3, #50	; 0x32
 8007bc0:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <UART_SetConfig+0x118>)
 8007bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bcc:	4419      	add	r1, r3
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009a      	lsls	r2, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <UART_SetConfig+0x118>)
 8007be6:	fba3 0302 	umull	r0, r3, r3, r2
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	2064      	movs	r0, #100	; 0x64
 8007bee:	fb00 f303 	mul.w	r3, r0, r3
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	3332      	adds	r3, #50	; 0x32
 8007bf8:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <UART_SetConfig+0x118>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	440a      	add	r2, r1
 8007c0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40013800 	.word	0x40013800
 8007c18:	51eb851f 	.word	0x51eb851f

08007c1c <__errno>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	; (8007c24 <__errno+0x8>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000028 	.word	0x20000028

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	4d0c      	ldr	r5, [pc, #48]	; (8007c60 <__libc_init_array+0x38>)
 8007c2e:	4c0d      	ldr	r4, [pc, #52]	; (8007c64 <__libc_init_array+0x3c>)
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	f001 f82c 	bl	8008c94 <_init>
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	4d0a      	ldr	r5, [pc, #40]	; (8007c68 <__libc_init_array+0x40>)
 8007c40:	4c0a      	ldr	r4, [pc, #40]	; (8007c6c <__libc_init_array+0x44>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	08008eb0 	.word	0x08008eb0
 8007c64:	08008eb0 	.word	0x08008eb0
 8007c68:	08008eb0 	.word	0x08008eb0
 8007c6c:	08008eb4 	.word	0x08008eb4

08007c70 <memset>:
 8007c70:	4603      	mov	r3, r0
 8007c72:	4402      	add	r2, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <iprintf>:
 8007c80:	b40f      	push	{r0, r1, r2, r3}
 8007c82:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <iprintf+0x2c>)
 8007c84:	b513      	push	{r0, r1, r4, lr}
 8007c86:	681c      	ldr	r4, [r3, #0]
 8007c88:	b124      	cbz	r4, 8007c94 <iprintf+0x14>
 8007c8a:	69a3      	ldr	r3, [r4, #24]
 8007c8c:	b913      	cbnz	r3, 8007c94 <iprintf+0x14>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 fa5a 	bl	8008148 <__sinit>
 8007c94:	ab05      	add	r3, sp, #20
 8007c96:	4620      	mov	r0, r4
 8007c98:	9a04      	ldr	r2, [sp, #16]
 8007c9a:	68a1      	ldr	r1, [r4, #8]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	f000 fc5d 	bl	800855c <_vfiprintf_r>
 8007ca2:	b002      	add	sp, #8
 8007ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca8:	b004      	add	sp, #16
 8007caa:	4770      	bx	lr
 8007cac:	20000028 	.word	0x20000028

08007cb0 <_puts_r>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	b118      	cbz	r0, 8007cc0 <_puts_r+0x10>
 8007cb8:	6983      	ldr	r3, [r0, #24]
 8007cba:	b90b      	cbnz	r3, 8007cc0 <_puts_r+0x10>
 8007cbc:	f000 fa44 	bl	8008148 <__sinit>
 8007cc0:	69ab      	ldr	r3, [r5, #24]
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	b913      	cbnz	r3, 8007ccc <_puts_r+0x1c>
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fa3e 	bl	8008148 <__sinit>
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	; (8007d80 <_puts_r+0xd0>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d120      	bne.n	8007d14 <_puts_r+0x64>
 8007cd2:	686c      	ldr	r4, [r5, #4]
 8007cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd6:	07db      	lsls	r3, r3, #31
 8007cd8:	d405      	bmi.n	8007ce6 <_puts_r+0x36>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	0598      	lsls	r0, r3, #22
 8007cde:	d402      	bmi.n	8007ce6 <_puts_r+0x36>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce2:	f000 facf 	bl	8008284 <__retarget_lock_acquire_recursive>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	0719      	lsls	r1, r3, #28
 8007cea:	d51d      	bpl.n	8007d28 <_puts_r+0x78>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	b1db      	cbz	r3, 8007d28 <_puts_r+0x78>
 8007cf0:	3e01      	subs	r6, #1
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	60a3      	str	r3, [r4, #8]
 8007cfc:	bb39      	cbnz	r1, 8007d4e <_puts_r+0x9e>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da38      	bge.n	8007d74 <_puts_r+0xc4>
 8007d02:	4622      	mov	r2, r4
 8007d04:	210a      	movs	r1, #10
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 f848 	bl	8007d9c <__swbuf_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d011      	beq.n	8007d34 <_puts_r+0x84>
 8007d10:	250a      	movs	r5, #10
 8007d12:	e011      	b.n	8007d38 <_puts_r+0x88>
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <_puts_r+0xd4>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <_puts_r+0x6e>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7da      	b.n	8007cd4 <_puts_r+0x24>
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <_puts_r+0xd8>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7d5      	b.n	8007cd4 <_puts_r+0x24>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f888 	bl	8007e40 <__swsetup_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0dd      	beq.n	8007cf0 <_puts_r+0x40>
 8007d34:	f04f 35ff 	mov.w	r5, #4294967295
 8007d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d3a:	07da      	lsls	r2, r3, #31
 8007d3c:	d405      	bmi.n	8007d4a <_puts_r+0x9a>
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	059b      	lsls	r3, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_puts_r+0x9a>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f000 fa9e 	bl	8008286 <__retarget_lock_release_recursive>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da04      	bge.n	8007d5c <_puts_r+0xac>
 8007d52:	69a2      	ldr	r2, [r4, #24]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	dc06      	bgt.n	8007d66 <_puts_r+0xb6>
 8007d58:	290a      	cmp	r1, #10
 8007d5a:	d004      	beq.n	8007d66 <_puts_r+0xb6>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	7019      	strb	r1, [r3, #0]
 8007d64:	e7c5      	b.n	8007cf2 <_puts_r+0x42>
 8007d66:	4622      	mov	r2, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 f817 	bl	8007d9c <__swbuf_r>
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d1bf      	bne.n	8007cf2 <_puts_r+0x42>
 8007d72:	e7df      	b.n	8007d34 <_puts_r+0x84>
 8007d74:	250a      	movs	r5, #10
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	701d      	strb	r5, [r3, #0]
 8007d7e:	e7db      	b.n	8007d38 <_puts_r+0x88>
 8007d80:	08008e3c 	.word	0x08008e3c
 8007d84:	08008e5c 	.word	0x08008e5c
 8007d88:	08008e1c 	.word	0x08008e1c

08007d8c <puts>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <puts+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f7ff bf8d 	b.w	8007cb0 <_puts_r>
 8007d96:	bf00      	nop
 8007d98:	20000028 	.word	0x20000028

08007d9c <__swbuf_r>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	460e      	mov	r6, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	4605      	mov	r5, r0
 8007da4:	b118      	cbz	r0, 8007dae <__swbuf_r+0x12>
 8007da6:	6983      	ldr	r3, [r0, #24]
 8007da8:	b90b      	cbnz	r3, 8007dae <__swbuf_r+0x12>
 8007daa:	f000 f9cd 	bl	8008148 <__sinit>
 8007dae:	4b21      	ldr	r3, [pc, #132]	; (8007e34 <__swbuf_r+0x98>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	d12b      	bne.n	8007e0c <__swbuf_r+0x70>
 8007db4:	686c      	ldr	r4, [r5, #4]
 8007db6:	69a3      	ldr	r3, [r4, #24]
 8007db8:	60a3      	str	r3, [r4, #8]
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	071a      	lsls	r2, r3, #28
 8007dbe:	d52f      	bpl.n	8007e20 <__swbuf_r+0x84>
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	b36b      	cbz	r3, 8007e20 <__swbuf_r+0x84>
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	6820      	ldr	r0, [r4, #0]
 8007dc8:	b2f6      	uxtb	r6, r6
 8007dca:	1ac0      	subs	r0, r0, r3
 8007dcc:	6963      	ldr	r3, [r4, #20]
 8007dce:	4637      	mov	r7, r6
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	dc04      	bgt.n	8007dde <__swbuf_r+0x42>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f922 	bl	8008020 <_fflush_r>
 8007ddc:	bb30      	cbnz	r0, 8007e2c <__swbuf_r+0x90>
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	3001      	adds	r0, #1
 8007de2:	3b01      	subs	r3, #1
 8007de4:	60a3      	str	r3, [r4, #8]
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	701e      	strb	r6, [r3, #0]
 8007dee:	6963      	ldr	r3, [r4, #20]
 8007df0:	4283      	cmp	r3, r0
 8007df2:	d004      	beq.n	8007dfe <__swbuf_r+0x62>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	07db      	lsls	r3, r3, #31
 8007df8:	d506      	bpl.n	8007e08 <__swbuf_r+0x6c>
 8007dfa:	2e0a      	cmp	r6, #10
 8007dfc:	d104      	bne.n	8007e08 <__swbuf_r+0x6c>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4628      	mov	r0, r5
 8007e02:	f000 f90d 	bl	8008020 <_fflush_r>
 8007e06:	b988      	cbnz	r0, 8007e2c <__swbuf_r+0x90>
 8007e08:	4638      	mov	r0, r7
 8007e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <__swbuf_r+0x9c>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d101      	bne.n	8007e16 <__swbuf_r+0x7a>
 8007e12:	68ac      	ldr	r4, [r5, #8]
 8007e14:	e7cf      	b.n	8007db6 <__swbuf_r+0x1a>
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <__swbuf_r+0xa0>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	bf08      	it	eq
 8007e1c:	68ec      	ldreq	r4, [r5, #12]
 8007e1e:	e7ca      	b.n	8007db6 <__swbuf_r+0x1a>
 8007e20:	4621      	mov	r1, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f80c 	bl	8007e40 <__swsetup_r>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d0cb      	beq.n	8007dc4 <__swbuf_r+0x28>
 8007e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e30:	e7ea      	b.n	8007e08 <__swbuf_r+0x6c>
 8007e32:	bf00      	nop
 8007e34:	08008e3c 	.word	0x08008e3c
 8007e38:	08008e5c 	.word	0x08008e5c
 8007e3c:	08008e1c 	.word	0x08008e1c

08007e40 <__swsetup_r>:
 8007e40:	4b32      	ldr	r3, [pc, #200]	; (8007f0c <__swsetup_r+0xcc>)
 8007e42:	b570      	push	{r4, r5, r6, lr}
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	4606      	mov	r6, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	b125      	cbz	r5, 8007e56 <__swsetup_r+0x16>
 8007e4c:	69ab      	ldr	r3, [r5, #24]
 8007e4e:	b913      	cbnz	r3, 8007e56 <__swsetup_r+0x16>
 8007e50:	4628      	mov	r0, r5
 8007e52:	f000 f979 	bl	8008148 <__sinit>
 8007e56:	4b2e      	ldr	r3, [pc, #184]	; (8007f10 <__swsetup_r+0xd0>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	d10f      	bne.n	8007e7c <__swsetup_r+0x3c>
 8007e5c:	686c      	ldr	r4, [r5, #4]
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e64:	0719      	lsls	r1, r3, #28
 8007e66:	d42c      	bmi.n	8007ec2 <__swsetup_r+0x82>
 8007e68:	06dd      	lsls	r5, r3, #27
 8007e6a:	d411      	bmi.n	8007e90 <__swsetup_r+0x50>
 8007e6c:	2309      	movs	r3, #9
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	e03e      	b.n	8007efa <__swsetup_r+0xba>
 8007e7c:	4b25      	ldr	r3, [pc, #148]	; (8007f14 <__swsetup_r+0xd4>)
 8007e7e:	429c      	cmp	r4, r3
 8007e80:	d101      	bne.n	8007e86 <__swsetup_r+0x46>
 8007e82:	68ac      	ldr	r4, [r5, #8]
 8007e84:	e7eb      	b.n	8007e5e <__swsetup_r+0x1e>
 8007e86:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <__swsetup_r+0xd8>)
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	bf08      	it	eq
 8007e8c:	68ec      	ldreq	r4, [r5, #12]
 8007e8e:	e7e6      	b.n	8007e5e <__swsetup_r+0x1e>
 8007e90:	0758      	lsls	r0, r3, #29
 8007e92:	d512      	bpl.n	8007eba <__swsetup_r+0x7a>
 8007e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e96:	b141      	cbz	r1, 8007eaa <__swsetup_r+0x6a>
 8007e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <__swsetup_r+0x66>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 fa57 	bl	8008354 <_free_r>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6363      	str	r3, [r4, #52]	; 0x34
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f043 0308 	orr.w	r3, r3, #8
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	b94b      	cbnz	r3, 8007eda <__swsetup_r+0x9a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed0:	d003      	beq.n	8007eda <__swsetup_r+0x9a>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 f9fd 	bl	80082d4 <__smakebuf_r>
 8007eda:	89a0      	ldrh	r0, [r4, #12]
 8007edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee0:	f010 0301 	ands.w	r3, r0, #1
 8007ee4:	d00a      	beq.n	8007efc <__swsetup_r+0xbc>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60a3      	str	r3, [r4, #8]
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	425b      	negs	r3, r3
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	b943      	cbnz	r3, 8007f06 <__swsetup_r+0xc6>
 8007ef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ef8:	d1ba      	bne.n	8007e70 <__swsetup_r+0x30>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	0781      	lsls	r1, r0, #30
 8007efe:	bf58      	it	pl
 8007f00:	6963      	ldrpl	r3, [r4, #20]
 8007f02:	60a3      	str	r3, [r4, #8]
 8007f04:	e7f4      	b.n	8007ef0 <__swsetup_r+0xb0>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e7f7      	b.n	8007efa <__swsetup_r+0xba>
 8007f0a:	bf00      	nop
 8007f0c:	20000028 	.word	0x20000028
 8007f10:	08008e3c 	.word	0x08008e3c
 8007f14:	08008e5c 	.word	0x08008e5c
 8007f18:	08008e1c 	.word	0x08008e1c

08007f1c <__sflush_r>:
 8007f1c:	898a      	ldrh	r2, [r1, #12]
 8007f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f20:	4605      	mov	r5, r0
 8007f22:	0710      	lsls	r0, r2, #28
 8007f24:	460c      	mov	r4, r1
 8007f26:	d457      	bmi.n	8007fd8 <__sflush_r+0xbc>
 8007f28:	684b      	ldr	r3, [r1, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc04      	bgt.n	8007f38 <__sflush_r+0x1c>
 8007f2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dc01      	bgt.n	8007f38 <__sflush_r+0x1c>
 8007f34:	2000      	movs	r0, #0
 8007f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	d0fa      	beq.n	8007f34 <__sflush_r+0x18>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f44:	682f      	ldr	r7, [r5, #0]
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	d032      	beq.n	8007fb0 <__sflush_r+0x94>
 8007f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	075a      	lsls	r2, r3, #29
 8007f50:	d505      	bpl.n	8007f5e <__sflush_r+0x42>
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	1ac0      	subs	r0, r0, r3
 8007f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f58:	b10b      	cbz	r3, 8007f5e <__sflush_r+0x42>
 8007f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5c:	1ac0      	subs	r0, r0, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4602      	mov	r2, r0
 8007f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f64:	4628      	mov	r0, r5
 8007f66:	6a21      	ldr	r1, [r4, #32]
 8007f68:	47b0      	blx	r6
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	d106      	bne.n	8007f7e <__sflush_r+0x62>
 8007f70:	6829      	ldr	r1, [r5, #0]
 8007f72:	291d      	cmp	r1, #29
 8007f74:	d82c      	bhi.n	8007fd0 <__sflush_r+0xb4>
 8007f76:	4a29      	ldr	r2, [pc, #164]	; (800801c <__sflush_r+0x100>)
 8007f78:	40ca      	lsrs	r2, r1
 8007f7a:	07d6      	lsls	r6, r2, #31
 8007f7c:	d528      	bpl.n	8007fd0 <__sflush_r+0xb4>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	6062      	str	r2, [r4, #4]
 8007f82:	6922      	ldr	r2, [r4, #16]
 8007f84:	04d9      	lsls	r1, r3, #19
 8007f86:	6022      	str	r2, [r4, #0]
 8007f88:	d504      	bpl.n	8007f94 <__sflush_r+0x78>
 8007f8a:	1c42      	adds	r2, r0, #1
 8007f8c:	d101      	bne.n	8007f92 <__sflush_r+0x76>
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	b903      	cbnz	r3, 8007f94 <__sflush_r+0x78>
 8007f92:	6560      	str	r0, [r4, #84]	; 0x54
 8007f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f96:	602f      	str	r7, [r5, #0]
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d0cb      	beq.n	8007f34 <__sflush_r+0x18>
 8007f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa0:	4299      	cmp	r1, r3
 8007fa2:	d002      	beq.n	8007faa <__sflush_r+0x8e>
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f9d5 	bl	8008354 <_free_r>
 8007faa:	2000      	movs	r0, #0
 8007fac:	6360      	str	r0, [r4, #52]	; 0x34
 8007fae:	e7c2      	b.n	8007f36 <__sflush_r+0x1a>
 8007fb0:	6a21      	ldr	r1, [r4, #32]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b0      	blx	r6
 8007fb8:	1c41      	adds	r1, r0, #1
 8007fba:	d1c7      	bne.n	8007f4c <__sflush_r+0x30>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0c4      	beq.n	8007f4c <__sflush_r+0x30>
 8007fc2:	2b1d      	cmp	r3, #29
 8007fc4:	d001      	beq.n	8007fca <__sflush_r+0xae>
 8007fc6:	2b16      	cmp	r3, #22
 8007fc8:	d101      	bne.n	8007fce <__sflush_r+0xb2>
 8007fca:	602f      	str	r7, [r5, #0]
 8007fcc:	e7b2      	b.n	8007f34 <__sflush_r+0x18>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	e7ae      	b.n	8007f36 <__sflush_r+0x1a>
 8007fd8:	690f      	ldr	r7, [r1, #16]
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	d0aa      	beq.n	8007f34 <__sflush_r+0x18>
 8007fde:	0793      	lsls	r3, r2, #30
 8007fe0:	bf18      	it	ne
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	680e      	ldr	r6, [r1, #0]
 8007fe6:	bf08      	it	eq
 8007fe8:	694b      	ldreq	r3, [r1, #20]
 8007fea:	1bf6      	subs	r6, r6, r7
 8007fec:	600f      	str	r7, [r1, #0]
 8007fee:	608b      	str	r3, [r1, #8]
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	dd9f      	ble.n	8007f34 <__sflush_r+0x18>
 8007ff4:	4633      	mov	r3, r6
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	6a21      	ldr	r1, [r4, #32]
 8007ffc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008000:	47e0      	blx	ip
 8008002:	2800      	cmp	r0, #0
 8008004:	dc06      	bgt.n	8008014 <__sflush_r+0xf8>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	e790      	b.n	8007f36 <__sflush_r+0x1a>
 8008014:	4407      	add	r7, r0
 8008016:	1a36      	subs	r6, r6, r0
 8008018:	e7ea      	b.n	8007ff0 <__sflush_r+0xd4>
 800801a:	bf00      	nop
 800801c:	20400001 	.word	0x20400001

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b913      	cbnz	r3, 8008030 <_fflush_r+0x10>
 800802a:	2500      	movs	r5, #0
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	b118      	cbz	r0, 800803a <_fflush_r+0x1a>
 8008032:	6983      	ldr	r3, [r0, #24]
 8008034:	b90b      	cbnz	r3, 800803a <_fflush_r+0x1a>
 8008036:	f000 f887 	bl	8008148 <__sinit>
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <_fflush_r+0x6c>)
 800803c:	429c      	cmp	r4, r3
 800803e:	d11b      	bne.n	8008078 <_fflush_r+0x58>
 8008040:	686c      	ldr	r4, [r5, #4]
 8008042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0ef      	beq.n	800802a <_fflush_r+0xa>
 800804a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800804c:	07d0      	lsls	r0, r2, #31
 800804e:	d404      	bmi.n	800805a <_fflush_r+0x3a>
 8008050:	0599      	lsls	r1, r3, #22
 8008052:	d402      	bmi.n	800805a <_fflush_r+0x3a>
 8008054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008056:	f000 f915 	bl	8008284 <__retarget_lock_acquire_recursive>
 800805a:	4628      	mov	r0, r5
 800805c:	4621      	mov	r1, r4
 800805e:	f7ff ff5d 	bl	8007f1c <__sflush_r>
 8008062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008064:	4605      	mov	r5, r0
 8008066:	07da      	lsls	r2, r3, #31
 8008068:	d4e0      	bmi.n	800802c <_fflush_r+0xc>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	059b      	lsls	r3, r3, #22
 800806e:	d4dd      	bmi.n	800802c <_fflush_r+0xc>
 8008070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008072:	f000 f908 	bl	8008286 <__retarget_lock_release_recursive>
 8008076:	e7d9      	b.n	800802c <_fflush_r+0xc>
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <_fflush_r+0x70>)
 800807a:	429c      	cmp	r4, r3
 800807c:	d101      	bne.n	8008082 <_fflush_r+0x62>
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	e7df      	b.n	8008042 <_fflush_r+0x22>
 8008082:	4b04      	ldr	r3, [pc, #16]	; (8008094 <_fflush_r+0x74>)
 8008084:	429c      	cmp	r4, r3
 8008086:	bf08      	it	eq
 8008088:	68ec      	ldreq	r4, [r5, #12]
 800808a:	e7da      	b.n	8008042 <_fflush_r+0x22>
 800808c:	08008e3c 	.word	0x08008e3c
 8008090:	08008e5c 	.word	0x08008e5c
 8008094:	08008e1c 	.word	0x08008e1c

08008098 <std>:
 8008098:	2300      	movs	r3, #0
 800809a:	b510      	push	{r4, lr}
 800809c:	4604      	mov	r4, r0
 800809e:	e9c0 3300 	strd	r3, r3, [r0]
 80080a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a6:	6083      	str	r3, [r0, #8]
 80080a8:	8181      	strh	r1, [r0, #12]
 80080aa:	6643      	str	r3, [r0, #100]	; 0x64
 80080ac:	81c2      	strh	r2, [r0, #14]
 80080ae:	6183      	str	r3, [r0, #24]
 80080b0:	4619      	mov	r1, r3
 80080b2:	2208      	movs	r2, #8
 80080b4:	305c      	adds	r0, #92	; 0x5c
 80080b6:	f7ff fddb 	bl	8007c70 <memset>
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x38>)
 80080bc:	6224      	str	r4, [r4, #32]
 80080be:	6263      	str	r3, [r4, #36]	; 0x24
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <std+0x3c>)
 80080c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <std+0x40>)
 80080c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <std+0x44>)
 80080ca:	6323      	str	r3, [r4, #48]	; 0x30
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop
 80080d0:	08008b09 	.word	0x08008b09
 80080d4:	08008b2b 	.word	0x08008b2b
 80080d8:	08008b63 	.word	0x08008b63
 80080dc:	08008b87 	.word	0x08008b87

080080e0 <_cleanup_r>:
 80080e0:	4901      	ldr	r1, [pc, #4]	; (80080e8 <_cleanup_r+0x8>)
 80080e2:	f000 b8af 	b.w	8008244 <_fwalk_reent>
 80080e6:	bf00      	nop
 80080e8:	08008021 	.word	0x08008021

080080ec <__sfmoreglue>:
 80080ec:	2268      	movs	r2, #104	; 0x68
 80080ee:	b570      	push	{r4, r5, r6, lr}
 80080f0:	1e4d      	subs	r5, r1, #1
 80080f2:	4355      	muls	r5, r2
 80080f4:	460e      	mov	r6, r1
 80080f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080fa:	f000 f993 	bl	8008424 <_malloc_r>
 80080fe:	4604      	mov	r4, r0
 8008100:	b140      	cbz	r0, 8008114 <__sfmoreglue+0x28>
 8008102:	2100      	movs	r1, #0
 8008104:	e9c0 1600 	strd	r1, r6, [r0]
 8008108:	300c      	adds	r0, #12
 800810a:	60a0      	str	r0, [r4, #8]
 800810c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008110:	f7ff fdae 	bl	8007c70 <memset>
 8008114:	4620      	mov	r0, r4
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <__sfp_lock_acquire>:
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <__sfp_lock_acquire+0x8>)
 800811a:	f000 b8b3 	b.w	8008284 <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	20000241 	.word	0x20000241

08008124 <__sfp_lock_release>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__sfp_lock_release+0x8>)
 8008126:	f000 b8ae 	b.w	8008286 <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	20000241 	.word	0x20000241

08008130 <__sinit_lock_acquire>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__sinit_lock_acquire+0x8>)
 8008132:	f000 b8a7 	b.w	8008284 <__retarget_lock_acquire_recursive>
 8008136:	bf00      	nop
 8008138:	20000242 	.word	0x20000242

0800813c <__sinit_lock_release>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__sinit_lock_release+0x8>)
 800813e:	f000 b8a2 	b.w	8008286 <__retarget_lock_release_recursive>
 8008142:	bf00      	nop
 8008144:	20000242 	.word	0x20000242

08008148 <__sinit>:
 8008148:	b510      	push	{r4, lr}
 800814a:	4604      	mov	r4, r0
 800814c:	f7ff fff0 	bl	8008130 <__sinit_lock_acquire>
 8008150:	69a3      	ldr	r3, [r4, #24]
 8008152:	b11b      	cbz	r3, 800815c <__sinit+0x14>
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f7ff bff0 	b.w	800813c <__sinit_lock_release>
 800815c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008160:	6523      	str	r3, [r4, #80]	; 0x50
 8008162:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <__sinit+0x68>)
 8008164:	4a13      	ldr	r2, [pc, #76]	; (80081b4 <__sinit+0x6c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	62a2      	str	r2, [r4, #40]	; 0x28
 800816a:	42a3      	cmp	r3, r4
 800816c:	bf08      	it	eq
 800816e:	2301      	moveq	r3, #1
 8008170:	4620      	mov	r0, r4
 8008172:	bf08      	it	eq
 8008174:	61a3      	streq	r3, [r4, #24]
 8008176:	f000 f81f 	bl	80081b8 <__sfp>
 800817a:	6060      	str	r0, [r4, #4]
 800817c:	4620      	mov	r0, r4
 800817e:	f000 f81b 	bl	80081b8 <__sfp>
 8008182:	60a0      	str	r0, [r4, #8]
 8008184:	4620      	mov	r0, r4
 8008186:	f000 f817 	bl	80081b8 <__sfp>
 800818a:	2200      	movs	r2, #0
 800818c:	2104      	movs	r1, #4
 800818e:	60e0      	str	r0, [r4, #12]
 8008190:	6860      	ldr	r0, [r4, #4]
 8008192:	f7ff ff81 	bl	8008098 <std>
 8008196:	2201      	movs	r2, #1
 8008198:	2109      	movs	r1, #9
 800819a:	68a0      	ldr	r0, [r4, #8]
 800819c:	f7ff ff7c 	bl	8008098 <std>
 80081a0:	2202      	movs	r2, #2
 80081a2:	2112      	movs	r1, #18
 80081a4:	68e0      	ldr	r0, [r4, #12]
 80081a6:	f7ff ff77 	bl	8008098 <std>
 80081aa:	2301      	movs	r3, #1
 80081ac:	61a3      	str	r3, [r4, #24]
 80081ae:	e7d1      	b.n	8008154 <__sinit+0xc>
 80081b0:	08008e18 	.word	0x08008e18
 80081b4:	080080e1 	.word	0x080080e1

080081b8 <__sfp>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	4607      	mov	r7, r0
 80081bc:	f7ff ffac 	bl	8008118 <__sfp_lock_acquire>
 80081c0:	4b1e      	ldr	r3, [pc, #120]	; (800823c <__sfp+0x84>)
 80081c2:	681e      	ldr	r6, [r3, #0]
 80081c4:	69b3      	ldr	r3, [r6, #24]
 80081c6:	b913      	cbnz	r3, 80081ce <__sfp+0x16>
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff ffbd 	bl	8008148 <__sinit>
 80081ce:	3648      	adds	r6, #72	; 0x48
 80081d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	d503      	bpl.n	80081e0 <__sfp+0x28>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	b30b      	cbz	r3, 8008220 <__sfp+0x68>
 80081dc:	6836      	ldr	r6, [r6, #0]
 80081de:	e7f7      	b.n	80081d0 <__sfp+0x18>
 80081e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081e4:	b9d5      	cbnz	r5, 800821c <__sfp+0x64>
 80081e6:	4b16      	ldr	r3, [pc, #88]	; (8008240 <__sfp+0x88>)
 80081e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081ec:	60e3      	str	r3, [r4, #12]
 80081ee:	6665      	str	r5, [r4, #100]	; 0x64
 80081f0:	f000 f847 	bl	8008282 <__retarget_lock_init_recursive>
 80081f4:	f7ff ff96 	bl	8008124 <__sfp_lock_release>
 80081f8:	2208      	movs	r2, #8
 80081fa:	4629      	mov	r1, r5
 80081fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008204:	6025      	str	r5, [r4, #0]
 8008206:	61a5      	str	r5, [r4, #24]
 8008208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800820c:	f7ff fd30 	bl	8007c70 <memset>
 8008210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008218:	4620      	mov	r0, r4
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800821c:	3468      	adds	r4, #104	; 0x68
 800821e:	e7d9      	b.n	80081d4 <__sfp+0x1c>
 8008220:	2104      	movs	r1, #4
 8008222:	4638      	mov	r0, r7
 8008224:	f7ff ff62 	bl	80080ec <__sfmoreglue>
 8008228:	4604      	mov	r4, r0
 800822a:	6030      	str	r0, [r6, #0]
 800822c:	2800      	cmp	r0, #0
 800822e:	d1d5      	bne.n	80081dc <__sfp+0x24>
 8008230:	f7ff ff78 	bl	8008124 <__sfp_lock_release>
 8008234:	230c      	movs	r3, #12
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	e7ee      	b.n	8008218 <__sfp+0x60>
 800823a:	bf00      	nop
 800823c:	08008e18 	.word	0x08008e18
 8008240:	ffff0001 	.word	0xffff0001

08008244 <_fwalk_reent>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4606      	mov	r6, r0
 800824a:	4688      	mov	r8, r1
 800824c:	2700      	movs	r7, #0
 800824e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008256:	f1b9 0901 	subs.w	r9, r9, #1
 800825a:	d505      	bpl.n	8008268 <_fwalk_reent+0x24>
 800825c:	6824      	ldr	r4, [r4, #0]
 800825e:	2c00      	cmp	r4, #0
 8008260:	d1f7      	bne.n	8008252 <_fwalk_reent+0xe>
 8008262:	4638      	mov	r0, r7
 8008264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008268:	89ab      	ldrh	r3, [r5, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d907      	bls.n	800827e <_fwalk_reent+0x3a>
 800826e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008272:	3301      	adds	r3, #1
 8008274:	d003      	beq.n	800827e <_fwalk_reent+0x3a>
 8008276:	4629      	mov	r1, r5
 8008278:	4630      	mov	r0, r6
 800827a:	47c0      	blx	r8
 800827c:	4307      	orrs	r7, r0
 800827e:	3568      	adds	r5, #104	; 0x68
 8008280:	e7e9      	b.n	8008256 <_fwalk_reent+0x12>

08008282 <__retarget_lock_init_recursive>:
 8008282:	4770      	bx	lr

08008284 <__retarget_lock_acquire_recursive>:
 8008284:	4770      	bx	lr

08008286 <__retarget_lock_release_recursive>:
 8008286:	4770      	bx	lr

08008288 <__swhatbuf_r>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	460e      	mov	r6, r1
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	4614      	mov	r4, r2
 8008292:	2900      	cmp	r1, #0
 8008294:	461d      	mov	r5, r3
 8008296:	b096      	sub	sp, #88	; 0x58
 8008298:	da08      	bge.n	80082ac <__swhatbuf_r+0x24>
 800829a:	2200      	movs	r2, #0
 800829c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082a0:	602a      	str	r2, [r5, #0]
 80082a2:	061a      	lsls	r2, r3, #24
 80082a4:	d410      	bmi.n	80082c8 <__swhatbuf_r+0x40>
 80082a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082aa:	e00e      	b.n	80082ca <__swhatbuf_r+0x42>
 80082ac:	466a      	mov	r2, sp
 80082ae:	f000 fc91 	bl	8008bd4 <_fstat_r>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dbf1      	blt.n	800829a <__swhatbuf_r+0x12>
 80082b6:	9a01      	ldr	r2, [sp, #4]
 80082b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082c0:	425a      	negs	r2, r3
 80082c2:	415a      	adcs	r2, r3
 80082c4:	602a      	str	r2, [r5, #0]
 80082c6:	e7ee      	b.n	80082a6 <__swhatbuf_r+0x1e>
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	2000      	movs	r0, #0
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	b016      	add	sp, #88	; 0x58
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080082d4 <__smakebuf_r>:
 80082d4:	898b      	ldrh	r3, [r1, #12]
 80082d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d8:	079d      	lsls	r5, r3, #30
 80082da:	4606      	mov	r6, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	d507      	bpl.n	80082f0 <__smakebuf_r+0x1c>
 80082e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	2301      	movs	r3, #1
 80082ea:	6163      	str	r3, [r4, #20]
 80082ec:	b002      	add	sp, #8
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	466a      	mov	r2, sp
 80082f2:	ab01      	add	r3, sp, #4
 80082f4:	f7ff ffc8 	bl	8008288 <__swhatbuf_r>
 80082f8:	9900      	ldr	r1, [sp, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	4630      	mov	r0, r6
 80082fe:	f000 f891 	bl	8008424 <_malloc_r>
 8008302:	b948      	cbnz	r0, 8008318 <__smakebuf_r+0x44>
 8008304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008308:	059a      	lsls	r2, r3, #22
 800830a:	d4ef      	bmi.n	80082ec <__smakebuf_r+0x18>
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	f043 0302 	orr.w	r3, r3, #2
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	e7e3      	b.n	80082e0 <__smakebuf_r+0xc>
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <__smakebuf_r+0x7c>)
 800831a:	62b3      	str	r3, [r6, #40]	; 0x28
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	6020      	str	r0, [r4, #0]
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	9b00      	ldr	r3, [sp, #0]
 8008328:	6120      	str	r0, [r4, #16]
 800832a:	6163      	str	r3, [r4, #20]
 800832c:	9b01      	ldr	r3, [sp, #4]
 800832e:	b15b      	cbz	r3, 8008348 <__smakebuf_r+0x74>
 8008330:	4630      	mov	r0, r6
 8008332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008336:	f000 fc5f 	bl	8008bf8 <_isatty_r>
 800833a:	b128      	cbz	r0, 8008348 <__smakebuf_r+0x74>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	89a0      	ldrh	r0, [r4, #12]
 800834a:	4305      	orrs	r5, r0
 800834c:	81a5      	strh	r5, [r4, #12]
 800834e:	e7cd      	b.n	80082ec <__smakebuf_r+0x18>
 8008350:	080080e1 	.word	0x080080e1

08008354 <_free_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4605      	mov	r5, r0
 8008358:	2900      	cmp	r1, #0
 800835a:	d040      	beq.n	80083de <_free_r+0x8a>
 800835c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008360:	1f0c      	subs	r4, r1, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfb8      	it	lt
 8008366:	18e4      	addlt	r4, r4, r3
 8008368:	f000 fc76 	bl	8008c58 <__malloc_lock>
 800836c:	4a1c      	ldr	r2, [pc, #112]	; (80083e0 <_free_r+0x8c>)
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	b933      	cbnz	r3, 8008380 <_free_r+0x2c>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	4628      	mov	r0, r5
 8008378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800837c:	f000 bc72 	b.w	8008c64 <__malloc_unlock>
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x42>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	1821      	adds	r1, r4, r0
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1809      	addeq	r1, r1, r0
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	e7ed      	b.n	8008372 <_free_r+0x1e>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x4c>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x42>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1850      	adds	r0, r2, r1
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x6c>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	4401      	add	r1, r0
 80083ac:	1850      	adds	r0, r2, r1
 80083ae:	4283      	cmp	r3, r0
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1e0      	bne.n	8008376 <_free_r+0x22>
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4401      	add	r1, r0
 80083ba:	6011      	str	r1, [r2, #0]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	e7da      	b.n	8008376 <_free_r+0x22>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x74>
 80083c2:	230c      	movs	r3, #12
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	e7d6      	b.n	8008376 <_free_r+0x22>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	1821      	adds	r1, r4, r0
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf01      	itttt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	1809      	addeq	r1, r1, r0
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	6054      	str	r4, [r2, #4]
 80083dc:	e7cb      	b.n	8008376 <_free_r+0x22>
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	20000244 	.word	0x20000244

080083e4 <sbrk_aligned>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4e0e      	ldr	r6, [pc, #56]	; (8008420 <sbrk_aligned+0x3c>)
 80083e8:	460c      	mov	r4, r1
 80083ea:	6831      	ldr	r1, [r6, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	b911      	cbnz	r1, 80083f6 <sbrk_aligned+0x12>
 80083f0:	f000 fb7a 	bl	8008ae8 <_sbrk_r>
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 fb75 	bl	8008ae8 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d00a      	beq.n	8008418 <sbrk_aligned+0x34>
 8008402:	1cc4      	adds	r4, r0, #3
 8008404:	f024 0403 	bic.w	r4, r4, #3
 8008408:	42a0      	cmp	r0, r4
 800840a:	d007      	beq.n	800841c <sbrk_aligned+0x38>
 800840c:	1a21      	subs	r1, r4, r0
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fb6a 	bl	8008ae8 <_sbrk_r>
 8008414:	3001      	adds	r0, #1
 8008416:	d101      	bne.n	800841c <sbrk_aligned+0x38>
 8008418:	f04f 34ff 	mov.w	r4, #4294967295
 800841c:	4620      	mov	r0, r4
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	20000248 	.word	0x20000248

08008424 <_malloc_r>:
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	1ccd      	adds	r5, r1, #3
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	2d00      	cmp	r5, #0
 8008438:	4607      	mov	r7, r0
 800843a:	db01      	blt.n	8008440 <_malloc_r+0x1c>
 800843c:	42a9      	cmp	r1, r5
 800843e:	d905      	bls.n	800844c <_malloc_r+0x28>
 8008440:	230c      	movs	r3, #12
 8008442:	2600      	movs	r6, #0
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4630      	mov	r0, r6
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	4e2e      	ldr	r6, [pc, #184]	; (8008508 <_malloc_r+0xe4>)
 800844e:	f000 fc03 	bl	8008c58 <__malloc_lock>
 8008452:	6833      	ldr	r3, [r6, #0]
 8008454:	461c      	mov	r4, r3
 8008456:	bb34      	cbnz	r4, 80084a6 <_malloc_r+0x82>
 8008458:	4629      	mov	r1, r5
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ffc2 	bl	80083e4 <sbrk_aligned>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	4604      	mov	r4, r0
 8008464:	d14d      	bne.n	8008502 <_malloc_r+0xde>
 8008466:	6834      	ldr	r4, [r6, #0]
 8008468:	4626      	mov	r6, r4
 800846a:	2e00      	cmp	r6, #0
 800846c:	d140      	bne.n	80084f0 <_malloc_r+0xcc>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	4631      	mov	r1, r6
 8008472:	4638      	mov	r0, r7
 8008474:	eb04 0803 	add.w	r8, r4, r3
 8008478:	f000 fb36 	bl	8008ae8 <_sbrk_r>
 800847c:	4580      	cmp	r8, r0
 800847e:	d13a      	bne.n	80084f6 <_malloc_r+0xd2>
 8008480:	6821      	ldr	r1, [r4, #0]
 8008482:	3503      	adds	r5, #3
 8008484:	1a6d      	subs	r5, r5, r1
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	4638      	mov	r0, r7
 8008494:	4629      	mov	r1, r5
 8008496:	f7ff ffa5 	bl	80083e4 <sbrk_aligned>
 800849a:	3001      	adds	r0, #1
 800849c:	d02b      	beq.n	80084f6 <_malloc_r+0xd2>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	442b      	add	r3, r5
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	e00e      	b.n	80084c4 <_malloc_r+0xa0>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	1b52      	subs	r2, r2, r5
 80084aa:	d41e      	bmi.n	80084ea <_malloc_r+0xc6>
 80084ac:	2a0b      	cmp	r2, #11
 80084ae:	d916      	bls.n	80084de <_malloc_r+0xba>
 80084b0:	1961      	adds	r1, r4, r5
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	6025      	str	r5, [r4, #0]
 80084b6:	bf18      	it	ne
 80084b8:	6059      	strne	r1, [r3, #4]
 80084ba:	6863      	ldr	r3, [r4, #4]
 80084bc:	bf08      	it	eq
 80084be:	6031      	streq	r1, [r6, #0]
 80084c0:	5162      	str	r2, [r4, r5]
 80084c2:	604b      	str	r3, [r1, #4]
 80084c4:	4638      	mov	r0, r7
 80084c6:	f104 060b 	add.w	r6, r4, #11
 80084ca:	f000 fbcb 	bl	8008c64 <__malloc_unlock>
 80084ce:	f026 0607 	bic.w	r6, r6, #7
 80084d2:	1d23      	adds	r3, r4, #4
 80084d4:	1af2      	subs	r2, r6, r3
 80084d6:	d0b6      	beq.n	8008446 <_malloc_r+0x22>
 80084d8:	1b9b      	subs	r3, r3, r6
 80084da:	50a3      	str	r3, [r4, r2]
 80084dc:	e7b3      	b.n	8008446 <_malloc_r+0x22>
 80084de:	6862      	ldr	r2, [r4, #4]
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	bf0c      	ite	eq
 80084e4:	6032      	streq	r2, [r6, #0]
 80084e6:	605a      	strne	r2, [r3, #4]
 80084e8:	e7ec      	b.n	80084c4 <_malloc_r+0xa0>
 80084ea:	4623      	mov	r3, r4
 80084ec:	6864      	ldr	r4, [r4, #4]
 80084ee:	e7b2      	b.n	8008456 <_malloc_r+0x32>
 80084f0:	4634      	mov	r4, r6
 80084f2:	6876      	ldr	r6, [r6, #4]
 80084f4:	e7b9      	b.n	800846a <_malloc_r+0x46>
 80084f6:	230c      	movs	r3, #12
 80084f8:	4638      	mov	r0, r7
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f000 fbb2 	bl	8008c64 <__malloc_unlock>
 8008500:	e7a1      	b.n	8008446 <_malloc_r+0x22>
 8008502:	6025      	str	r5, [r4, #0]
 8008504:	e7de      	b.n	80084c4 <_malloc_r+0xa0>
 8008506:	bf00      	nop
 8008508:	20000244 	.word	0x20000244

0800850c <__sfputc_r>:
 800850c:	6893      	ldr	r3, [r2, #8]
 800850e:	b410      	push	{r4}
 8008510:	3b01      	subs	r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	6093      	str	r3, [r2, #8]
 8008516:	da07      	bge.n	8008528 <__sfputc_r+0x1c>
 8008518:	6994      	ldr	r4, [r2, #24]
 800851a:	42a3      	cmp	r3, r4
 800851c:	db01      	blt.n	8008522 <__sfputc_r+0x16>
 800851e:	290a      	cmp	r1, #10
 8008520:	d102      	bne.n	8008528 <__sfputc_r+0x1c>
 8008522:	bc10      	pop	{r4}
 8008524:	f7ff bc3a 	b.w	8007d9c <__swbuf_r>
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	1c58      	adds	r0, r3, #1
 800852c:	6010      	str	r0, [r2, #0]
 800852e:	7019      	strb	r1, [r3, #0]
 8008530:	4608      	mov	r0, r1
 8008532:	bc10      	pop	{r4}
 8008534:	4770      	bx	lr

08008536 <__sfputs_r>:
 8008536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008538:	4606      	mov	r6, r0
 800853a:	460f      	mov	r7, r1
 800853c:	4614      	mov	r4, r2
 800853e:	18d5      	adds	r5, r2, r3
 8008540:	42ac      	cmp	r4, r5
 8008542:	d101      	bne.n	8008548 <__sfputs_r+0x12>
 8008544:	2000      	movs	r0, #0
 8008546:	e007      	b.n	8008558 <__sfputs_r+0x22>
 8008548:	463a      	mov	r2, r7
 800854a:	4630      	mov	r0, r6
 800854c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008550:	f7ff ffdc 	bl	800850c <__sfputc_r>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d1f3      	bne.n	8008540 <__sfputs_r+0xa>
 8008558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800855c <_vfiprintf_r>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	460d      	mov	r5, r1
 8008562:	4614      	mov	r4, r2
 8008564:	4698      	mov	r8, r3
 8008566:	4606      	mov	r6, r0
 8008568:	b09d      	sub	sp, #116	; 0x74
 800856a:	b118      	cbz	r0, 8008574 <_vfiprintf_r+0x18>
 800856c:	6983      	ldr	r3, [r0, #24]
 800856e:	b90b      	cbnz	r3, 8008574 <_vfiprintf_r+0x18>
 8008570:	f7ff fdea 	bl	8008148 <__sinit>
 8008574:	4b89      	ldr	r3, [pc, #548]	; (800879c <_vfiprintf_r+0x240>)
 8008576:	429d      	cmp	r5, r3
 8008578:	d11b      	bne.n	80085b2 <_vfiprintf_r+0x56>
 800857a:	6875      	ldr	r5, [r6, #4]
 800857c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d405      	bmi.n	800858e <_vfiprintf_r+0x32>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d402      	bmi.n	800858e <_vfiprintf_r+0x32>
 8008588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800858a:	f7ff fe7b 	bl	8008284 <__retarget_lock_acquire_recursive>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	071b      	lsls	r3, r3, #28
 8008592:	d501      	bpl.n	8008598 <_vfiprintf_r+0x3c>
 8008594:	692b      	ldr	r3, [r5, #16]
 8008596:	b9eb      	cbnz	r3, 80085d4 <_vfiprintf_r+0x78>
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff fc50 	bl	8007e40 <__swsetup_r>
 80085a0:	b1c0      	cbz	r0, 80085d4 <_vfiprintf_r+0x78>
 80085a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085a4:	07dc      	lsls	r4, r3, #31
 80085a6:	d50e      	bpl.n	80085c6 <_vfiprintf_r+0x6a>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	b01d      	add	sp, #116	; 0x74
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	4b7b      	ldr	r3, [pc, #492]	; (80087a0 <_vfiprintf_r+0x244>)
 80085b4:	429d      	cmp	r5, r3
 80085b6:	d101      	bne.n	80085bc <_vfiprintf_r+0x60>
 80085b8:	68b5      	ldr	r5, [r6, #8]
 80085ba:	e7df      	b.n	800857c <_vfiprintf_r+0x20>
 80085bc:	4b79      	ldr	r3, [pc, #484]	; (80087a4 <_vfiprintf_r+0x248>)
 80085be:	429d      	cmp	r5, r3
 80085c0:	bf08      	it	eq
 80085c2:	68f5      	ldreq	r5, [r6, #12]
 80085c4:	e7da      	b.n	800857c <_vfiprintf_r+0x20>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	0598      	lsls	r0, r3, #22
 80085ca:	d4ed      	bmi.n	80085a8 <_vfiprintf_r+0x4c>
 80085cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ce:	f7ff fe5a 	bl	8008286 <__retarget_lock_release_recursive>
 80085d2:	e7e9      	b.n	80085a8 <_vfiprintf_r+0x4c>
 80085d4:	2300      	movs	r3, #0
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	2320      	movs	r3, #32
 80085da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085de:	2330      	movs	r3, #48	; 0x30
 80085e0:	f04f 0901 	mov.w	r9, #1
 80085e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80087a8 <_vfiprintf_r+0x24c>
 80085ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085f0:	4623      	mov	r3, r4
 80085f2:	469a      	mov	sl, r3
 80085f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f8:	b10a      	cbz	r2, 80085fe <_vfiprintf_r+0xa2>
 80085fa:	2a25      	cmp	r2, #37	; 0x25
 80085fc:	d1f9      	bne.n	80085f2 <_vfiprintf_r+0x96>
 80085fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008602:	d00b      	beq.n	800861c <_vfiprintf_r+0xc0>
 8008604:	465b      	mov	r3, fp
 8008606:	4622      	mov	r2, r4
 8008608:	4629      	mov	r1, r5
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff ff93 	bl	8008536 <__sfputs_r>
 8008610:	3001      	adds	r0, #1
 8008612:	f000 80aa 	beq.w	800876a <_vfiprintf_r+0x20e>
 8008616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008618:	445a      	add	r2, fp
 800861a:	9209      	str	r2, [sp, #36]	; 0x24
 800861c:	f89a 3000 	ldrb.w	r3, [sl]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80a2 	beq.w	800876a <_vfiprintf_r+0x20e>
 8008626:	2300      	movs	r3, #0
 8008628:	f04f 32ff 	mov.w	r2, #4294967295
 800862c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008630:	f10a 0a01 	add.w	sl, sl, #1
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800863c:	931a      	str	r3, [sp, #104]	; 0x68
 800863e:	4654      	mov	r4, sl
 8008640:	2205      	movs	r2, #5
 8008642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008646:	4858      	ldr	r0, [pc, #352]	; (80087a8 <_vfiprintf_r+0x24c>)
 8008648:	f000 faf8 	bl	8008c3c <memchr>
 800864c:	9a04      	ldr	r2, [sp, #16]
 800864e:	b9d8      	cbnz	r0, 8008688 <_vfiprintf_r+0x12c>
 8008650:	06d1      	lsls	r1, r2, #27
 8008652:	bf44      	itt	mi
 8008654:	2320      	movmi	r3, #32
 8008656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800865a:	0713      	lsls	r3, r2, #28
 800865c:	bf44      	itt	mi
 800865e:	232b      	movmi	r3, #43	; 0x2b
 8008660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b2a      	cmp	r3, #42	; 0x2a
 800866a:	d015      	beq.n	8008698 <_vfiprintf_r+0x13c>
 800866c:	4654      	mov	r4, sl
 800866e:	2000      	movs	r0, #0
 8008670:	f04f 0c0a 	mov.w	ip, #10
 8008674:	9a07      	ldr	r2, [sp, #28]
 8008676:	4621      	mov	r1, r4
 8008678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867c:	3b30      	subs	r3, #48	; 0x30
 800867e:	2b09      	cmp	r3, #9
 8008680:	d94e      	bls.n	8008720 <_vfiprintf_r+0x1c4>
 8008682:	b1b0      	cbz	r0, 80086b2 <_vfiprintf_r+0x156>
 8008684:	9207      	str	r2, [sp, #28]
 8008686:	e014      	b.n	80086b2 <_vfiprintf_r+0x156>
 8008688:	eba0 0308 	sub.w	r3, r0, r8
 800868c:	fa09 f303 	lsl.w	r3, r9, r3
 8008690:	4313      	orrs	r3, r2
 8008692:	46a2      	mov	sl, r4
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	e7d2      	b.n	800863e <_vfiprintf_r+0xe2>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	1d19      	adds	r1, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	9103      	str	r1, [sp, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bfbb      	ittet	lt
 80086a4:	425b      	neglt	r3, r3
 80086a6:	f042 0202 	orrlt.w	r2, r2, #2
 80086aa:	9307      	strge	r3, [sp, #28]
 80086ac:	9307      	strlt	r3, [sp, #28]
 80086ae:	bfb8      	it	lt
 80086b0:	9204      	strlt	r2, [sp, #16]
 80086b2:	7823      	ldrb	r3, [r4, #0]
 80086b4:	2b2e      	cmp	r3, #46	; 0x2e
 80086b6:	d10c      	bne.n	80086d2 <_vfiprintf_r+0x176>
 80086b8:	7863      	ldrb	r3, [r4, #1]
 80086ba:	2b2a      	cmp	r3, #42	; 0x2a
 80086bc:	d135      	bne.n	800872a <_vfiprintf_r+0x1ce>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	3402      	adds	r4, #2
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9203      	str	r2, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfb8      	it	lt
 80086cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80086d0:	9305      	str	r3, [sp, #20]
 80086d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80087ac <_vfiprintf_r+0x250>
 80086d6:	2203      	movs	r2, #3
 80086d8:	4650      	mov	r0, sl
 80086da:	7821      	ldrb	r1, [r4, #0]
 80086dc:	f000 faae 	bl	8008c3c <memchr>
 80086e0:	b140      	cbz	r0, 80086f4 <_vfiprintf_r+0x198>
 80086e2:	2340      	movs	r3, #64	; 0x40
 80086e4:	eba0 000a 	sub.w	r0, r0, sl
 80086e8:	fa03 f000 	lsl.w	r0, r3, r0
 80086ec:	9b04      	ldr	r3, [sp, #16]
 80086ee:	3401      	adds	r4, #1
 80086f0:	4303      	orrs	r3, r0
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f8:	2206      	movs	r2, #6
 80086fa:	482d      	ldr	r0, [pc, #180]	; (80087b0 <_vfiprintf_r+0x254>)
 80086fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008700:	f000 fa9c 	bl	8008c3c <memchr>
 8008704:	2800      	cmp	r0, #0
 8008706:	d03f      	beq.n	8008788 <_vfiprintf_r+0x22c>
 8008708:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <_vfiprintf_r+0x258>)
 800870a:	bb1b      	cbnz	r3, 8008754 <_vfiprintf_r+0x1f8>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	3307      	adds	r3, #7
 8008710:	f023 0307 	bic.w	r3, r3, #7
 8008714:	3308      	adds	r3, #8
 8008716:	9303      	str	r3, [sp, #12]
 8008718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871a:	443b      	add	r3, r7
 800871c:	9309      	str	r3, [sp, #36]	; 0x24
 800871e:	e767      	b.n	80085f0 <_vfiprintf_r+0x94>
 8008720:	460c      	mov	r4, r1
 8008722:	2001      	movs	r0, #1
 8008724:	fb0c 3202 	mla	r2, ip, r2, r3
 8008728:	e7a5      	b.n	8008676 <_vfiprintf_r+0x11a>
 800872a:	2300      	movs	r3, #0
 800872c:	f04f 0c0a 	mov.w	ip, #10
 8008730:	4619      	mov	r1, r3
 8008732:	3401      	adds	r4, #1
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	4620      	mov	r0, r4
 8008738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800873c:	3a30      	subs	r2, #48	; 0x30
 800873e:	2a09      	cmp	r2, #9
 8008740:	d903      	bls.n	800874a <_vfiprintf_r+0x1ee>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0c5      	beq.n	80086d2 <_vfiprintf_r+0x176>
 8008746:	9105      	str	r1, [sp, #20]
 8008748:	e7c3      	b.n	80086d2 <_vfiprintf_r+0x176>
 800874a:	4604      	mov	r4, r0
 800874c:	2301      	movs	r3, #1
 800874e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008752:	e7f0      	b.n	8008736 <_vfiprintf_r+0x1da>
 8008754:	ab03      	add	r3, sp, #12
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	462a      	mov	r2, r5
 800875a:	4630      	mov	r0, r6
 800875c:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <_vfiprintf_r+0x25c>)
 800875e:	a904      	add	r1, sp, #16
 8008760:	f3af 8000 	nop.w
 8008764:	4607      	mov	r7, r0
 8008766:	1c78      	adds	r0, r7, #1
 8008768:	d1d6      	bne.n	8008718 <_vfiprintf_r+0x1bc>
 800876a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876c:	07d9      	lsls	r1, r3, #31
 800876e:	d405      	bmi.n	800877c <_vfiprintf_r+0x220>
 8008770:	89ab      	ldrh	r3, [r5, #12]
 8008772:	059a      	lsls	r2, r3, #22
 8008774:	d402      	bmi.n	800877c <_vfiprintf_r+0x220>
 8008776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008778:	f7ff fd85 	bl	8008286 <__retarget_lock_release_recursive>
 800877c:	89ab      	ldrh	r3, [r5, #12]
 800877e:	065b      	lsls	r3, r3, #25
 8008780:	f53f af12 	bmi.w	80085a8 <_vfiprintf_r+0x4c>
 8008784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008786:	e711      	b.n	80085ac <_vfiprintf_r+0x50>
 8008788:	ab03      	add	r3, sp, #12
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	462a      	mov	r2, r5
 800878e:	4630      	mov	r0, r6
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <_vfiprintf_r+0x25c>)
 8008792:	a904      	add	r1, sp, #16
 8008794:	f000 f882 	bl	800889c <_printf_i>
 8008798:	e7e4      	b.n	8008764 <_vfiprintf_r+0x208>
 800879a:	bf00      	nop
 800879c:	08008e3c 	.word	0x08008e3c
 80087a0:	08008e5c 	.word	0x08008e5c
 80087a4:	08008e1c 	.word	0x08008e1c
 80087a8:	08008e7c 	.word	0x08008e7c
 80087ac:	08008e82 	.word	0x08008e82
 80087b0:	08008e86 	.word	0x08008e86
 80087b4:	00000000 	.word	0x00000000
 80087b8:	08008537 	.word	0x08008537

080087bc <_printf_common>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	4616      	mov	r6, r2
 80087c2:	4699      	mov	r9, r3
 80087c4:	688a      	ldr	r2, [r1, #8]
 80087c6:	690b      	ldr	r3, [r1, #16]
 80087c8:	4607      	mov	r7, r0
 80087ca:	4293      	cmp	r3, r2
 80087cc:	bfb8      	it	lt
 80087ce:	4613      	movlt	r3, r2
 80087d0:	6033      	str	r3, [r6, #0]
 80087d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087d6:	460c      	mov	r4, r1
 80087d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087dc:	b10a      	cbz	r2, 80087e2 <_printf_common+0x26>
 80087de:	3301      	adds	r3, #1
 80087e0:	6033      	str	r3, [r6, #0]
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	0699      	lsls	r1, r3, #26
 80087e6:	bf42      	ittt	mi
 80087e8:	6833      	ldrmi	r3, [r6, #0]
 80087ea:	3302      	addmi	r3, #2
 80087ec:	6033      	strmi	r3, [r6, #0]
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	f015 0506 	ands.w	r5, r5, #6
 80087f4:	d106      	bne.n	8008804 <_printf_common+0x48>
 80087f6:	f104 0a19 	add.w	sl, r4, #25
 80087fa:	68e3      	ldr	r3, [r4, #12]
 80087fc:	6832      	ldr	r2, [r6, #0]
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	42ab      	cmp	r3, r5
 8008802:	dc28      	bgt.n	8008856 <_printf_common+0x9a>
 8008804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008808:	1e13      	subs	r3, r2, #0
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	bf18      	it	ne
 800880e:	2301      	movne	r3, #1
 8008810:	0692      	lsls	r2, r2, #26
 8008812:	d42d      	bmi.n	8008870 <_printf_common+0xb4>
 8008814:	4649      	mov	r1, r9
 8008816:	4638      	mov	r0, r7
 8008818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800881c:	47c0      	blx	r8
 800881e:	3001      	adds	r0, #1
 8008820:	d020      	beq.n	8008864 <_printf_common+0xa8>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	68e5      	ldr	r5, [r4, #12]
 8008826:	f003 0306 	and.w	r3, r3, #6
 800882a:	2b04      	cmp	r3, #4
 800882c:	bf18      	it	ne
 800882e:	2500      	movne	r5, #0
 8008830:	6832      	ldr	r2, [r6, #0]
 8008832:	f04f 0600 	mov.w	r6, #0
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	bf08      	it	eq
 800883a:	1aad      	subeq	r5, r5, r2
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	bf08      	it	eq
 8008840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008844:	4293      	cmp	r3, r2
 8008846:	bfc4      	itt	gt
 8008848:	1a9b      	subgt	r3, r3, r2
 800884a:	18ed      	addgt	r5, r5, r3
 800884c:	341a      	adds	r4, #26
 800884e:	42b5      	cmp	r5, r6
 8008850:	d11a      	bne.n	8008888 <_printf_common+0xcc>
 8008852:	2000      	movs	r0, #0
 8008854:	e008      	b.n	8008868 <_printf_common+0xac>
 8008856:	2301      	movs	r3, #1
 8008858:	4652      	mov	r2, sl
 800885a:	4649      	mov	r1, r9
 800885c:	4638      	mov	r0, r7
 800885e:	47c0      	blx	r8
 8008860:	3001      	adds	r0, #1
 8008862:	d103      	bne.n	800886c <_printf_common+0xb0>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	3501      	adds	r5, #1
 800886e:	e7c4      	b.n	80087fa <_printf_common+0x3e>
 8008870:	2030      	movs	r0, #48	; 0x30
 8008872:	18e1      	adds	r1, r4, r3
 8008874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800887e:	4422      	add	r2, r4
 8008880:	3302      	adds	r3, #2
 8008882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008886:	e7c5      	b.n	8008814 <_printf_common+0x58>
 8008888:	2301      	movs	r3, #1
 800888a:	4622      	mov	r2, r4
 800888c:	4649      	mov	r1, r9
 800888e:	4638      	mov	r0, r7
 8008890:	47c0      	blx	r8
 8008892:	3001      	adds	r0, #1
 8008894:	d0e6      	beq.n	8008864 <_printf_common+0xa8>
 8008896:	3601      	adds	r6, #1
 8008898:	e7d9      	b.n	800884e <_printf_common+0x92>
	...

0800889c <_printf_i>:
 800889c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	7e0f      	ldrb	r7, [r1, #24]
 80088a2:	4691      	mov	r9, r2
 80088a4:	2f78      	cmp	r7, #120	; 0x78
 80088a6:	4680      	mov	r8, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	469a      	mov	sl, r3
 80088ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088b2:	d807      	bhi.n	80088c4 <_printf_i+0x28>
 80088b4:	2f62      	cmp	r7, #98	; 0x62
 80088b6:	d80a      	bhi.n	80088ce <_printf_i+0x32>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	f000 80d9 	beq.w	8008a70 <_printf_i+0x1d4>
 80088be:	2f58      	cmp	r7, #88	; 0x58
 80088c0:	f000 80a4 	beq.w	8008a0c <_printf_i+0x170>
 80088c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088cc:	e03a      	b.n	8008944 <_printf_i+0xa8>
 80088ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088d2:	2b15      	cmp	r3, #21
 80088d4:	d8f6      	bhi.n	80088c4 <_printf_i+0x28>
 80088d6:	a101      	add	r1, pc, #4	; (adr r1, 80088dc <_printf_i+0x40>)
 80088d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008949 	.word	0x08008949
 80088e4:	080088c5 	.word	0x080088c5
 80088e8:	080088c5 	.word	0x080088c5
 80088ec:	080088c5 	.word	0x080088c5
 80088f0:	080088c5 	.word	0x080088c5
 80088f4:	08008949 	.word	0x08008949
 80088f8:	080088c5 	.word	0x080088c5
 80088fc:	080088c5 	.word	0x080088c5
 8008900:	080088c5 	.word	0x080088c5
 8008904:	080088c5 	.word	0x080088c5
 8008908:	08008a57 	.word	0x08008a57
 800890c:	08008979 	.word	0x08008979
 8008910:	08008a39 	.word	0x08008a39
 8008914:	080088c5 	.word	0x080088c5
 8008918:	080088c5 	.word	0x080088c5
 800891c:	08008a79 	.word	0x08008a79
 8008920:	080088c5 	.word	0x080088c5
 8008924:	08008979 	.word	0x08008979
 8008928:	080088c5 	.word	0x080088c5
 800892c:	080088c5 	.word	0x080088c5
 8008930:	08008a41 	.word	0x08008a41
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	602a      	str	r2, [r5, #0]
 800893c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008944:	2301      	movs	r3, #1
 8008946:	e0a4      	b.n	8008a92 <_printf_i+0x1f6>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	6829      	ldr	r1, [r5, #0]
 800894c:	0606      	lsls	r6, r0, #24
 800894e:	f101 0304 	add.w	r3, r1, #4
 8008952:	d50a      	bpl.n	800896a <_printf_i+0xce>
 8008954:	680e      	ldr	r6, [r1, #0]
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	2e00      	cmp	r6, #0
 800895a:	da03      	bge.n	8008964 <_printf_i+0xc8>
 800895c:	232d      	movs	r3, #45	; 0x2d
 800895e:	4276      	negs	r6, r6
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008964:	230a      	movs	r3, #10
 8008966:	485e      	ldr	r0, [pc, #376]	; (8008ae0 <_printf_i+0x244>)
 8008968:	e019      	b.n	800899e <_printf_i+0x102>
 800896a:	680e      	ldr	r6, [r1, #0]
 800896c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	bf18      	it	ne
 8008974:	b236      	sxthne	r6, r6
 8008976:	e7ef      	b.n	8008958 <_printf_i+0xbc>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	6029      	str	r1, [r5, #0]
 8008980:	0601      	lsls	r1, r0, #24
 8008982:	d501      	bpl.n	8008988 <_printf_i+0xec>
 8008984:	681e      	ldr	r6, [r3, #0]
 8008986:	e002      	b.n	800898e <_printf_i+0xf2>
 8008988:	0646      	lsls	r6, r0, #25
 800898a:	d5fb      	bpl.n	8008984 <_printf_i+0xe8>
 800898c:	881e      	ldrh	r6, [r3, #0]
 800898e:	2f6f      	cmp	r7, #111	; 0x6f
 8008990:	bf0c      	ite	eq
 8008992:	2308      	moveq	r3, #8
 8008994:	230a      	movne	r3, #10
 8008996:	4852      	ldr	r0, [pc, #328]	; (8008ae0 <_printf_i+0x244>)
 8008998:	2100      	movs	r1, #0
 800899a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800899e:	6865      	ldr	r5, [r4, #4]
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	bfa8      	it	ge
 80089a4:	6821      	ldrge	r1, [r4, #0]
 80089a6:	60a5      	str	r5, [r4, #8]
 80089a8:	bfa4      	itt	ge
 80089aa:	f021 0104 	bicge.w	r1, r1, #4
 80089ae:	6021      	strge	r1, [r4, #0]
 80089b0:	b90e      	cbnz	r6, 80089b6 <_printf_i+0x11a>
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	d04d      	beq.n	8008a52 <_printf_i+0x1b6>
 80089b6:	4615      	mov	r5, r2
 80089b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80089bc:	fb03 6711 	mls	r7, r3, r1, r6
 80089c0:	5dc7      	ldrb	r7, [r0, r7]
 80089c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089c6:	4637      	mov	r7, r6
 80089c8:	42bb      	cmp	r3, r7
 80089ca:	460e      	mov	r6, r1
 80089cc:	d9f4      	bls.n	80089b8 <_printf_i+0x11c>
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d10b      	bne.n	80089ea <_printf_i+0x14e>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	07de      	lsls	r6, r3, #31
 80089d6:	d508      	bpl.n	80089ea <_printf_i+0x14e>
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	6861      	ldr	r1, [r4, #4]
 80089dc:	4299      	cmp	r1, r3
 80089de:	bfde      	ittt	le
 80089e0:	2330      	movle	r3, #48	; 0x30
 80089e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ea:	1b52      	subs	r2, r2, r5
 80089ec:	6122      	str	r2, [r4, #16]
 80089ee:	464b      	mov	r3, r9
 80089f0:	4621      	mov	r1, r4
 80089f2:	4640      	mov	r0, r8
 80089f4:	f8cd a000 	str.w	sl, [sp]
 80089f8:	aa03      	add	r2, sp, #12
 80089fa:	f7ff fedf 	bl	80087bc <_printf_common>
 80089fe:	3001      	adds	r0, #1
 8008a00:	d14c      	bne.n	8008a9c <_printf_i+0x200>
 8008a02:	f04f 30ff 	mov.w	r0, #4294967295
 8008a06:	b004      	add	sp, #16
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	4834      	ldr	r0, [pc, #208]	; (8008ae0 <_printf_i+0x244>)
 8008a0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a12:	6829      	ldr	r1, [r5, #0]
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a1a:	6029      	str	r1, [r5, #0]
 8008a1c:	061d      	lsls	r5, r3, #24
 8008a1e:	d514      	bpl.n	8008a4a <_printf_i+0x1ae>
 8008a20:	07df      	lsls	r7, r3, #31
 8008a22:	bf44      	itt	mi
 8008a24:	f043 0320 	orrmi.w	r3, r3, #32
 8008a28:	6023      	strmi	r3, [r4, #0]
 8008a2a:	b91e      	cbnz	r6, 8008a34 <_printf_i+0x198>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	f023 0320 	bic.w	r3, r3, #32
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	2310      	movs	r3, #16
 8008a36:	e7af      	b.n	8008998 <_printf_i+0xfc>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	f043 0320 	orr.w	r3, r3, #32
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	2378      	movs	r3, #120	; 0x78
 8008a42:	4828      	ldr	r0, [pc, #160]	; (8008ae4 <_printf_i+0x248>)
 8008a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a48:	e7e3      	b.n	8008a12 <_printf_i+0x176>
 8008a4a:	0659      	lsls	r1, r3, #25
 8008a4c:	bf48      	it	mi
 8008a4e:	b2b6      	uxthmi	r6, r6
 8008a50:	e7e6      	b.n	8008a20 <_printf_i+0x184>
 8008a52:	4615      	mov	r5, r2
 8008a54:	e7bb      	b.n	80089ce <_printf_i+0x132>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	6826      	ldr	r6, [r4, #0]
 8008a5a:	1d18      	adds	r0, r3, #4
 8008a5c:	6961      	ldr	r1, [r4, #20]
 8008a5e:	6028      	str	r0, [r5, #0]
 8008a60:	0635      	lsls	r5, r6, #24
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	d501      	bpl.n	8008a6a <_printf_i+0x1ce>
 8008a66:	6019      	str	r1, [r3, #0]
 8008a68:	e002      	b.n	8008a70 <_printf_i+0x1d4>
 8008a6a:	0670      	lsls	r0, r6, #25
 8008a6c:	d5fb      	bpl.n	8008a66 <_printf_i+0x1ca>
 8008a6e:	8019      	strh	r1, [r3, #0]
 8008a70:	2300      	movs	r3, #0
 8008a72:	4615      	mov	r5, r2
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	e7ba      	b.n	80089ee <_printf_i+0x152>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	602a      	str	r2, [r5, #0]
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 f8d9 	bl	8008c3c <memchr>
 8008a8a:	b108      	cbz	r0, 8008a90 <_printf_i+0x1f4>
 8008a8c:	1b40      	subs	r0, r0, r5
 8008a8e:	6060      	str	r0, [r4, #4]
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	2300      	movs	r3, #0
 8008a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9a:	e7a8      	b.n	80089ee <_printf_i+0x152>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	47d0      	blx	sl
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0ab      	beq.n	8008a02 <_printf_i+0x166>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	079b      	lsls	r3, r3, #30
 8008aae:	d413      	bmi.n	8008ad8 <_printf_i+0x23c>
 8008ab0:	68e0      	ldr	r0, [r4, #12]
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	4298      	cmp	r0, r3
 8008ab6:	bfb8      	it	lt
 8008ab8:	4618      	movlt	r0, r3
 8008aba:	e7a4      	b.n	8008a06 <_printf_i+0x16a>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4632      	mov	r2, r6
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	47d0      	blx	sl
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d09b      	beq.n	8008a02 <_printf_i+0x166>
 8008aca:	3501      	adds	r5, #1
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	9903      	ldr	r1, [sp, #12]
 8008ad0:	1a5b      	subs	r3, r3, r1
 8008ad2:	42ab      	cmp	r3, r5
 8008ad4:	dcf2      	bgt.n	8008abc <_printf_i+0x220>
 8008ad6:	e7eb      	b.n	8008ab0 <_printf_i+0x214>
 8008ad8:	2500      	movs	r5, #0
 8008ada:	f104 0619 	add.w	r6, r4, #25
 8008ade:	e7f5      	b.n	8008acc <_printf_i+0x230>
 8008ae0:	08008e8d 	.word	0x08008e8d
 8008ae4:	08008e9e 	.word	0x08008e9e

08008ae8 <_sbrk_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	2300      	movs	r3, #0
 8008aec:	4d05      	ldr	r5, [pc, #20]	; (8008b04 <_sbrk_r+0x1c>)
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7fc fce2 	bl	80054bc <_sbrk>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_sbrk_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_sbrk_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	2000024c 	.word	0x2000024c

08008b08 <__sread>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b10:	f000 f8ae 	bl	8008c70 <_read_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	bfab      	itete	ge
 8008b18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b1c:	181b      	addge	r3, r3, r0
 8008b1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b22:	bfac      	ite	ge
 8008b24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b26:	81a3      	strhlt	r3, [r4, #12]
 8008b28:	bd10      	pop	{r4, pc}

08008b2a <__swrite>:
 8008b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2e:	461f      	mov	r7, r3
 8008b30:	898b      	ldrh	r3, [r1, #12]
 8008b32:	4605      	mov	r5, r0
 8008b34:	05db      	lsls	r3, r3, #23
 8008b36:	460c      	mov	r4, r1
 8008b38:	4616      	mov	r6, r2
 8008b3a:	d505      	bpl.n	8008b48 <__swrite+0x1e>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b44:	f000 f868 	bl	8008c18 <_lseek_r>
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	4632      	mov	r2, r6
 8008b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	4628      	mov	r0, r5
 8008b54:	463b      	mov	r3, r7
 8008b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5e:	f000 b817 	b.w	8008b90 <_write_r>

08008b62 <__sseek>:
 8008b62:	b510      	push	{r4, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6a:	f000 f855 	bl	8008c18 <_lseek_r>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	bf15      	itete	ne
 8008b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b7e:	81a3      	strheq	r3, [r4, #12]
 8008b80:	bf18      	it	ne
 8008b82:	81a3      	strhne	r3, [r4, #12]
 8008b84:	bd10      	pop	{r4, pc}

08008b86 <__sclose>:
 8008b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8a:	f000 b813 	b.w	8008bb4 <_close_r>
	...

08008b90 <_write_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4d05      	ldr	r5, [pc, #20]	; (8008bb0 <_write_r+0x20>)
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f7fc fc3f 	bl	8005422 <_write>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_write_r+0x1e>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_write_r+0x1e>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	2000024c 	.word	0x2000024c

08008bb4 <_close_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4d05      	ldr	r5, [pc, #20]	; (8008bd0 <_close_r+0x1c>)
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7fc fc4b 	bl	800545a <_close>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_close_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_close_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	2000024c 	.word	0x2000024c

08008bd4 <_fstat_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4d06      	ldr	r5, [pc, #24]	; (8008bf4 <_fstat_r+0x20>)
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	f7fc fc45 	bl	8005470 <_fstat>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d102      	bne.n	8008bf0 <_fstat_r+0x1c>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b103      	cbz	r3, 8008bf0 <_fstat_r+0x1c>
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000024c 	.word	0x2000024c

08008bf8 <_isatty_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4d05      	ldr	r5, [pc, #20]	; (8008c14 <_isatty_r+0x1c>)
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7fc fc43 	bl	800548e <_isatty>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_isatty_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_isatty_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	2000024c 	.word	0x2000024c

08008c18 <_lseek_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	4611      	mov	r1, r2
 8008c20:	2200      	movs	r2, #0
 8008c22:	4d05      	ldr	r5, [pc, #20]	; (8008c38 <_lseek_r+0x20>)
 8008c24:	602a      	str	r2, [r5, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	f7fc fc3b 	bl	80054a2 <_lseek>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_lseek_r+0x1e>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_lseek_r+0x1e>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	2000024c 	.word	0x2000024c

08008c3c <memchr>:
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	b2c9      	uxtb	r1, r1
 8008c42:	4402      	add	r2, r0
 8008c44:	4293      	cmp	r3, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	d101      	bne.n	8008c4e <memchr+0x12>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e003      	b.n	8008c56 <memchr+0x1a>
 8008c4e:	7804      	ldrb	r4, [r0, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	428c      	cmp	r4, r1
 8008c54:	d1f6      	bne.n	8008c44 <memchr+0x8>
 8008c56:	bd10      	pop	{r4, pc}

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f7ff bb13 	b.w	8008284 <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20000240 	.word	0x20000240

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f7ff bb0e 	b.w	8008286 <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20000240 	.word	0x20000240

08008c70 <_read_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	4611      	mov	r1, r2
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4d05      	ldr	r5, [pc, #20]	; (8008c90 <_read_r+0x20>)
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7fc fbb2 	bl	80053e8 <_read>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_read_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_read_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	2000024c 	.word	0x2000024c

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
