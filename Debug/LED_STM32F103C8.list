
LED_STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006240  08006240  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006240  08006240  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000008c  080062d4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080062d4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c194  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225b  00000000  00000000  0002c249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0002f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019006  00000000  00000000  0002ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed8f  00000000  00000000  00048f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca9d  00000000  00000000  00057cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000e47b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	080060a4 	.word	0x080060a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	080060a4 	.word	0x080060a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__aeabi_f2iz>:
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a9c:	d30f      	bcc.n	8000abe <__aeabi_f2iz+0x2a>
 8000a9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_f2iz+0x30>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab8:	bf18      	it	ne
 8000aba:	4240      	negne	r0, r0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac8:	d101      	bne.n	8000ace <__aeabi_f2iz+0x3a>
 8000aca:	0242      	lsls	r2, r0, #9
 8000acc:	d105      	bne.n	8000ada <__aeabi_f2iz+0x46>
 8000ace:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ad2:	bf08      	it	eq
 8000ad4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <vButtonIO_Init>:
/* USER CODE END PFP */


/* Public function -----------------------------------------------*/
void vButtonIO_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
	strIO_Button_Value.bFlagNewButton = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <vButtonIO_Init+0x40>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	741a      	strb	r2, [r3, #16]

	for(int i=0;i<(int)NUMBER_IO_BUTTON_USE;i++){
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	e00c      	b.n	8000b0c <vButtonIO_Init+0x2c>
		strOld_Button_Value.bButtonState[i] = eButtonRelease;
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <vButtonIO_Init+0x44>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	2202      	movs	r2, #2
 8000afa:	701a      	strb	r2, [r3, #0]
		strIO_Button_Value.bButtonState[i] = eButtonRelease;
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <vButtonIO_Init+0x40>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	2202      	movs	r2, #2
 8000b04:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<(int)NUMBER_IO_BUTTON_USE;i++){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	ddef      	ble.n	8000af2 <vButtonIO_Init+0x12>
	}
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000a8 	.word	0x200000a8
 8000b24:	200000bc 	.word	0x200000bc

08000b28 <vGetIOButtonValue>:

void vGetIOButtonValue(eIndexButton bIndex, GPIO_PinState InputState, structIO_Button *OldValue, structIO_Button *NewValue)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	460b      	mov	r3, r1
 8000b38:	73bb      	strb	r3, [r7, #14]
/* Start get new state */
	/* GPIO_PIN_SET button press, GPIO_PIN_RESET button release*/
	if(InputState == GPIO_PIN_RESET)
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f040 80cd 	bne.w	8000cdc <vGetIOButtonValue+0x1b4>
	{
		/* Base on the last state, caculate to change state */
		switch(OldValue->bButtonState[bIndex])
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	2b0b      	cmp	r3, #11
 8000b4c:	f200 80ab 	bhi.w	8000ca6 <vGetIOButtonValue+0x17e>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <vGetIOButtonValue+0x30>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000c23 	.word	0x08000c23
 8000b60:	08000be1 	.word	0x08000be1
 8000b64:	08000bf7 	.word	0x08000bf7
 8000b68:	08000c0d 	.word	0x08000c0d
 8000b6c:	08000bb5 	.word	0x08000bb5
 8000b70:	08000b9f 	.word	0x08000b9f
 8000b74:	08000bcb 	.word	0x08000bcb
 8000b78:	08000c39 	.word	0x08000c39
 8000b7c:	08000c4f 	.word	0x08000c4f
 8000b80:	08000c65 	.word	0x08000c65
 8000b84:	08000ca7 	.word	0x08000ca7
		{
			case eButtonPress:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	4a7a      	ldr	r2, [pc, #488]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d973      	bls.n	8000c7c <vGetIOButtonValue+0x154>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	2102      	movs	r1, #2
 8000b9a:	54d1      	strb	r1, [r2, r3]
				break;
 8000b9c:	e06e      	b.n	8000c7c <vGetIOButtonValue+0x154>
			case eButtonSingleClick:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	4a74      	ldr	r2, [pc, #464]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d96a      	bls.n	8000c80 <vGetIOButtonValue+0x158>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	2102      	movs	r1, #2
 8000bb0:	54d1      	strb	r1, [r2, r3]
				break;
 8000bb2:	e065      	b.n	8000c80 <vGetIOButtonValue+0x158>
			case eButtonDoubleClick:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	4a6f      	ldr	r2, [pc, #444]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d961      	bls.n	8000c84 <vGetIOButtonValue+0x15c>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	54d1      	strb	r1, [r2, r3]
				break;
 8000bc8:	e05c      	b.n	8000c84 <vGetIOButtonValue+0x15c>
			case eButtonTripleClick:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	4a69      	ldr	r2, [pc, #420]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d958      	bls.n	8000c88 <vGetIOButtonValue+0x160>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	2102      	movs	r1, #2
 8000bdc:	54d1      	strb	r1, [r2, r3]
				break;
 8000bde:	e053      	b.n	8000c88 <vGetIOButtonValue+0x160>
			case eButtonLongPressT1:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	4a64      	ldr	r2, [pc, #400]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d94f      	bls.n	8000c8c <vGetIOButtonValue+0x164>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	54d1      	strb	r1, [r2, r3]
				break;
 8000bf4:	e04a      	b.n	8000c8c <vGetIOButtonValue+0x164>
			case eButtonLongPressT2:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4a5e      	ldr	r2, [pc, #376]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d946      	bls.n	8000c90 <vGetIOButtonValue+0x168>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	2102      	movs	r1, #2
 8000c08:	54d1      	strb	r1, [r2, r3]
				break;
 8000c0a:	e041      	b.n	8000c90 <vGetIOButtonValue+0x168>
			case eButtonHoldOn:
				if(bHoldOff[bIndex]>=(int)ANTI_NOISE_RELEASE)
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	4a59      	ldr	r2, [pc, #356]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d93d      	bls.n	8000c94 <vGetIOButtonValue+0x16c>
					NewValue->bButtonState[bIndex] = eButtonRelease;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	54d1      	strb	r1, [r2, r3]
				break;
 8000c20:	e038      	b.n	8000c94 <vGetIOButtonValue+0x16c>
			case eButtonRelease:
				if(bHoldOff[bIndex]>=(int)TIME_HOLD_OFF)
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4a53      	ldr	r2, [pc, #332]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	2b09      	cmp	r3, #9
 8000c2c:	d934      	bls.n	8000c98 <vGetIOButtonValue+0x170>
					NewValue->bButtonState[bIndex] = eButtonHoldOff;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	2109      	movs	r1, #9
 8000c34:	54d1      	strb	r1, [r2, r3]
				break;
 8000c36:	e02f      	b.n	8000c98 <vGetIOButtonValue+0x170>
			case eButtonHoldOff:
				if(bHoldOff[bIndex]>=(int)TIME_HOLD_OFF_LONG_T1)
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	2b63      	cmp	r3, #99	; 0x63
 8000c42:	d92b      	bls.n	8000c9c <vGetIOButtonValue+0x174>
					NewValue->bButtonState[bIndex] = eButtonHoldOffLongT1;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	210a      	movs	r1, #10
 8000c4a:	54d1      	strb	r1, [r2, r3]
				break;
 8000c4c:	e026      	b.n	8000c9c <vGetIOButtonValue+0x174>
			case eButtonHoldOffLongT1:
				if(bHoldOff[bIndex]>=(int)TIME_HOLD_OFF_LONG_T2)
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	2bc7      	cmp	r3, #199	; 0xc7
 8000c58:	d922      	bls.n	8000ca0 <vGetIOButtonValue+0x178>
					NewValue->bButtonState[bIndex] = eButtonHoldOffLongT2;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	210b      	movs	r1, #11
 8000c60:	54d1      	strb	r1, [r2, r3]
				break;
 8000c62:	e01d      	b.n	8000ca0 <vGetIOButtonValue+0x178>
			case eButtonHoldOffLongT2:
				if(bHoldOff[bIndex]>=(int)TIME_HOLD_OFF_LONG)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c70:	d318      	bcc.n	8000ca4 <vGetIOButtonValue+0x17c>
					NewValue->bButtonState[bIndex] = eButtonHoldOffLong;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	210c      	movs	r1, #12
 8000c78:	54d1      	strb	r1, [r2, r3]
				break;
 8000c7a:	e013      	b.n	8000ca4 <vGetIOButtonValue+0x17c>
				break;
 8000c7c:	bf00      	nop
 8000c7e:	e012      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c80:	bf00      	nop
 8000c82:	e010      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c84:	bf00      	nop
 8000c86:	e00e      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c88:	bf00      	nop
 8000c8a:	e00c      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c8c:	bf00      	nop
 8000c8e:	e00a      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c90:	bf00      	nop
 8000c92:	e008      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c94:	bf00      	nop
 8000c96:	e006      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c98:	bf00      	nop
 8000c9a:	e004      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000c9c:	bf00      	nop
 8000c9e:	e002      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000ca0:	bf00      	nop
 8000ca2:	e000      	b.n	8000ca6 <vGetIOButtonValue+0x17e>
				break;
 8000ca4:	bf00      	nop
			case eButtonHoldOffLong:
				break;
		}
		/* Increase time Hold Off */
		if(bHoldOff[bIndex]<(int)TIME_HOLD_OFF_LONG){bHoldOff[bIndex]++;}
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cb2:	d207      	bcs.n	8000cc4 <vGetIOButtonValue+0x19c>
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000cb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	492d      	ldr	r1, [pc, #180]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Reset Time counter */
		uTimePress[bIndex] = 0;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <vGetIOButtonValue+0x250>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NewValue->bButtonTime[bIndex] = 0;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	80da      	strh	r2, [r3, #6]
 8000cda:	e062      	b.n	8000da2 <vGetIOButtonValue+0x27a>
	}
	/* Button press */
	else if(InputState == GPIO_PIN_SET)
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d15f      	bne.n	8000da2 <vGetIOButtonValue+0x27a>
	{
		/* Base on the last state, caculate to change state */
		switch(OldValue->bButtonState[bIndex])
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	3b02      	subs	r3, #2
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d851      	bhi.n	8000d92 <vGetIOButtonValue+0x26a>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <vGetIOButtonValue+0x1cc>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d21 	.word	0x08000d21
 8000cf8:	08000d93 	.word	0x08000d93
 8000cfc:	08000d93 	.word	0x08000d93
 8000d00:	08000d93 	.word	0x08000d93
 8000d04:	08000d93 	.word	0x08000d93
 8000d08:	08000d93 	.word	0x08000d93
 8000d0c:	08000d93 	.word	0x08000d93
 8000d10:	08000d57 	.word	0x08000d57
 8000d14:	08000d61 	.word	0x08000d61
 8000d18:	08000d6b 	.word	0x08000d6b
 8000d1c:	08000d89 	.word	0x08000d89
		{
			case eButtonRelease:
				bHoldOff[bIndex]=0;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <vGetIOButtonValue+0x24c>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(uTimeCheck[bIndex]>=(int)ANTI_NOISE_PRESS)
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <vGetIOButtonValue+0x254>)
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d90a      	bls.n	8000d4c <vGetIOButtonValue+0x224>
				{
					NewValue->bButtonState[bIndex] = eButtonPress;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	54d1      	strb	r1, [r2, r3]
					bClickCount[bIndex]++;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <vGetIOButtonValue+0x258>)
 8000d42:	5cd2      	ldrb	r2, [r2, r3]
 8000d44:	3201      	adds	r2, #1
 8000d46:	b2d1      	uxtb	r1, r2
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <vGetIOButtonValue+0x258>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
				}
				flag_start_sample[bIndex] = 1;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <vGetIOButtonValue+0x25c>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	54d1      	strb	r1, [r2, r3]
				break;
 8000d54:	e01d      	b.n	8000d92 <vGetIOButtonValue+0x26a>
	//			{
	//				NewValue->bButtonState[bIndex] = eButtonPress;
	//				bClickCount[bIndex]++;
	//			}
	//			flag_start_sample[bIndex] = 1;
				NewValue->bButtonState[bIndex] = eButtonRelease;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	54d1      	strb	r1, [r2, r3]
				break;
 8000d5e:	e018      	b.n	8000d92 <vGetIOButtonValue+0x26a>
			case eButtonHoldOffLongT1:
				NewValue->bButtonState[bIndex] = eButtonRelease;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	2102      	movs	r1, #2
 8000d66:	54d1      	strb	r1, [r2, r3]
				break;
 8000d68:	e013      	b.n	8000d92 <vGetIOButtonValue+0x26a>
			case eButtonHoldOffLongT2:
				NewValue->bButtonState[bIndex] = eButtonRelease;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	2102      	movs	r1, #2
 8000d70:	54d1      	strb	r1, [r2, r3]
				break;
 8000d72:	e00e      	b.n	8000d92 <vGetIOButtonValue+0x26a>
 8000d74:	20000100 	.word	0x20000100
 8000d78:	200000e4 	.word	0x200000e4
 8000d7c:	200000d0 	.word	0x200000d0
 8000d80:	200000f8 	.word	0x200000f8
 8000d84:	20000114 	.word	0x20000114
			case eButtonHoldOffLong:
				NewValue->bButtonState[bIndex] = eButtonRelease;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	54d1      	strb	r1, [r2, r3]
				break;
 8000d90:	bf00      	nop
			}
		/* Increase counter */
		uTimePress[bIndex]++;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000d96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9a:	3201      	adds	r2, #1
 8000d9c:	493a      	ldr	r1, [pc, #232]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	/* Time End period */
	if(flag_start_sample[bIndex]==1)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <vGetIOButtonValue+0x364>)
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d107      	bne.n	8000dbc <vGetIOButtonValue+0x294>
		uTimeCheck[bIndex]++;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <vGetIOButtonValue+0x368>)
 8000db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db4:	3201      	adds	r2, #1
 8000db6:	4936      	ldr	r1, [pc, #216]	; (8000e90 <vGetIOButtonValue+0x368>)
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(uTimeCheck[bIndex]>=(int)COUNT_TIME_SAMPLE)/* 10*20=200ms */
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <vGetIOButtonValue+0x368>)
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	2b27      	cmp	r3, #39	; 0x27
 8000dc6:	d92d      	bls.n	8000e24 <vGetIOButtonValue+0x2fc>
	{
		if((bClickCount[bIndex]==1)&&(uTimePress[bIndex]<=(int)TIME_SINGLE_PRESS))
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <vGetIOButtonValue+0x36c>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d109      	bne.n	8000de6 <vGetIOButtonValue+0x2be>
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	2b14      	cmp	r3, #20
 8000ddc:	d803      	bhi.n	8000de6 <vGetIOButtonValue+0x2be>
			NewValue->bButtonState[bIndex] = eButtonSingleClick;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	2107      	movs	r1, #7
 8000de4:	54d1      	strb	r1, [r2, r3]
		if(bClickCount[bIndex]==2)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <vGetIOButtonValue+0x36c>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d103      	bne.n	8000df8 <vGetIOButtonValue+0x2d0>
			NewValue->bButtonState[bIndex] = eButtonDoubleClick;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	2106      	movs	r1, #6
 8000df6:	54d1      	strb	r1, [r2, r3]
		if(bClickCount[bIndex]==3)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <vGetIOButtonValue+0x36c>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d103      	bne.n	8000e0a <vGetIOButtonValue+0x2e2>
			NewValue->bButtonState[bIndex] = eButtonTripleClick;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	2108      	movs	r1, #8
 8000e08:	54d1      	strb	r1, [r2, r3]
		/* Reset counter */
		bClickCount[bIndex] = 0;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <vGetIOButtonValue+0x36c>)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	54d1      	strb	r1, [r2, r3]
		/* Reset */
		uTimeCheck[bIndex] = 0;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <vGetIOButtonValue+0x368>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/* Set flag sample */
		flag_start_sample[bIndex] = 0;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <vGetIOButtonValue+0x364>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	54d1      	strb	r1, [r2, r3]
	}
	/* Change mode */
	if(uTimePress[bIndex]>=(int)TIME_HOLD_ON)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000e30:	d304      	bcc.n	8000e3c <vGetIOButtonValue+0x314>
		NewValue->bButtonState[bIndex] = eButtonHoldOn;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	2105      	movs	r1, #5
 8000e38:	54d1      	strb	r1, [r2, r3]
 8000e3a:	e015      	b.n	8000e68 <vGetIOButtonValue+0x340>
	else if(uTimePress[bIndex]>=TIME_LONG_PRESS_T2)
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e48:	d304      	bcc.n	8000e54 <vGetIOButtonValue+0x32c>
		NewValue->bButtonState[bIndex] = eButtonLongPressT2;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	2104      	movs	r1, #4
 8000e50:	54d1      	strb	r1, [r2, r3]
 8000e52:	e009      	b.n	8000e68 <vGetIOButtonValue+0x340>
	else if(uTimePress[bIndex]>=TIME_LONG_PRESS_T1)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	2b63      	cmp	r3, #99	; 0x63
 8000e5e:	d903      	bls.n	8000e68 <vGetIOButtonValue+0x340>
		NewValue->bButtonState[bIndex] = eButtonLongPressT1;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	2103      	movs	r1, #3
 8000e66:	54d1      	strb	r1, [r2, r3]
	/* Update button press time */
	NewValue->bButtonTime[bIndex] = uTimePress[bIndex];
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <vGetIOButtonValue+0x360>)
 8000e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	b291      	uxth	r1, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	80da      	strh	r2, [r3, #6]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	200000e4 	.word	0x200000e4
 8000e8c:	20000114 	.word	0x20000114
 8000e90:	200000d0 	.word	0x200000d0
 8000e94:	200000f8 	.word	0x200000f8

08000e98 <Led7TurnTime_Display>:
static void Led7RoundTime_Write(unsigned char oneByte);
static void Led7RoundTime_PWM(unsigned char oneByte);

/* Public function -----------------------------------------------------------*/
void Led7TurnTime_Display(int led7ch, int led7dv, int led_num_left, int led_num_right)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
	VALUE_SHOW_LED[4] = led7ch;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000eac:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED[5] = led7dv;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000eb4:	715a      	strb	r2, [r3, #5]

	VALUE_SHOW_LED[2] = led_num_right;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000ebc:	709a      	strb	r2, [r3, #2]
	VALUE_SHOW_LED[3] = led_num_left;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000ec4:	70da      	strb	r2, [r3, #3]

	Led7TurnTime_Start();
 8000ec6:	f000 f93b 	bl	8001140 <Led7TurnTime_Start>
	Led7TurnTime_Write(TM1637_I2C_COMM1);
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f000 f958 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000ed0:	f000 f998 	bl	8001204 <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 8000ed4:	f000 f9c2 	bl	800125c <Led7TurnTime_Stop>

	Led7TurnTime_Start();
 8000ed8:	f000 f932 	bl	8001140 <Led7TurnTime_Start>
	Led7TurnTime_Write(0xC0);
 8000edc:	20c0      	movs	r0, #192	; 0xc0
 8000ede:	f000 f94f 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000ee2:	f000 f98f 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[0]]);
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <Led7TurnTime_Display+0xdc>)
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f945 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000ef6:	f000 f985 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[1]]);
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <Led7TurnTime_Display+0xdc>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f93b 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000f0a:	f000 f97b 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED[VALUE_SHOW_LED[2]]);
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <Led7TurnTime_Display+0xdc>)
 8000f16:	5c9b      	ldrb	r3, [r3, r2]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f931 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000f1e:	f000 f971 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_LED_1[VALUE_SHOW_LED[3]]);
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <Led7TurnTime_Display+0xe0>)
 8000f2a:	5c9b      	ldrb	r3, [r3, r2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f927 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000f32:	f000 f967 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[4]]);
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <Led7TurnTime_Display+0xe4>)
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f91d 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000f46:	f000 f95d 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Write(TM1637_CODE_SEG_NO_DOT[VALUE_SHOW_LED[5]]);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <Led7TurnTime_Display+0xd8>)
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <Led7TurnTime_Display+0xe4>)
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f913 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 8000f5a:	f000 f953 	bl	8001204 <Led7TurnTime_Cask>

	Led7TurnTime_Stop();
 8000f5e:	f000 f97d 	bl	800125c <Led7TurnTime_Stop>

	Led7TurnTime_PWM(PWM8);
 8000f62:	2087      	movs	r0, #135	; 0x87
 8000f64:	f000 f9a6 	bl	80012b4 <Led7TurnTime_PWM>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	08006150 	.word	0x08006150
 8000f78:	08006164 	.word	0x08006164
 8000f7c:	0800613c 	.word	0x0800613c

08000f80 <Led7HitCnt_Display>:

void Led7HitCnt_Display(int slc_ch, int slc_dv, int sct_ch, int sct_dv)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
	VALUE_SHOW_LED_2[3] = slc_ch;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000f94:	70da      	strb	r2, [r3, #3]
	VALUE_SHOW_LED_2[4] = slc_dv;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000f9c:	711a      	strb	r2, [r3, #4]

	VALUE_SHOW_LED_2[1] = sct_ch;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000fa4:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_2[2] = sct_dv;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000fac:	709a      	strb	r2, [r3, #2]

	Led7HitCnt_Start();
 8000fae:	f000 f997 	bl	80012e0 <Led7HitCnt_Start>
	Led7HitCnt_Write(TM1637_I2C_COMM1);
 8000fb2:	2040      	movs	r0, #64	; 0x40
 8000fb4:	f000 f9b4 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000fb8:	f000 f9f4 	bl	80013a4 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8000fbc:	f000 fa1e 	bl	80013fc <Led7HitCnt_Stop>

	Led7HitCnt_Start();
 8000fc0:	f000 f98e 	bl	80012e0 <Led7HitCnt_Start>
	Led7HitCnt_Write(0xC0);
 8000fc4:	20c0      	movs	r0, #192	; 0xc0
 8000fc6:	f000 f9ab 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000fca:	f000 f9eb 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[0]]);
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <Led7HitCnt_Display+0xdc>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9a1 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000fde:	f000 f9e1 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[1]]);
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <Led7HitCnt_Display+0xdc>)
 8000fea:	5c9b      	ldrb	r3, [r3, r2]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f997 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8000ff2:	f000 f9d7 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[2]]);
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <Led7HitCnt_Display+0xdc>)
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f98d 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8001006:	f000 f9cd 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[3]]);
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <Led7HitCnt_Display+0xd8>)
 800100c:	78db      	ldrb	r3, [r3, #3]
 800100e:	461a      	mov	r2, r3
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <Led7HitCnt_Display+0xdc>)
 8001012:	5c9b      	ldrb	r3, [r3, r2]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f983 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 800101a:	f000 f9c3 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[4]]);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	461a      	mov	r2, r3
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <Led7HitCnt_Display+0xdc>)
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f979 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 800102e:	f000 f9b9 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Write(VALUE_SHOW_LED_2_CONST[VALUE_SHOW_LED_2[5]]);
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <Led7HitCnt_Display+0xd8>)
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	461a      	mov	r2, r3
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <Led7HitCnt_Display+0xdc>)
 800103a:	5c9b      	ldrb	r3, [r3, r2]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f96f 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8001042:	f000 f9af 	bl	80013a4 <Led7HitCnt_Cask>

	Led7HitCnt_Stop();
 8001046:	f000 f9d9 	bl	80013fc <Led7HitCnt_Stop>

	Led7HitCnt_PWM(PWM8);
 800104a:	2087      	movs	r0, #135	; 0x87
 800104c:	f000 fa02 	bl	8001454 <Led7HitCnt_PWM>
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000008 	.word	0x20000008
 800105c:	08006178 	.word	0x08006178

08001060 <Led7RoundTime_Display>:


void Led7RoundTime_Display(int h_ch, int h_dv, int m_ch, int m_dv)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
	VALUE_SHOW_LED_3[4] = h_ch;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <Led7RoundTime_Display+0xd8>)
 8001074:	711a      	strb	r2, [r3, #4]
	VALUE_SHOW_LED_3[3] = h_dv;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <Led7RoundTime_Display+0xd8>)
 800107c:	70da      	strb	r2, [r3, #3]

	VALUE_SHOW_LED_3[1] = m_ch;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <Led7RoundTime_Display+0xd8>)
 8001084:	705a      	strb	r2, [r3, #1]
	VALUE_SHOW_LED_3[0] = m_dv;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <Led7RoundTime_Display+0xd8>)
 800108c:	701a      	strb	r2, [r3, #0]

	Led7RoundTime_Start();
 800108e:	f000 f9f7 	bl	8001480 <Led7RoundTime_Start>
	Led7RoundTime_Write(TM1637_I2C_COMM1);
 8001092:	2040      	movs	r0, #64	; 0x40
 8001094:	f000 fa10 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8001098:	f000 fa4a 	bl	8001530 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 800109c:	f000 fa70 	bl	8001580 <Led7RoundTime_Stop>

	Led7RoundTime_Start();
 80010a0:	f000 f9ee 	bl	8001480 <Led7RoundTime_Start>
	Led7RoundTime_Write(0xC0);
 80010a4:	20c0      	movs	r0, #192	; 0xc0
 80010a6:	f000 fa07 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80010aa:	f000 fa41 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[0]]);
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <Led7RoundTime_Display+0xd8>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <Led7RoundTime_Display+0xdc>)
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f9fd 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80010be:	f000 fa37 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[1]]);
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <Led7RoundTime_Display+0xd8>)
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <Led7RoundTime_Display+0xdc>)
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f9f3 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80010d2:	f000 fa2d 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[2]]);
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <Led7RoundTime_Display+0xd8>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <Led7RoundTime_Display+0xdc>)
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f9e9 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80010e6:	f000 fa23 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[3]]);
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <Led7RoundTime_Display+0xd8>)
 80010ec:	78db      	ldrb	r3, [r3, #3]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <Led7RoundTime_Display+0xdc>)
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f9df 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80010fa:	f000 fa19 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[4]]);
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <Led7RoundTime_Display+0xd8>)
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <Led7RoundTime_Display+0xdc>)
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f9d5 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 800110e:	f000 fa0f 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Write(VALUE_SHOW_LED_3_CONST[VALUE_SHOW_LED_3[5]]);
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <Led7RoundTime_Display+0xd8>)
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	461a      	mov	r2, r3
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <Led7RoundTime_Display+0xdc>)
 800111a:	5c9b      	ldrb	r3, [r3, r2]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f9cb 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 8001122:	f000 fa05 	bl	8001530 <Led7RoundTime_Cask>

	Led7RoundTime_Stop();
 8001126:	f000 fa2b 	bl	8001580 <Led7RoundTime_Stop>

	Led7RoundTime_PWM(PWM8);
 800112a:	2087      	movs	r0, #135	; 0x87
 800112c:	f000 fa50 	bl	80015d0 <Led7RoundTime_PWM>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000010 	.word	0x20000010
 800113c:	08006184 	.word	0x08006184

08001140 <Led7TurnTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7TurnTime_Start(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	TM1637_CLK1_ON;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <Led7TurnTime_Start+0x3c>)
 800114c:	f002 fa37 	bl	80035be <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8001150:	2111      	movs	r1, #17
 8001152:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001156:	f000 fa51 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO1_ON;
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <Led7TurnTime_Start+0x3c>)
 8001162:	f002 fa2c 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fa7c 	bl	8001664 <Delay_us>
	TM1637_DIO1_OFF;
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <Led7TurnTime_Start+0x3c>)
 8001174:	f002 fa23 	bl	80035be <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010c00 	.word	0x40010c00

08001180 <Led7TurnTime_Write>:

static void Led7TurnTime_Write(unsigned char oneByte)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 800118a:	2111      	movs	r1, #17
 800118c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001190:	f000 fa34 	bl	80015fc <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e029      	b.n	80011ee <Led7TurnTime_Write+0x6e>
	{
		TM1637_CLK1_OFF;
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <Led7TurnTime_Write+0x80>)
 80011a2:	f002 fa0c 	bl	80035be <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <Led7TurnTime_Write+0x3e>
		{
		  TM1637_DIO1_ON;
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <Led7TurnTime_Write+0x80>)
 80011b8:	f002 fa01 	bl	80035be <HAL_GPIO_WritePin>
 80011bc:	e005      	b.n	80011ca <Led7TurnTime_Write+0x4a>
		}
		else
		{
		  TM1637_DIO1_OFF;
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <Led7TurnTime_Write+0x80>)
 80011c6:	f002 f9fa 	bl	80035be <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 fa4a 	bl	8001664 <Delay_us>
		oneByte=oneByte>>1;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK1_ON;
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <Led7TurnTime_Write+0x80>)
 80011de:	f002 f9ee 	bl	80035be <HAL_GPIO_WritePin>
		Delay_us(3);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 fa3e 	bl	8001664 <Delay_us>
	for(int i=0;i<8;i++)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	ddd2      	ble.n	800119a <Led7TurnTime_Write+0x1a>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010c00 	.word	0x40010c00

08001204 <Led7TurnTime_Cask>:

static void Led7TurnTime_Cask(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <Led7TurnTime_Cask+0x54>)
 8001210:	f002 f9d5 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(5); //
 8001214:	2005      	movs	r0, #5
 8001216:	f000 fa25 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_INPUT);
 800121a:	2100      	movs	r1, #0
 800121c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001220:	f000 f9ec 	bl	80015fc <TM1637_GPIO_INIT>
	while(TM1637_DIO1_READ);
 8001224:	bf00      	nop
 8001226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <Led7TurnTime_Cask+0x54>)
 800122c:	f002 f9b0 	bl	8003590 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f7      	bne.n	8001226 <Led7TurnTime_Cask+0x22>
	TM1637_CLK1_ON;
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <Led7TurnTime_Cask+0x54>)
 800123e:	f002 f9be 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001242:	2002      	movs	r0, #2
 8001244:	f000 fa0e 	bl	8001664 <Delay_us>
	TM1637_CLK1_OFF;
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124e:	4802      	ldr	r0, [pc, #8]	; (8001258 <Led7TurnTime_Cask+0x54>)
 8001250:	f002 f9b5 	bl	80035be <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40010c00 	.word	0x40010c00

0800125c <Led7TurnTime_Stop>:

static void Led7TurnTime_Stop(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	TM1637_CLK1_OFF;
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <Led7TurnTime_Stop+0x54>)
 8001268:	f002 f9a9 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 800126c:	2002      	movs	r0, #2
 800126e:	f000 f9f9 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO1_PIN, GPIO_MODE_OUTPUT_OD);
 8001272:	2111      	movs	r1, #17
 8001274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001278:	f000 f9c0 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO1_OFF;
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <Led7TurnTime_Stop+0x54>)
 8001284:	f002 f99b 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001288:	2002      	movs	r0, #2
 800128a:	f000 f9eb 	bl	8001664 <Delay_us>
	TM1637_CLK1_ON;
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <Led7TurnTime_Stop+0x54>)
 8001296:	f002 f992 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f9e2 	bl	8001664 <Delay_us>
	TM1637_DIO1_ON;
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	4802      	ldr	r0, [pc, #8]	; (80012b0 <Led7TurnTime_Stop+0x54>)
 80012a8:	f002 f989 	bl	80035be <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <Led7TurnTime_PWM>:

static void Led7TurnTime_PWM(unsigned char PWM)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	Led7TurnTime_Start();
 80012be:	f7ff ff3f 	bl	8001140 <Led7TurnTime_Start>
	Led7TurnTime_Write(PWM | Dis_ON);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff58 	bl	8001180 <Led7TurnTime_Write>
	Led7TurnTime_Cask();
 80012d0:	f7ff ff98 	bl	8001204 <Led7TurnTime_Cask>
	Led7TurnTime_Stop();
 80012d4:	f7ff ffc2 	bl	800125c <Led7TurnTime_Stop>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Led7HitCnt_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7HitCnt_Start(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	TM1637_CLK2_ON;
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <Led7HitCnt_Start+0x3c>)
 80012ec:	f002 f967 	bl	80035be <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 80012f0:	2111      	movs	r1, #17
 80012f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012f6:	f000 f981 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO2_ON;
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <Led7HitCnt_Start+0x3c>)
 8001302:	f002 f95c 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001306:	2002      	movs	r0, #2
 8001308:	f000 f9ac 	bl	8001664 <Delay_us>
	TM1637_DIO2_OFF;
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001312:	4802      	ldr	r0, [pc, #8]	; (800131c <Led7HitCnt_Start+0x3c>)
 8001314:	f002 f953 	bl	80035be <HAL_GPIO_WritePin>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010c00 	.word	0x40010c00

08001320 <Led7HitCnt_Write>:

static void Led7HitCnt_Write(unsigned char oneByte)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 800132a:	2111      	movs	r1, #17
 800132c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001330:	f000 f964 	bl	80015fc <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e029      	b.n	800138e <Led7HitCnt_Write+0x6e>
	{
		TM1637_CLK2_OFF;
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <Led7HitCnt_Write+0x80>)
 8001342:	f002 f93c 	bl	80035be <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <Led7HitCnt_Write+0x3e>
		{
		  TM1637_DIO2_ON;
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <Led7HitCnt_Write+0x80>)
 8001358:	f002 f931 	bl	80035be <HAL_GPIO_WritePin>
 800135c:	e005      	b.n	800136a <Led7HitCnt_Write+0x4a>
		}
		else
		{
		  TM1637_DIO2_OFF;
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001364:	480e      	ldr	r0, [pc, #56]	; (80013a0 <Led7HitCnt_Write+0x80>)
 8001366:	f002 f92a 	bl	80035be <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 800136a:	2003      	movs	r0, #3
 800136c:	f000 f97a 	bl	8001664 <Delay_us>
		oneByte=oneByte>>1;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK2_ON;
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <Led7HitCnt_Write+0x80>)
 800137e:	f002 f91e 	bl	80035be <HAL_GPIO_WritePin>
		Delay_us(3);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f96e 	bl	8001664 <Delay_us>
	for(int i=0;i<8;i++)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b07      	cmp	r3, #7
 8001392:	ddd2      	ble.n	800133a <Led7HitCnt_Write+0x1a>
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <Led7HitCnt_Cask>:

static void Led7HitCnt_Cask(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <Led7HitCnt_Cask+0x54>)
 80013b0:	f002 f905 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(5); //
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 f955 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_INPUT);
 80013ba:	2100      	movs	r1, #0
 80013bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013c0:	f000 f91c 	bl	80015fc <TM1637_GPIO_INIT>
	while(TM1637_DIO2_READ);
 80013c4:	bf00      	nop
 80013c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <Led7HitCnt_Cask+0x54>)
 80013cc:	f002 f8e0 	bl	8003590 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f7      	bne.n	80013c6 <Led7HitCnt_Cask+0x22>
	TM1637_CLK2_ON;
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <Led7HitCnt_Cask+0x54>)
 80013de:	f002 f8ee 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f000 f93e 	bl	8001664 <Delay_us>
	TM1637_CLK2_OFF;
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <Led7HitCnt_Cask+0x54>)
 80013f0:	f002 f8e5 	bl	80035be <HAL_GPIO_WritePin>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40010c00 	.word	0x40010c00

080013fc <Led7HitCnt_Stop>:

static void Led7HitCnt_Stop(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	TM1637_CLK2_OFF;
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <Led7HitCnt_Stop+0x54>)
 8001408:	f002 f8d9 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 800140c:	2002      	movs	r0, #2
 800140e:	f000 f929 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO2_PIN, GPIO_MODE_OUTPUT_OD);
 8001412:	2111      	movs	r1, #17
 8001414:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001418:	f000 f8f0 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO2_OFF;
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <Led7HitCnt_Stop+0x54>)
 8001424:	f002 f8cb 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001428:	2002      	movs	r0, #2
 800142a:	f000 f91b 	bl	8001664 <Delay_us>
	TM1637_CLK2_ON;
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <Led7HitCnt_Stop+0x54>)
 8001436:	f002 f8c2 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 800143a:	2002      	movs	r0, #2
 800143c:	f000 f912 	bl	8001664 <Delay_us>
	TM1637_DIO2_ON;
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001446:	4802      	ldr	r0, [pc, #8]	; (8001450 <Led7HitCnt_Stop+0x54>)
 8001448:	f002 f8b9 	bl	80035be <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40010c00 	.word	0x40010c00

08001454 <Led7HitCnt_PWM>:

static void Led7HitCnt_PWM(unsigned char PWM)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	Led7HitCnt_Start();
 800145e:	f7ff ff3f 	bl	80012e0 <Led7HitCnt_Start>
	Led7HitCnt_Write(PWM | Dis_ON);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff58 	bl	8001320 <Led7HitCnt_Write>
	Led7HitCnt_Cask();
 8001470:	f7ff ff98 	bl	80013a4 <Led7HitCnt_Cask>
	Led7HitCnt_Stop();
 8001474:	f7ff ffc2 	bl	80013fc <Led7HitCnt_Stop>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Led7RoundTime_Start>:

/* Private function prototypes -----------------------------------------------*/
static void Led7RoundTime_Start(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	TM1637_CLK3_ON;
 8001484:	2201      	movs	r2, #1
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <Led7RoundTime_Start+0x34>)
 800148a:	f002 f898 	bl	80035be <HAL_GPIO_WritePin>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 800148e:	2111      	movs	r1, #17
 8001490:	2040      	movs	r0, #64	; 0x40
 8001492:	f000 f8b3 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO3_ON;
 8001496:	2201      	movs	r2, #1
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <Led7RoundTime_Start+0x34>)
 800149c:	f002 f88f 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 80014a0:	2002      	movs	r0, #2
 80014a2:	f000 f8df 	bl	8001664 <Delay_us>
	TM1637_DIO3_OFF;
 80014a6:	2200      	movs	r2, #0
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <Led7RoundTime_Start+0x34>)
 80014ac:	f002 f887 	bl	80035be <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010800 	.word	0x40010800

080014b8 <Led7RoundTime_Write>:

static void Led7RoundTime_Write(unsigned char oneByte)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 80014c2:	2111      	movs	r1, #17
 80014c4:	2040      	movs	r0, #64	; 0x40
 80014c6:	f000 f899 	bl	80015fc <TM1637_GPIO_INIT>

	for(int i=0;i<8;i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e025      	b.n	800151c <Led7RoundTime_Write+0x64>
	{
		TM1637_CLK3_OFF;
 80014d0:	2200      	movs	r2, #0
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4815      	ldr	r0, [pc, #84]	; (800152c <Led7RoundTime_Write+0x74>)
 80014d6:	f002 f872 	bl	80035be <HAL_GPIO_WritePin>
		if(oneByte&0x01) //????
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <Led7RoundTime_Write+0x38>
		{
		  TM1637_DIO3_ON;
 80014e4:	2201      	movs	r2, #1
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <Led7RoundTime_Write+0x74>)
 80014ea:	f002 f868 	bl	80035be <HAL_GPIO_WritePin>
 80014ee:	e004      	b.n	80014fa <Led7RoundTime_Write+0x42>
		}
		else
		{
		  TM1637_DIO3_OFF;
 80014f0:	2200      	movs	r2, #0
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <Led7RoundTime_Write+0x74>)
 80014f6:	f002 f862 	bl	80035be <HAL_GPIO_WritePin>
		}
		Delay_us(3);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f8b2 	bl	8001664 <Delay_us>
		oneByte=oneByte>>1;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	71fb      	strb	r3, [r7, #7]
		TM1637_CLK3_ON;
 8001506:	2201      	movs	r2, #1
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <Led7RoundTime_Write+0x74>)
 800150c:	f002 f857 	bl	80035be <HAL_GPIO_WritePin>
		Delay_us(3);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f8a7 	bl	8001664 <Delay_us>
	for(int i=0;i<8;i++)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b07      	cmp	r3, #7
 8001520:	ddd6      	ble.n	80014d0 <Led7RoundTime_Write+0x18>
	}
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010800 	.word	0x40010800

08001530 <Led7RoundTime_Cask>:

static void Led7RoundTime_Cask(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 8001534:	2200      	movs	r2, #0
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <Led7RoundTime_Cask+0x4c>)
 800153a:	f002 f840 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(5); //
 800153e:	2005      	movs	r0, #5
 8001540:	f000 f890 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_INPUT);
 8001544:	2100      	movs	r1, #0
 8001546:	2040      	movs	r0, #64	; 0x40
 8001548:	f000 f858 	bl	80015fc <TM1637_GPIO_INIT>
	while(TM1637_DIO3_READ);
 800154c:	bf00      	nop
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <Led7RoundTime_Cask+0x4c>)
 8001552:	f002 f81d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f8      	bne.n	800154e <Led7RoundTime_Cask+0x1e>
	TM1637_CLK3_ON;
 800155c:	2201      	movs	r2, #1
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <Led7RoundTime_Cask+0x4c>)
 8001562:	f002 f82c 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 8001566:	2002      	movs	r0, #2
 8001568:	f000 f87c 	bl	8001664 <Delay_us>
	TM1637_CLK3_OFF;
 800156c:	2200      	movs	r2, #0
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <Led7RoundTime_Cask+0x4c>)
 8001572:	f002 f824 	bl	80035be <HAL_GPIO_WritePin>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010800 	.word	0x40010800

08001580 <Led7RoundTime_Stop>:

static void Led7RoundTime_Stop(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	TM1637_CLK3_OFF;
 8001584:	2200      	movs	r2, #0
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <Led7RoundTime_Stop+0x4c>)
 800158a:	f002 f818 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 800158e:	2002      	movs	r0, #2
 8001590:	f000 f868 	bl	8001664 <Delay_us>
	TM1637_GPIO_INIT(TM1637_DIO3_PIN, GPIO_MODE_OUTPUT_OD);
 8001594:	2111      	movs	r1, #17
 8001596:	2040      	movs	r0, #64	; 0x40
 8001598:	f000 f830 	bl	80015fc <TM1637_GPIO_INIT>
	TM1637_DIO3_OFF;
 800159c:	2200      	movs	r2, #0
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <Led7RoundTime_Stop+0x4c>)
 80015a2:	f002 f80c 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 f85c 	bl	8001664 <Delay_us>
	TM1637_CLK3_ON;
 80015ac:	2201      	movs	r2, #1
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <Led7RoundTime_Stop+0x4c>)
 80015b2:	f002 f804 	bl	80035be <HAL_GPIO_WritePin>
	Delay_us(2);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f000 f854 	bl	8001664 <Delay_us>
	TM1637_DIO3_ON;
 80015bc:	2201      	movs	r2, #1
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <Led7RoundTime_Stop+0x4c>)
 80015c2:	f001 fffc 	bl	80035be <HAL_GPIO_WritePin>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40010800 	.word	0x40010800

080015d0 <Led7RoundTime_PWM>:

static void Led7RoundTime_PWM(unsigned char PWM)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	Led7RoundTime_Start();
 80015da:	f7ff ff51 	bl	8001480 <Led7RoundTime_Start>
	Led7RoundTime_Write(PWM | Dis_ON);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f063 0377 	orn	r3, r3, #119	; 0x77
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff66 	bl	80014b8 <Led7RoundTime_Write>
	Led7RoundTime_Cask();
 80015ec:	f7ff ffa0 	bl	8001530 <Led7RoundTime_Cask>
	Led7RoundTime_Stop();
 80015f0:	f7ff ffc6 	bl	8001580 <Led7RoundTime_Stop>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <TM1637_GPIO_INIT>:


static void TM1637_GPIO_INIT(uint32_t Pin, uint32_t Mode)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = Pin;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = Mode;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	60fb      	str	r3, [r7, #12]
	if(Mode == GPIO_MODE_OUTPUT_OD){
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b11      	cmp	r3, #17
 8001620:	d102      	bne.n	8001628 <TM1637_GPIO_INIT+0x2c>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2302      	movs	r3, #2
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e001      	b.n	800162c <TM1637_GPIO_INIT+0x30>
	}
	else{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
	}
	if((Pin == IO1_Pin) || (Pin == IO2_Pin))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b40      	cmp	r3, #64	; 0x40
 8001630:	d002      	beq.n	8001638 <TM1637_GPIO_INIT+0x3c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b80      	cmp	r3, #128	; 0x80
 8001636:	d106      	bne.n	8001646 <TM1637_GPIO_INIT+0x4a>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0308 	add.w	r3, r7, #8
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <TM1637_GPIO_INIT+0x60>)
 8001640:	f001 fe22 	bl	8003288 <HAL_GPIO_Init>
 8001644:	e006      	b.n	8001654 <TM1637_GPIO_INIT+0x58>
	else
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <TM1637_GPIO_INIT+0x64>)
 800164e:	f001 fe1b 	bl	8003288 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00

08001664 <Delay_us>:

static void Delay_us(unsigned long us) //nus ??
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  while(us--)
 800166c:	e01a      	b.n	80016a4 <Delay_us+0x40>
  {
    __ASM volatile ("nop");
 800166e:	bf00      	nop
    __ASM volatile ("nop");
 8001670:	bf00      	nop
    __ASM volatile ("nop");
 8001672:	bf00      	nop
    __ASM volatile ("nop");
 8001674:	bf00      	nop
    __ASM volatile ("nop");
 8001676:	bf00      	nop

    __ASM volatile ("nop");
 8001678:	bf00      	nop
    __ASM volatile ("nop");
 800167a:	bf00      	nop
    __ASM volatile ("nop");
 800167c:	bf00      	nop
    __ASM volatile ("nop");
 800167e:	bf00      	nop
    __ASM volatile ("nop");
 8001680:	bf00      	nop

    __ASM volatile ("nop");
 8001682:	bf00      	nop
    __ASM volatile ("nop");
 8001684:	bf00      	nop
    __ASM volatile ("nop");
 8001686:	bf00      	nop
    __ASM volatile ("nop");
 8001688:	bf00      	nop
    __ASM volatile ("nop");
 800168a:	bf00      	nop

    __ASM volatile ("nop");
 800168c:	bf00      	nop
    __ASM volatile ("nop");
 800168e:	bf00      	nop
    __ASM volatile ("nop");
 8001690:	bf00      	nop
    __ASM volatile ("nop");
 8001692:	bf00      	nop
    __ASM volatile ("nop");
 8001694:	bf00      	nop

    __ASM volatile ("nop");
 8001696:	bf00      	nop
    __ASM volatile ("nop");
 8001698:	bf00      	nop
    __ASM volatile ("nop");
 800169a:	bf00      	nop
    __ASM volatile ("nop");
 800169c:	bf00      	nop
    __ASM volatile ("nop");
 800169e:	bf00      	nop
    __ASM volatile ("nop");
 80016a0:	bf00      	nop
    __ASM volatile ("nop");
 80016a2:	bf00      	nop
  while(us--)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1df      	bne.n	800166e <Delay_us+0xa>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <Task_Mode_Cfg>:
//static uint8_t update_rand_addr(void);
static void delay_ms(unsigned int x);

/* Public function -----------------------------------------------------------*/
void Task_Mode_Cfg(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
	...

080016c8 <Task_User_Init>:

uint8_t Task_User_Init(uint8_t player_num)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	if((player_num!=2) && (player_num!=4))
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d004      	beq.n	80016e2 <Task_User_Init+0x1a>
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d001      	beq.n	80016e2 <Task_User_Init+0x1a>
		return 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	e0e1      	b.n	80018a6 <Task_User_Init+0x1de>
	//Read from FLASH
	start_point = (int)BEGIN_POINT;
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <Task_User_Init+0x1e8>)
 80016e4:	221e      	movs	r2, #30
 80016e6:	801a      	strh	r2, [r3, #0]
	turn_time_s = (int)TURN_TIME_S;
 80016e8:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <Task_User_Init+0x1ec>)
 80016ea:	222d      	movs	r2, #45	; 0x2d
 80016ec:	801a      	strh	r2, [r3, #0]
	rount_time_m = (int)ROUND_TIME_M;
 80016ee:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <Task_User_Init+0x1f0>)
 80016f0:	221e      	movs	r2, #30
 80016f2:	601a      	str	r2, [r3, #0]

	current_player = 0;
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <Task_User_Init+0x1f4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
	hit_get_point_cnt = 0;
 80016fa:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <Task_User_Init+0x1f8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	801a      	strh	r2, [r3, #0]

	for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e03e      	b.n	8001784 <Task_User_Init+0xbc>
	{
		Player[i].ledxl_mask = 0x0F;
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <Task_User_Init+0x1fc>)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	220f      	movs	r2, #15
 8001710:	701a      	strb	r2, [r3, #0]
		Player[i].addr = i+1;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <Task_User_Init+0x1fc>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	3301      	adds	r3, #1
 8001724:	460a      	mov	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
		Player[i].average = 0;
 8001728:	4a66      	ldr	r2, [pc, #408]	; (80018c4 <Task_User_Init+0x1fc>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	3304      	adds	r3, #4
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
		Player[i].point = start_point*((i>=player_num?0:1));
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	da02      	bge.n	8001746 <Task_User_Init+0x7e>
 8001740:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <Task_User_Init+0x1e8>)
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	e000      	b.n	8001748 <Task_User_Init+0x80>
 8001746:	2200      	movs	r2, #0
 8001748:	495e      	ldr	r1, [pc, #376]	; (80018c4 <Task_User_Init+0x1fc>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	440b      	add	r3, r1
 8001750:	3308      	adds	r3, #8
 8001752:	801a      	strh	r2, [r3, #0]
		Player[i].max_hit_get_point = 0;
 8001754:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <Task_User_Init+0x1fc>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	330a      	adds	r3, #10
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
		Player[i].sum_point = 0;
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <Task_User_Init+0x1fc>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	330c      	adds	r3, #12
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
		Player[i].sum_signed = 0;
 8001770:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <Task_User_Init+0x1fc>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	3302      	adds	r3, #2
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<MAX_PLAYER_NUM;i++)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b03      	cmp	r3, #3
 8001788:	ddbd      	ble.n	8001706 <Task_User_Init+0x3e>
	}

	//Send data to Display
	Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <Task_User_Init+0x1ec>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <Task_User_Init+0x200>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <Task_User_Init+0x1ec>)
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <Task_User_Init+0x200>)
 80017a0:	fba3 1302 	umull	r1, r3, r3, r2
 80017a4:	08d9      	lsrs	r1, r3, #3
 80017a6:	460b      	mov	r3, r1
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	2308      	movs	r3, #8
 80017b6:	2208      	movs	r2, #8
 80017b8:	f7ff fb6e 	bl	8000e98 <Led7TurnTime_Display>
	Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <Task_User_Init+0x204>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <Task_User_Init+0x200>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	4618      	mov	r0, r3
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <Task_User_Init+0x204>)
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <Task_User_Init+0x200>)
 80017d0:	fba3 2301 	umull	r2, r3, r3, r1
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1aca      	subs	r2, r1, r3
 80017e0:	4614      	mov	r4, r2
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <Task_User_Init+0x1f8>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <Task_User_Init+0x200>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461d      	mov	r5, r3
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <Task_User_Init+0x1f8>)
 80017f4:	881a      	ldrh	r2, [r3, #0]
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <Task_User_Init+0x200>)
 80017f8:	fba3 1302 	umull	r1, r3, r3, r2
 80017fc:	08d9      	lsrs	r1, r3, #3
 80017fe:	460b      	mov	r3, r1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	b29b      	uxth	r3, r3
 800180a:	462a      	mov	r2, r5
 800180c:	4621      	mov	r1, r4
 800180e:	f7ff fbb7 	bl	8000f80 <Led7HitCnt_Display>
	Led7RoundTime_Display((rount_time_m/60)/10, (rount_time_m/60)%10, (rount_time_m%60)/10, (rount_time_m%60)%10);
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <Task_User_Init+0x1f0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <Task_User_Init+0x208>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	4618      	mov	r0, r3
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <Task_User_Init+0x1f0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <Task_User_Init+0x20c>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0959      	lsrs	r1, r3, #5
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <Task_User_Init+0x200>)
 800182e:	fba3 2301 	umull	r2, r3, r3, r1
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	1aca      	subs	r2, r1, r3
 800183e:	4614      	mov	r4, r2
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <Task_User_Init+0x1f0>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <Task_User_Init+0x20c>)
 8001846:	fba3 2301 	umull	r2, r3, r3, r1
 800184a:	095a      	lsrs	r2, r3, #5
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	1aca      	subs	r2, r1, r3
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <Task_User_Init+0x200>)
 8001858:	fba3 2302 	umull	r2, r3, r3, r2
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	461d      	mov	r5, r3
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <Task_User_Init+0x1f0>)
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <Task_User_Init+0x20c>)
 8001866:	fba3 2301 	umull	r2, r3, r3, r1
 800186a:	095a      	lsrs	r2, r3, #5
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	1aca      	subs	r2, r1, r3
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <Task_User_Init+0x200>)
 8001878:	fba3 1302 	umull	r1, r3, r3, r2
 800187c:	08d9      	lsrs	r1, r3, #3
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1ad1      	subs	r1, r2, r3
 8001888:	460b      	mov	r3, r1
 800188a:	462a      	mov	r2, r5
 800188c:	4621      	mov	r1, r4
 800188e:	f7ff fbe7 	bl	8001060 <Led7RoundTime_Display>

	Task_led_xl(0, 0x0F);
 8001892:	210f      	movs	r1, #15
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fd29 	bl	80022ec <Task_led_xl>
	Task_Upload_Display();
 800189a:	f000 fd55 	bl	8002348 <Task_Upload_Display>

	pTask_1st_Flag = 1;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <Task_User_Init+0x210>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000128 	.word	0x20000128
 80018b4:	2000012a 	.word	0x2000012a
 80018b8:	2000012c 	.word	0x2000012c
 80018bc:	20000178 	.word	0x20000178
 80018c0:	20000134 	.word	0x20000134
 80018c4:	20000138 	.word	0x20000138
 80018c8:	cccccccd 	.word	0xcccccccd
 80018cc:	20000018 	.word	0x20000018
 80018d0:	1b4e81b5 	.word	0x1b4e81b5
 80018d4:	88888889 	.word	0x88888889
 80018d8:	20000126 	.word	0x20000126
 80018dc:	00000000 	.word	0x00000000

080018e0 <Task_4_Player>:

void Task_4_Player(void)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
//	if(Task1_Flag == 0)
//		return;
//	Task1_Flag = 0;

	if(pTask_1st_Flag)
 80018e6:	4b9a      	ldr	r3, [pc, #616]	; (8001b50 <Task_4_Player+0x270>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d07e      	beq.n	80019ec <Task_4_Player+0x10c>
	{
		point_plus = get_player_available() - 1;
 80018ee:	f000 fd9d 	bl	800242c <get_player_available>
 80018f2:	4603      	mov	r3, r0
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b96      	ldr	r3, [pc, #600]	; (8001b54 <Task_4_Player+0x274>)
 80018fa:	701a      	strb	r2, [r3, #0]

		last_average = Player[current_player].average;
 80018fc:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <Task_4_Player+0x278>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4a96      	ldr	r2, [pc, #600]	; (8001b5c <Task_4_Player+0x27c>)
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	3304      	adds	r3, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a95      	ldr	r2, [pc, #596]	; (8001b60 <Task_4_Player+0x280>)
 800190c:	6013      	str	r3, [r2, #0]
		Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 800190e:	4b95      	ldr	r3, [pc, #596]	; (8001b64 <Task_4_Player+0x284>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe ff15 	bl	8000744 <__aeabi_ui2f>
 800191a:	4602      	mov	r2, r0
 800191c:	4b90      	ldr	r3, [pc, #576]	; (8001b60 <Task_4_Player+0x280>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7fe ff66 	bl	80007f4 <__aeabi_fmul>
 8001928:	4603      	mov	r3, r0
 800192a:	461c      	mov	r4, r3
 800192c:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <Task_4_Player+0x288>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe ff0b 	bl	800074c <__aeabi_i2f>
 8001936:	4603      	mov	r3, r0
 8001938:	4619      	mov	r1, r3
 800193a:	4620      	mov	r0, r4
 800193c:	f7fe fe52 	bl	80005e4 <__addsf3>
 8001940:	4603      	mov	r3, r0
 8001942:	461d      	mov	r5, r3
 8001944:	4b87      	ldr	r3, [pc, #540]	; (8001b64 <Task_4_Player+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fefb 	bl	8000744 <__aeabi_ui2f>
 800194e:	4603      	mov	r3, r0
 8001950:	4a81      	ldr	r2, [pc, #516]	; (8001b58 <Task_4_Player+0x278>)
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	4614      	mov	r4, r2
 8001956:	4619      	mov	r1, r3
 8001958:	4628      	mov	r0, r5
 800195a:	f7fe ffff 	bl	800095c <__aeabi_fdiv>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	4a7e      	ldr	r2, [pc, #504]	; (8001b5c <Task_4_Player+0x27c>)
 8001964:	0123      	lsls	r3, r4, #4
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	6019      	str	r1, [r3, #0]
		if(Player[current_player].average>99.99)
 800196c:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <Task_4_Player+0x278>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4a7a      	ldr	r2, [pc, #488]	; (8001b5c <Task_4_Player+0x27c>)
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	3304      	adds	r3, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd4c 	bl	8000418 <__aeabi_f2d>
 8001980:	a371      	add	r3, pc, #452	; (adr r3, 8001b48 <Task_4_Player+0x268>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fe1d 	bl	80005c4 <__aeabi_dcmpgt>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <Task_4_Player+0xc0>
			Player[current_player].average = 99.99;
 8001990:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <Task_4_Player+0x278>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4a71      	ldr	r2, [pc, #452]	; (8001b5c <Task_4_Player+0x27c>)
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	4a73      	ldr	r2, [pc, #460]	; (8001b6c <Task_4_Player+0x28c>)
 800199e:	601a      	str	r2, [r3, #0]
		//Send data Display to all Addr

		//Send Blink cmd to Current User
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e01b      	b.n	80019de <Task_4_Player+0xfe>
		{
			if(i==current_player)
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <Task_4_Player+0x278>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d109      	bne.n	80019c6 <Task_4_Player+0xe6>
				Task_Blink_Line(current_player+1, 1, 1);
 80019b2:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <Task_4_Player+0x278>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2201      	movs	r2, #1
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fcaa 	bl	8002318 <Task_Blink_Line>
 80019c4:	e008      	b.n	80019d8 <Task_4_Player+0xf8>
			else{
				Task_Blink_Line(i+1, 0, 1);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2201      	movs	r2, #1
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fca0 	bl	8002318 <Task_Blink_Line>
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	dde0      	ble.n	80019a6 <Task_4_Player+0xc6>
			}
		}
		pTask_1st_Flag = 0;
 80019e4:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <Task_4_Player+0x270>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
		return;
 80019ea:	e379      	b.n	80020e0 <Task_4_Player+0x800>
	}

	//Check Button
	if(BUT_NEW_STA_FLAG == 0)
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <Task_4_Player+0x290>)
 80019ee:	7c1b      	ldrb	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8374 	beq.w	80020de <Task_4_Player+0x7fe>
		return;

	BUT_NEW_STA_FLAG = 0;
 80019f6:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <Task_4_Player+0x290>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	741a      	strb	r2, [r3, #16]
	if(PLUS_BUT_STATE == eButtonSingleClick)
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <Task_4_Player+0x290>)
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	f040 8187 	bne.w	8001d14 <Task_4_Player+0x434>
	{
		PLUS_BUT_STATE = eButtonHoldOff;
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <Task_4_Player+0x290>)
 8001a08:	2209      	movs	r2, #9
 8001a0a:	711a      	strb	r2, [r3, #4]
		//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);

		turn_time_s = (int)TURN_TIME_S;
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <Task_4_Player+0x294>)
 8001a0e:	222d      	movs	r2, #45	; 0x2d
 8001a10:	801a      	strh	r2, [r3, #0]
		hit_get_point_cnt++;
 8001a12:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <Task_4_Player+0x288>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <Task_4_Player+0x288>)
 8001a1c:	801a      	strh	r2, [r3, #0]
		if((hit_get_point_cnt < 100) && (all_turn_cnt < 100)){
 8001a1e:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <Task_4_Player+0x288>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	2b63      	cmp	r3, #99	; 0x63
 8001a24:	d82e      	bhi.n	8001a84 <Task_4_Player+0x1a4>
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <Task_4_Player+0x284>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b63      	cmp	r3, #99	; 0x63
 8001a2c:	d82a      	bhi.n	8001a84 <Task_4_Player+0x1a4>
			Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <Task_4_Player+0x284>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <Task_4_Player+0x298>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <Task_4_Player+0x284>)
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <Task_4_Player+0x298>)
 8001a42:	fba3 2301 	umull	r2, r3, r3, r1
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	1aca      	subs	r2, r1, r3
 8001a52:	4614      	mov	r4, r2
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <Task_4_Player+0x288>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <Task_4_Player+0x298>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461d      	mov	r5, r3
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <Task_4_Player+0x288>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <Task_4_Player+0x298>)
 8001a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a6e:	08d9      	lsrs	r1, r3, #3
 8001a70:	460b      	mov	r3, r1
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	462a      	mov	r2, r5
 8001a7e:	4621      	mov	r1, r4
 8001a80:	f7ff fa7e 	bl	8000f80 <Led7HitCnt_Display>
		}

		Player[current_player].average = (last_average*(all_turn_cnt-1) + hit_get_point_cnt)/(float)all_turn_cnt;
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <Task_4_Player+0x284>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fe5a 	bl	8000744 <__aeabi_ui2f>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <Task_4_Player+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7fe feab 	bl	80007f4 <__aeabi_fmul>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461c      	mov	r4, r3
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <Task_4_Player+0x288>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fe50 	bl	800074c <__aeabi_i2f>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7fe fd97 	bl	80005e4 <__addsf3>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461d      	mov	r5, r3
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <Task_4_Player+0x284>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fe40 	bl	8000744 <__aeabi_ui2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <Task_4_Player+0x278>)
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4614      	mov	r4, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f7fe ff44 	bl	800095c <__aeabi_fdiv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <Task_4_Player+0x27c>)
 8001ada:	0123      	lsls	r3, r4, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	6019      	str	r1, [r3, #0]
		if(Player[current_player].average>99.99)
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <Task_4_Player+0x278>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <Task_4_Player+0x27c>)
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	3304      	adds	r3, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc91 	bl	8000418 <__aeabi_f2d>
 8001af6:	a314      	add	r3, pc, #80	; (adr r3, 8001b48 <Task_4_Player+0x268>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fd62 	bl	80005c4 <__aeabi_dcmpgt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <Task_4_Player+0x236>
			Player[current_player].average = 99.99;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <Task_4_Player+0x278>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <Task_4_Player+0x27c>)
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <Task_4_Player+0x28c>)
 8001b14:	601a      	str	r2, [r3, #0]

		//Update CTCN
		if(hit_get_point_cnt > Player[current_player].max_hit_get_point)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <Task_4_Player+0x278>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <Task_4_Player+0x27c>)
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	330a      	adds	r3, #10
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <Task_4_Player+0x288>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d20a      	bcs.n	8001b42 <Task_4_Player+0x262>
			Player[current_player].max_hit_get_point = hit_get_point_cnt;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <Task_4_Player+0x278>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <Task_4_Player+0x288>)
 8001b34:	8819      	ldrh	r1, [r3, #0]
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <Task_4_Player+0x27c>)
 8001b38:	0103      	lsls	r3, r0, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	330a      	adds	r3, #10
 8001b3e:	460a      	mov	r2, r1
 8001b40:	801a      	strh	r2, [r3, #0]

		//Update  DHT & SDTL
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e0df      	b.n	8001d08 <Task_4_Player+0x428>
 8001b48:	28f5c28f 	.word	0x28f5c28f
 8001b4c:	4058ff5c 	.word	0x4058ff5c
 8001b50:	20000126 	.word	0x20000126
 8001b54:	20000179 	.word	0x20000179
 8001b58:	20000178 	.word	0x20000178
 8001b5c:	20000138 	.word	0x20000138
 8001b60:	20000130 	.word	0x20000130
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000134 	.word	0x20000134
 8001b6c:	42c7fae1 	.word	0x42c7fae1
 8001b70:	200000a8 	.word	0x200000a8
 8001b74:	2000012a 	.word	0x2000012a
 8001b78:	cccccccd 	.word	0xcccccccd
		{
			if(Player[i].point == 0)
 8001b7c:	4a9e      	ldr	r2, [pc, #632]	; (8001df8 <Task_4_Player+0x518>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	3308      	adds	r3, #8
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80b9 	beq.w	8001d00 <Task_4_Player+0x420>
				continue;

			if(i==current_player){
 8001b8e:	4b9b      	ldr	r3, [pc, #620]	; (8001dfc <Task_4_Player+0x51c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d164      	bne.n	8001c64 <Task_4_Player+0x384>
				Player[i].point += point_plus;
 8001b9a:	4a97      	ldr	r2, [pc, #604]	; (8001df8 <Task_4_Player+0x518>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <Task_4_Player+0x520>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	b299      	uxth	r1, r3
 8001bb0:	4a91      	ldr	r2, [pc, #580]	; (8001df8 <Task_4_Player+0x518>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3308      	adds	r3, #8
 8001bba:	460a      	mov	r2, r1
 8001bbc:	801a      	strh	r2, [r3, #0]
				if(Player[i].sum_signed)
 8001bbe:	4a8e      	ldr	r2, [pc, #568]	; (8001df8 <Task_4_Player+0x518>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d037      	beq.n	8001c3e <Task_4_Player+0x35e>
				{
					if(point_plus >= Player[i].sum_point){
 8001bce:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <Task_4_Player+0x520>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4988      	ldr	r1, [pc, #544]	; (8001df8 <Task_4_Player+0x518>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	440b      	add	r3, r1
 8001bdc:	330c      	adds	r3, #12
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d319      	bcc.n	8001c18 <Task_4_Player+0x338>
						Player[i].sum_point = point_plus - Player[i].sum_point;
 8001be4:	4b86      	ldr	r3, [pc, #536]	; (8001e00 <Task_4_Player+0x520>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	4983      	ldr	r1, [pc, #524]	; (8001df8 <Task_4_Player+0x518>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	4a7f      	ldr	r2, [pc, #508]	; (8001df8 <Task_4_Player+0x518>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	330c      	adds	r3, #12
 8001c04:	460a      	mov	r2, r1
 8001c06:	801a      	strh	r2, [r3, #0]
						Player[i].sum_signed = 0;
 8001c08:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <Task_4_Player+0x518>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	3302      	adds	r3, #2
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e074      	b.n	8001d02 <Task_4_Player+0x422>
					} else{
						Player[i].sum_point -= point_plus;
 8001c18:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <Task_4_Player+0x518>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	330c      	adds	r3, #12
 8001c22:	881a      	ldrh	r2, [r3, #0]
 8001c24:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <Task_4_Player+0x520>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b299      	uxth	r1, r3
 8001c2e:	4a72      	ldr	r2, [pc, #456]	; (8001df8 <Task_4_Player+0x518>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4413      	add	r3, r2
 8001c36:	330c      	adds	r3, #12
 8001c38:	460a      	mov	r2, r1
 8001c3a:	801a      	strh	r2, [r3, #0]
 8001c3c:	e061      	b.n	8001d02 <Task_4_Player+0x422>
					}
				}else{
					Player[i].sum_point += point_plus;
 8001c3e:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <Task_4_Player+0x518>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	330c      	adds	r3, #12
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <Task_4_Player+0x520>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	b299      	uxth	r1, r3
 8001c54:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <Task_4_Player+0x518>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	460a      	mov	r2, r1
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e04e      	b.n	8001d02 <Task_4_Player+0x422>
				}

			}else{
				Player[i].point -= 1;
 8001c64:	4a64      	ldr	r2, [pc, #400]	; (8001df8 <Task_4_Player+0x518>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b299      	uxth	r1, r3
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <Task_4_Player+0x518>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3308      	adds	r3, #8
 8001c7e:	460a      	mov	r2, r1
 8001c80:	801a      	strh	r2, [r3, #0]
				if(Player[i].sum_signed){
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <Task_4_Player+0x518>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00f      	beq.n	8001cb2 <Task_4_Player+0x3d2>
					Player[i].sum_point += 1;
 8001c92:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <Task_4_Player+0x518>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <Task_4_Player+0x518>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	330c      	adds	r3, #12
 8001cac:	460a      	mov	r2, r1
 8001cae:	801a      	strh	r2, [r3, #0]
 8001cb0:	e027      	b.n	8001d02 <Task_4_Player+0x422>
				}else{
					if(Player[i].sum_point == 0){
 8001cb2:	4a51      	ldr	r2, [pc, #324]	; (8001df8 <Task_4_Player+0x518>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	330c      	adds	r3, #12
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <Task_4_Player+0x400>
						Player[i].sum_point = 1;
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <Task_4_Player+0x518>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	330c      	adds	r3, #12
 8001ccc:	2201      	movs	r2, #1
 8001cce:	801a      	strh	r2, [r3, #0]
						Player[i].sum_signed = 1;
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <Task_4_Player+0x518>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e010      	b.n	8001d02 <Task_4_Player+0x422>
					}else{
						Player[i].sum_point -= 1;
 8001ce0:	4a45      	ldr	r2, [pc, #276]	; (8001df8 <Task_4_Player+0x518>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	330c      	adds	r3, #12
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	4a41      	ldr	r2, [pc, #260]	; (8001df8 <Task_4_Player+0x518>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	4413      	add	r3, r2
 8001cf8:	330c      	adds	r3, #12
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	e000      	b.n	8001d02 <Task_4_Player+0x422>
				continue;
 8001d00:	bf00      	nop
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	3301      	adds	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	f77f af36 	ble.w	8001b7c <Task_4_Player+0x29c>
					}
				}
			}
		}
		//Send Display
		Task_Upload_Display();
 8001d10:	f000 fb1a 	bl	8002348 <Task_Upload_Display>
	}

	if(MINUS_BUT_STATE == eButtonSingleClick)
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <Task_4_Player+0x524>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	f040 80e2 	bne.w	8001ee2 <Task_4_Player+0x602>
	{
		MINUS_BUT_STATE = eButtonHoldOff;
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <Task_4_Player+0x524>)
 8001d20:	2209      	movs	r2, #9
 8001d22:	709a      	strb	r2, [r3, #2]

		//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
		turn_time_s = (int)TURN_TIME_S;
 8001d24:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <Task_4_Player+0x528>)
 8001d26:	222d      	movs	r2, #45	; 0x2d
 8001d28:	801a      	strh	r2, [r3, #0]

		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e0d2      	b.n	8001ed6 <Task_4_Player+0x5f6>
		{
			if(Player[i].point == 0)
 8001d30:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <Task_4_Player+0x518>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	3308      	adds	r3, #8
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80c6 	beq.w	8001ece <Task_4_Player+0x5ee>
				continue;

			if(i==current_player){
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <Task_4_Player+0x51c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d171      	bne.n	8001e32 <Task_4_Player+0x552>
				Player[current_player].point -= point_plus;
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <Task_4_Player+0x51c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <Task_4_Player+0x518>)
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	3308      	adds	r3, #8
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <Task_4_Player+0x520>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4926      	ldr	r1, [pc, #152]	; (8001dfc <Task_4_Player+0x51c>)
 8001d64:	7809      	ldrb	r1, [r1, #0]
 8001d66:	4608      	mov	r0, r1
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <Task_4_Player+0x518>)
 8001d6e:	0103      	lsls	r3, r0, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	3308      	adds	r3, #8
 8001d74:	460a      	mov	r2, r1
 8001d76:	801a      	strh	r2, [r3, #0]
				if(Player[i].sum_signed){
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <Task_4_Player+0x518>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	3302      	adds	r3, #2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <Task_4_Player+0x4ce>
					Player[i].sum_point += point_plus;
 8001d88:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <Task_4_Player+0x518>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	330c      	adds	r3, #12
 8001d92:	881a      	ldrh	r2, [r3, #0]
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <Task_4_Player+0x520>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <Task_4_Player+0x518>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	330c      	adds	r3, #12
 8001da8:	460a      	mov	r2, r1
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	e090      	b.n	8001ed0 <Task_4_Player+0x5f0>
				}else{
					if(point_plus > Player[i].sum_point){
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <Task_4_Player+0x520>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4910      	ldr	r1, [pc, #64]	; (8001df8 <Task_4_Player+0x518>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	440b      	add	r3, r1
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d923      	bls.n	8001e0c <Task_4_Player+0x52c>
						Player[i].sum_point = point_plus - Player[i].sum_point;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <Task_4_Player+0x520>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	490b      	ldr	r1, [pc, #44]	; (8001df8 <Task_4_Player+0x518>)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	330c      	adds	r3, #12
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <Task_4_Player+0x518>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	330c      	adds	r3, #12
 8001de4:	460a      	mov	r2, r1
 8001de6:	801a      	strh	r2, [r3, #0]
						Player[i].sum_signed = 1;
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <Task_4_Player+0x518>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	3302      	adds	r3, #2
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e06b      	b.n	8001ed0 <Task_4_Player+0x5f0>
 8001df8:	20000138 	.word	0x20000138
 8001dfc:	20000178 	.word	0x20000178
 8001e00:	20000179 	.word	0x20000179
 8001e04:	200000a8 	.word	0x200000a8
 8001e08:	2000012a 	.word	0x2000012a
					}else{
						Player[i].sum_point -= point_plus;
 8001e0c:	4a8a      	ldr	r2, [pc, #552]	; (8002038 <Task_4_Player+0x758>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	330c      	adds	r3, #12
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <Task_4_Player+0x75c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b299      	uxth	r1, r3
 8001e22:	4a85      	ldr	r2, [pc, #532]	; (8002038 <Task_4_Player+0x758>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	330c      	adds	r3, #12
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	e04e      	b.n	8001ed0 <Task_4_Player+0x5f0>
					}
				}
			} else{
				Player[i].point += 1;
 8001e32:	4a81      	ldr	r2, [pc, #516]	; (8002038 <Task_4_Player+0x758>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b299      	uxth	r1, r3
 8001e42:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <Task_4_Player+0x758>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	4413      	add	r3, r2
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	801a      	strh	r2, [r3, #0]
				if(Player[i].sum_signed){
 8001e50:	4a79      	ldr	r2, [pc, #484]	; (8002038 <Task_4_Player+0x758>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	4413      	add	r3, r2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d026      	beq.n	8001eae <Task_4_Player+0x5ce>
					if(Player[i].sum_point == 1){
 8001e60:	4a75      	ldr	r2, [pc, #468]	; (8002038 <Task_4_Player+0x758>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	330c      	adds	r3, #12
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10e      	bne.n	8001e8e <Task_4_Player+0x5ae>
						Player[i].sum_point = 0;
 8001e70:	4a71      	ldr	r2, [pc, #452]	; (8002038 <Task_4_Player+0x758>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	330c      	adds	r3, #12
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
						Player[i].sum_signed = 0;
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <Task_4_Player+0x758>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	3302      	adds	r3, #2
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e020      	b.n	8001ed0 <Task_4_Player+0x5f0>
					}else{
						Player[i].sum_point -= 1;
 8001e8e:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <Task_4_Player+0x758>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	330c      	adds	r3, #12
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b299      	uxth	r1, r3
 8001e9e:	4a66      	ldr	r2, [pc, #408]	; (8002038 <Task_4_Player+0x758>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	e010      	b.n	8001ed0 <Task_4_Player+0x5f0>
					}
				} else{
					Player[i].sum_point += 1;
 8001eae:	4a62      	ldr	r2, [pc, #392]	; (8002038 <Task_4_Player+0x758>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b299      	uxth	r1, r3
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <Task_4_Player+0x758>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	4413      	add	r3, r2
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	460a      	mov	r2, r1
 8001eca:	801a      	strh	r2, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <Task_4_Player+0x5f0>
				continue;
 8001ece:	bf00      	nop
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	f77f af29 	ble.w	8001d30 <Task_4_Player+0x450>
				}
			}
		}

		//Send Display
		Task_Upload_Display();
 8001ede:	f000 fa33 	bl	8002348 <Task_Upload_Display>
		//Check all player Point to End task -> Next match
	}

	//Next round
	if((MODE_BUT_STATE == eButtonLongPressT1) && (NEXT_BUT_STATE == eButtonSingleClick))
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <Task_4_Player+0x760>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d14d      	bne.n	8001f86 <Task_4_Player+0x6a6>
 8001eea:	4b55      	ldr	r3, [pc, #340]	; (8002040 <Task_4_Player+0x760>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	2b07      	cmp	r3, #7
 8001ef0:	d149      	bne.n	8001f86 <Task_4_Player+0x6a6>
	{
		NEXT_BUT_STATE = eButtonHoldOff;
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <Task_4_Player+0x760>)
 8001ef4:	2209      	movs	r2, #9
 8001ef6:	70da      	strb	r2, [r3, #3]
		MODE_BUT_STATE = eButtonHoldOff;
 8001ef8:	4b51      	ldr	r3, [pc, #324]	; (8002040 <Task_4_Player+0x760>)
 8001efa:	2209      	movs	r2, #9
 8001efc:	705a      	strb	r2, [r3, #1]

		current_player = 0;
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <Task_4_Player+0x764>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
		hit_get_point_cnt = 0;
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <Task_4_Player+0x768>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
		rount_time_m = (int)ROUND_TIME_M;
 8001f0a:	4b50      	ldr	r3, [pc, #320]	; (800204c <Task_4_Player+0x76c>)
 8001f0c:	221e      	movs	r2, #30
 8001f0e:	601a      	str	r2, [r3, #0]
		//while(!update_rand_addr());
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	e02a      	b.n	8001f6c <Task_4_Player+0x68c>
		{
			Player[i].ledxl_mask = 0x0F;
 8001f16:	4a48      	ldr	r2, [pc, #288]	; (8002038 <Task_4_Player+0x758>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	701a      	strb	r2, [r3, #0]
			Player[i].addr = i+1;		//How to random???
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2d9      	uxtb	r1, r3
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <Task_4_Player+0x758>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	3301      	adds	r3, #1
 8001f34:	460a      	mov	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
			Player[i].point = start_point;
 8001f38:	4b45      	ldr	r3, [pc, #276]	; (8002050 <Task_4_Player+0x770>)
 8001f3a:	8819      	ldrh	r1, [r3, #0]
 8001f3c:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <Task_4_Player+0x758>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	3308      	adds	r3, #8
 8001f46:	460a      	mov	r2, r1
 8001f48:	801a      	strh	r2, [r3, #0]
			Player[i].sum_point = 0;
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <Task_4_Player+0x758>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	330c      	adds	r3, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
			Player[i].sum_signed = 0;
 8001f58:	4a37      	ldr	r2, [pc, #220]	; (8002038 <Task_4_Player+0x758>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	3302      	adds	r3, #2
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	ddd1      	ble.n	8001f16 <Task_4_Player+0x636>
		}
		Task_led_xl(0, 0x0F);
 8001f72:	210f      	movs	r1, #15
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f9b9 	bl	80022ec <Task_led_xl>
		Task_Upload_Display();
 8001f7a:	f000 f9e5 	bl	8002348 <Task_Upload_Display>
		pTask_1st_Flag = 1;
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <Task_4_Player+0x774>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e0ac      	b.n	80020e0 <Task_4_Player+0x800>
	}
	else if(NEXT_BUT_STATE == eButtonSingleClick)
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <Task_4_Player+0x760>)
 8001f88:	78db      	ldrb	r3, [r3, #3]
 8001f8a:	2b07      	cmp	r3, #7
 8001f8c:	f040 80a8 	bne.w	80020e0 <Task_4_Player+0x800>
	{
		NEXT_BUT_STATE = eButtonHoldOff;
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <Task_4_Player+0x760>)
 8001f92:	2209      	movs	r2, #9
 8001f94:	70da      	strb	r2, [r3, #3]
		//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);

		hit_get_point_cnt = 0;
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <Task_4_Player+0x768>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	801a      	strh	r2, [r3, #0]
		turn_time_s = (int)TURN_TIME_S;
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <Task_4_Player+0x778>)
 8001f9e:	222d      	movs	r2, #45	; 0x2d
 8001fa0:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	e010      	b.n	8001fca <Task_4_Player+0x6ea>
		{
			Player[i].sum_point = 0;
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <Task_4_Player+0x758>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
			Player[i].sum_signed = 0;
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <Task_4_Player+0x758>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<MAX_PLAYER_NUM;i++)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	ddeb      	ble.n	8001fa8 <Task_4_Player+0x6c8>
		}

		for(int i=0;i<MAX_PLAYER_NUM;i++)	//Change current player to next address
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	e047      	b.n	8002066 <Task_4_Player+0x786>
		{
			if(Player[current_player].addr == 4)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <Task_4_Player+0x764>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <Task_4_Player+0x758>)
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d111      	bne.n	800200c <Task_4_Player+0x72c>
			{
				if(Player[i].addr == 1){
 8001fe8:	4a13      	ldr	r2, [pc, #76]	; (8002038 <Task_4_Player+0x758>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	4413      	add	r3, r2
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d133      	bne.n	8002060 <Task_4_Player+0x780>
					all_turn_cnt++;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <Task_4_Player+0x77c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <Task_4_Player+0x77c>)
 8002000:	6013      	str	r3, [r2, #0]
					current_player = i;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <Task_4_Player+0x764>)
 8002008:	701a      	strb	r2, [r3, #0]
					break;
 800200a:	e02f      	b.n	800206c <Task_4_Player+0x78c>
				}
			}
			else{
				if(Player[i].addr == (Player[current_player].addr+1)){
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <Task_4_Player+0x758>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	3301      	adds	r3, #1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <Task_4_Player+0x764>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4a06      	ldr	r2, [pc, #24]	; (8002038 <Task_4_Player+0x758>)
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	3301      	adds	r3, #1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4299      	cmp	r1, r3
 800202c:	d118      	bne.n	8002060 <Task_4_Player+0x780>
					current_player = i;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <Task_4_Player+0x764>)
 8002034:	701a      	strb	r2, [r3, #0]
					break;
 8002036:	e019      	b.n	800206c <Task_4_Player+0x78c>
 8002038:	20000138 	.word	0x20000138
 800203c:	20000179 	.word	0x20000179
 8002040:	200000a8 	.word	0x200000a8
 8002044:	20000178 	.word	0x20000178
 8002048:	20000134 	.word	0x20000134
 800204c:	2000012c 	.word	0x2000012c
 8002050:	20000128 	.word	0x20000128
 8002054:	20000126 	.word	0x20000126
 8002058:	2000012a 	.word	0x2000012a
 800205c:	20000018 	.word	0x20000018
		for(int i=0;i<MAX_PLAYER_NUM;i++)	//Change current player to next address
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	ddb4      	ble.n	8001fd6 <Task_4_Player+0x6f6>
				}
			}
		}
		if((hit_get_point_cnt < 100) && (all_turn_cnt < 100)){
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <Task_4_Player+0x808>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	2b63      	cmp	r3, #99	; 0x63
 8002072:	d82e      	bhi.n	80020d2 <Task_4_Player+0x7f2>
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <Task_4_Player+0x80c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b63      	cmp	r3, #99	; 0x63
 800207a:	d82a      	bhi.n	80020d2 <Task_4_Player+0x7f2>
			Led7HitCnt_Display(all_turn_cnt/10, all_turn_cnt%10, hit_get_point_cnt/10, hit_get_point_cnt%10);
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <Task_4_Player+0x80c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <Task_4_Player+0x810>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	4618      	mov	r0, r3
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <Task_4_Player+0x80c>)
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <Task_4_Player+0x810>)
 8002090:	fba3 2301 	umull	r2, r3, r3, r1
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	1aca      	subs	r2, r1, r3
 80020a0:	4614      	mov	r4, r2
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <Task_4_Player+0x808>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <Task_4_Player+0x810>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461d      	mov	r5, r3
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <Task_4_Player+0x808>)
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <Task_4_Player+0x810>)
 80020b8:	fba3 1302 	umull	r1, r3, r3, r2
 80020bc:	08d9      	lsrs	r1, r3, #3
 80020be:	460b      	mov	r3, r1
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	462a      	mov	r2, r5
 80020cc:	4621      	mov	r1, r4
 80020ce:	f7fe ff57 	bl	8000f80 <Led7HitCnt_Display>
		}
		Task_Upload_Display();
 80020d2:	f000 f939 	bl	8002348 <Task_Upload_Display>
		pTask_1st_Flag = 1;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <Task_4_Player+0x814>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e000      	b.n	80020e0 <Task_4_Player+0x800>
		return;
 80020de:	bf00      	nop
	}
}
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bdb0      	pop	{r4, r5, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000134 	.word	0x20000134
 80020ec:	20000018 	.word	0x20000018
 80020f0:	cccccccd 	.word	0xcccccccd
 80020f4:	20000126 	.word	0x20000126

080020f8 <Task_500ms>:

void Task_500ms(void)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	if(Task2_Flag == 0)
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <Task_500ms+0x1a0>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80c6 	beq.w	8002294 <Task_500ms+0x19c>
		return;
	Task2_Flag = 0;
 8002108:	4b63      	ldr	r3, [pc, #396]	; (8002298 <Task_500ms+0x1a0>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

	temp_s++;
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <Task_500ms+0x1a4>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b61      	ldr	r3, [pc, #388]	; (800229c <Task_500ms+0x1a4>)
 8002118:	801a      	strh	r2, [r3, #0]

	if(temp_s>=120){
 800211a:	4b60      	ldr	r3, [pc, #384]	; (800229c <Task_500ms+0x1a4>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	2b77      	cmp	r3, #119	; 0x77
 8002120:	d94b      	bls.n	80021ba <Task_500ms+0xc2>
		temp_s = 0;
 8002122:	4b5e      	ldr	r3, [pc, #376]	; (800229c <Task_500ms+0x1a4>)
 8002124:	2200      	movs	r2, #0
 8002126:	801a      	strh	r2, [r3, #0]

		if(rount_time_m>0)
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <Task_500ms+0x1a8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <Task_500ms+0x42>
			rount_time_m--;
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <Task_500ms+0x1a8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <Task_500ms+0x1a8>)
 8002138:	6013      	str	r3, [r2, #0]

		Led7RoundTime_Display((rount_time_m/60)/10, (rount_time_m/60)%10, (rount_time_m%60)/10, (rount_time_m%60)%10);
 800213a:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <Task_500ms+0x1a8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a59      	ldr	r2, [pc, #356]	; (80022a4 <Task_500ms+0x1ac>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	4618      	mov	r0, r3
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <Task_500ms+0x1a8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <Task_500ms+0x1b0>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0959      	lsrs	r1, r3, #5
 8002154:	4b55      	ldr	r3, [pc, #340]	; (80022ac <Task_500ms+0x1b4>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	1aca      	subs	r2, r1, r3
 8002166:	4614      	mov	r4, r2
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <Task_500ms+0x1a8>)
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <Task_500ms+0x1b0>)
 800216e:	fba3 2301 	umull	r2, r3, r3, r1
 8002172:	095a      	lsrs	r2, r3, #5
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	1aca      	subs	r2, r1, r3
 800217e:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <Task_500ms+0x1b4>)
 8002180:	fba3 2302 	umull	r2, r3, r3, r2
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	461d      	mov	r5, r3
 8002188:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <Task_500ms+0x1a8>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <Task_500ms+0x1b0>)
 800218e:	fba3 2301 	umull	r2, r3, r3, r1
 8002192:	095a      	lsrs	r2, r3, #5
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	1aca      	subs	r2, r1, r3
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <Task_500ms+0x1b4>)
 80021a0:	fba3 1302 	umull	r1, r3, r3, r2
 80021a4:	08d9      	lsrs	r1, r3, #3
 80021a6:	460b      	mov	r3, r1
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	1ad1      	subs	r1, r2, r3
 80021b0:	460b      	mov	r3, r1
 80021b2:	462a      	mov	r2, r5
 80021b4:	4621      	mov	r1, r4
 80021b6:	f7fe ff53 	bl	8001060 <Led7RoundTime_Display>
	}

	if(turn_time_s > 0)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <Task_500ms+0x1b8>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d069      	beq.n	8002296 <Task_500ms+0x19e>
	{
		if((temp_s%2) == 0)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <Task_500ms+0x1a4>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d162      	bne.n	8002296 <Task_500ms+0x19e>
		{
			turn_time_s--;
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <Task_500ms+0x1b8>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <Task_500ms+0x1b8>)
 80021da:	801a      	strh	r2, [r3, #0]

			if(turn_time_s>=16){
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <Task_500ms+0x1b8>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d919      	bls.n	8002218 <Task_500ms+0x120>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, 8);
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <Task_500ms+0x1b8>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	4a30      	ldr	r2, [pc, #192]	; (80022ac <Task_500ms+0x1b4>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <Task_500ms+0x1b8>)
 80021f6:	881a      	ldrh	r2, [r3, #0]
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <Task_500ms+0x1b4>)
 80021fa:	fba3 1302 	umull	r1, r3, r3, r2
 80021fe:	08d9      	lsrs	r1, r3, #3
 8002200:	460b      	mov	r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	2308      	movs	r3, #8
 8002210:	2208      	movs	r2, #8
 8002212:	f7fe fe41 	bl	8000e98 <Led7TurnTime_Display>
 8002216:	e03e      	b.n	8002296 <Task_500ms+0x19e>
			}
			else if(turn_time_s>7){
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <Task_500ms+0x1b8>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d91c      	bls.n	800225a <Task_500ms+0x162>
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, 8, (turn_time_s%8));
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <Task_500ms+0x1b8>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <Task_500ms+0x1b4>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <Task_500ms+0x1b8>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <Task_500ms+0x1b4>)
 8002236:	fba3 1302 	umull	r1, r3, r3, r2
 800223a:	08d9      	lsrs	r1, r3, #3
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <Task_500ms+0x1b8>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	2208      	movs	r2, #8
 8002254:	f7fe fe20 	bl	8000e98 <Led7TurnTime_Display>
 8002258:	e01d      	b.n	8002296 <Task_500ms+0x19e>
				//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
			}
			else{
				Led7TurnTime_Display(turn_time_s/10, turn_time_s%10, turn_time_s%8, 0);
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <Task_500ms+0x1b8>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <Task_500ms+0x1b4>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <Task_500ms+0x1b8>)
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <Task_500ms+0x1b4>)
 8002270:	fba3 1302 	umull	r1, r3, r3, r2
 8002274:	08d9      	lsrs	r1, r3, #3
 8002276:	460b      	mov	r3, r1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <Task_500ms+0x1b8>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f003 0207 	and.w	r2, r3, #7
 800228c:	2300      	movs	r3, #0
 800228e:	f7fe fe03 	bl	8000e98 <Led7TurnTime_Display>
 8002292:	e000      	b.n	8002296 <Task_500ms+0x19e>
		return;
 8002294:	bf00      	nop
		}
		else if(turn_time_s < 16){
			//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
		}
	}
}
 8002296:	bdb0      	pop	{r4, r5, r7, pc}
 8002298:	20000125 	.word	0x20000125
 800229c:	2000017a 	.word	0x2000017a
 80022a0:	2000012c 	.word	0x2000012c
 80022a4:	1b4e81b5 	.word	0x1b4e81b5
 80022a8:	88888889 	.word	0x88888889
 80022ac:	cccccccd 	.word	0xcccccccd
 80022b0:	2000012a 	.word	0x2000012a

080022b4 <Task_Clear_Display>:

void Task_Clear_Display(uint8_t addr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
	printf("ADDR%d%dEEEEEEEEEEEEEEEE\n", (int)addr, (int)DATA_LED7_TYPE);
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <Task_Clear_Display+0x30>)
 80022c6:	f002 fee3 	bl	8005090 <iprintf>
	printf("ADDR%d%d\n", (int)addr, (int)UPDATE_LED7_TYPE);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <Task_Clear_Display+0x34>)
 80022d2:	f002 fedd 	bl	8005090 <iprintf>
	delay_ms(200);
 80022d6:	20c8      	movs	r0, #200	; 0xc8
 80022d8:	f000 f8ca 	bl	8002470 <delay_ms>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	080060bc 	.word	0x080060bc
 80022e8:	080060d8 	.word	0x080060d8

080022ec <Task_led_xl>:

void Task_led_xl(uint8_t addr, uint8_t state)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
	printf("ADDR%d%d%c\n", addr, DATA_LEDXL_TYPE, (int)state+48);
 80022fc:	79f9      	ldrb	r1, [r7, #7]
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	3330      	adds	r3, #48	; 0x30
 8002302:	2203      	movs	r2, #3
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <Task_led_xl+0x28>)
 8002306:	f002 fec3 	bl	8005090 <iprintf>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	080060e4 	.word	0x080060e4

08002318 <Task_Blink_Line>:

void Task_Blink_Line(uint8_t addr, uint8_t state, uint8_t line)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af02      	add	r7, sp, #8
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	460b      	mov	r3, r1
 8002324:	71bb      	strb	r3, [r7, #6]
 8002326:	4613      	mov	r3, r2
 8002328:	717b      	strb	r3, [r7, #5]
	printf("ADDR%d%d%d%d\n", (int)addr, (int)UPDATE_BLINK_STATE, (int)state, (int)line);
 800232a:	79f9      	ldrb	r1, [r7, #7]
 800232c:	79ba      	ldrb	r2, [r7, #6]
 800232e:	797b      	ldrb	r3, [r7, #5]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	2204      	movs	r2, #4
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <Task_Blink_Line+0x2c>)
 8002338:	f002 feaa 	bl	8005090 <iprintf>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	080060f0 	.word	0x080060f0

08002348 <Task_Upload_Display>:

/* Private function -----------------------------------------------*/
static void Task_Upload_Display(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_PLAYER_NUM;i++)
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	e007      	b.n	8002364 <Task_Upload_Display+0x1c>
	{
		update_led7_data(i);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f813 	bl	8002384 <update_led7_data>
	for(int i=0;i<MAX_PLAYER_NUM;i++)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b03      	cmp	r3, #3
 8002368:	ddf4      	ble.n	8002354 <Task_Upload_Display+0xc>
	}
	printf("ADDR02\n");
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <Task_Upload_Display+0x38>)
 800236c:	f002 ff16 	bl	800519c <puts>
	delay_ms(200);
 8002370:	20c8      	movs	r0, #200	; 0xc8
 8002372:	f000 f87d 	bl	8002470 <delay_ms>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	08006100 	.word	0x08006100

08002384 <update_led7_data>:

static void update_led7_data(uint8_t player_num)
{
 8002384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002388:	b088      	sub	sp, #32
 800238a:	af06      	add	r7, sp, #24
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
			(int)Player[player_num].addr,
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4a23      	ldr	r2, [pc, #140]	; (8002420 <update_led7_data+0x9c>)
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	3301      	adds	r3, #1
 800239a:	781b      	ldrb	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 800239c:	4698      	mov	r8, r3
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	1c5c      	adds	r4, r3, #1
			(int)DATA_LED7_TYPE,
			(int)(player_num+1),
			(int)Player[player_num].point,
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <update_led7_data+0x9c>)
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	3308      	adds	r3, #8
 80023ac:	881b      	ldrh	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80023ae:	461d      	mov	r5, r3
			(int)(Player[player_num].average*100),
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <update_led7_data+0x9c>)
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4919      	ldr	r1, [pc, #100]	; (8002424 <update_led7_data+0xa0>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fa18 	bl	80007f4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fb64 	bl	8000a94 <__aeabi_f2iz>
 80023cc:	4601      	mov	r1, r0
			(int)Player[player_num].max_hit_get_point,
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4a13      	ldr	r2, [pc, #76]	; (8002420 <update_led7_data+0x9c>)
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	330a      	adds	r3, #10
 80023d8:	881b      	ldrh	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80023da:	461e      	mov	r6, r3
			Player[player_num].sum_signed==0?'E':'D',
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <update_led7_data+0x9c>)
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	3302      	adds	r3, #2
 80023e6:	781b      	ldrb	r3, [r3, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <update_led7_data+0x6c>
 80023ec:	2345      	movs	r3, #69	; 0x45
 80023ee:	e000      	b.n	80023f2 <update_led7_data+0x6e>
 80023f0:	2344      	movs	r3, #68	; 0x44
			(int)Player[player_num].sum_point);
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	480a      	ldr	r0, [pc, #40]	; (8002420 <update_led7_data+0x9c>)
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	4402      	add	r2, r0
 80023fa:	320c      	adds	r2, #12
 80023fc:	8812      	ldrh	r2, [r2, #0]
	printf("ADDR%d%dEE%dE%03d%04d%02d%c%02d\n",
 80023fe:	9204      	str	r2, [sp, #16]
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	9602      	str	r6, [sp, #8]
 8002404:	9101      	str	r1, [sp, #4]
 8002406:	9500      	str	r5, [sp, #0]
 8002408:	4623      	mov	r3, r4
 800240a:	2201      	movs	r2, #1
 800240c:	4641      	mov	r1, r8
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <update_led7_data+0xa4>)
 8002410:	f002 fe3e 	bl	8005090 <iprintf>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800241e:	bf00      	nop
 8002420:	20000138 	.word	0x20000138
 8002424:	42c80000 	.word	0x42c80000
 8002428:	08006108 	.word	0x08006108

0800242c <get_player_available>:

static uint8_t get_player_available(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
	uint8_t player = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<MAX_PLAYER_NUM;i++)
 8002436:	2300      	movs	r3, #0
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	e00d      	b.n	8002458 <get_player_available+0x2c>
	{
		if(Player[i].point > 0){
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <get_player_available+0x40>)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	4413      	add	r3, r2
 8002444:	3308      	adds	r3, #8
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <get_player_available+0x26>
			player++;
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	3301      	adds	r3, #1
 8002450:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<MAX_PLAYER_NUM;i++)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b03      	cmp	r3, #3
 800245c:	ddee      	ble.n	800243c <get_player_available+0x10>
		}
	}
	return player;
 800245e:	79fb      	ldrb	r3, [r7, #7]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000138 	.word	0x20000138

08002470 <delay_ms>:
//	}
//
//}

static void delay_ms(unsigned int x)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	static unsigned long uDelay = 0;
	uDelay = x;
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <delay_ms+0x38>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
	bFlagDelay = 1;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <delay_ms+0x3c>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
	uCountDelay = 0;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <delay_ms+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
	while(uCountDelay<=uDelay)
 800248a:	bf00      	nop
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <delay_ms+0x40>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <delay_ms+0x38>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d9f9      	bls.n	800248c <delay_ms+0x1c>
	{

	}
	bFlagDelay = 0;
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <delay_ms+0x3c>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	2000017c 	.word	0x2000017c
 80024ac:	2000011c 	.word	0x2000011c
 80024b0:	20000120 	.word	0x20000120

080024b4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80024bc:	1d39      	adds	r1, r7, #4
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	2201      	movs	r2, #1
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <__io_putchar+0x20>)
 80024c6:	f002 f916 	bl	80046f6 <HAL_UART_Transmit>
  return ch;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000020c 	.word	0x2000020c

080024d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024dc:	f000 fcb4 	bl	8002e48 <HAL_Init>

  /* USER CODE BEGIN Init */
  vButtonIO_Init();
 80024e0:	f7fe fafe 	bl	8000ae0 <vButtonIO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e4:	f000 f8ea 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e8:	f000 f9c4 	bl	8002874 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80024ec:	f000 f96e 	bl	80027cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80024f0:	f000 f996 	bl	8002820 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80024f4:	f000 f91e 	bl	8002734 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //printf("Start up %02d!", (int)2);

  HAL_TIM_Base_Start_IT(&htim2);
 80024f8:	486b      	ldr	r0, [pc, #428]	; (80026a8 <main+0x1d0>)
 80024fa:	f001 fcfb 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 switch(eUserTask_State)
 80024fe:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <main+0x1d4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d8fb      	bhi.n	80024fe <main+0x26>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <main+0x34>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002589 	.word	0x08002589
 8002514:	0800262b 	.word	0x0800262b
 8002518:	08002671 	.word	0x08002671
	 {
		 case E_STATE_STARTUP:
		 {
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 800251c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002520:	4863      	ldr	r0, [pc, #396]	; (80026b0 <main+0x1d8>)
 8002522:	f001 f864 	bl	80035ee <HAL_GPIO_TogglePin>
			 //Send data ON LXL
			 Task_led_xl(0, 0x00);
 8002526:	2100      	movs	r1, #0
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff fedf 	bl	80022ec <Task_led_xl>
			 Task_Clear_Display(0);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff fec0 	bl	80022b4 <Task_Clear_Display>

			 Led7TurnTime_Display(10, 10, 0, 0);
 8002534:	2300      	movs	r3, #0
 8002536:	2200      	movs	r2, #0
 8002538:	210a      	movs	r1, #10
 800253a:	200a      	movs	r0, #10
 800253c:	f7fe fcac 	bl	8000e98 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 8002540:	230a      	movs	r3, #10
 8002542:	220a      	movs	r2, #10
 8002544:	210a      	movs	r1, #10
 8002546:	200a      	movs	r0, #10
 8002548:	f7fe fd1a 	bl	8000f80 <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10);
 800254c:	230a      	movs	r3, #10
 800254e:	220a      	movs	r2, #10
 8002550:	210a      	movs	r1, #10
 8002552:	200a      	movs	r0, #10
 8002554:	f7fe fd84 	bl	8001060 <Led7RoundTime_Display>

			 while(1)
			 {
				 if(BUT_NEW_STA_FLAG)
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <main+0x1dc>)
 800255a:	7c1b      	ldrb	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <main+0xa2>
				 {
					 BUT_NEW_STA_FLAG = 0;
 8002560:	4b54      	ldr	r3, [pc, #336]	; (80026b4 <main+0x1dc>)
 8002562:	2200      	movs	r2, #0
 8002564:	741a      	strb	r2, [r3, #16]

					 if(POWER_BUT_STATE == eButtonLongPressT2)		//POWER ON
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <main+0x1dc>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d105      	bne.n	800257a <main+0xa2>
					 {
						POWER_BUT_STATE = eButtonHoldOff;
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <main+0x1dc>)
 8002570:	2209      	movs	r2, #9
 8002572:	701a      	strb	r2, [r3, #0]
						eUserTask_State = E_STATE_POWER_ON;
 8002574:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <main+0x1d4>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
//					 {
//						 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
//						 MODE_BUT_STATE = eButtonHoldOff;
//					 }
				 }
				 if(eUserTask_State!=E_STATE_STARTUP){
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <main+0x1d4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <main+0xac>
				 if(BUT_NEW_STA_FLAG)
 8002582:	e7e9      	b.n	8002558 <main+0x80>
					 break;
 8002584:	bf00      	nop
				 }
			 }
			 break;
 8002586:	e08d      	b.n	80026a4 <main+0x1cc>
		 }

		 case E_STATE_POWER_ON:
		 {
			 Led7TurnTime_Display(10, 10, 0, 0);
 8002588:	2300      	movs	r3, #0
 800258a:	2200      	movs	r2, #0
 800258c:	210a      	movs	r1, #10
 800258e:	200a      	movs	r0, #10
 8002590:	f7fe fc82 	bl	8000e98 <Led7TurnTime_Display>
			 Led7HitCnt_Display(10, 10, 10, 10);
 8002594:	230a      	movs	r3, #10
 8002596:	220a      	movs	r2, #10
 8002598:	210a      	movs	r1, #10
 800259a:	200a      	movs	r0, #10
 800259c:	f7fe fcf0 	bl	8000f80 <Led7HitCnt_Display>
			 Led7RoundTime_Display(10, 10, 10, 10);
 80025a0:	230a      	movs	r3, #10
 80025a2:	220a      	movs	r2, #10
 80025a4:	210a      	movs	r1, #10
 80025a6:	200a      	movs	r0, #10
 80025a8:	f7fe fd5a 	bl	8001060 <Led7RoundTime_Display>
			 //Send data ON LXL
			 Task_Clear_Display(0);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff fe81 	bl	80022b4 <Task_Clear_Display>
			 Task_led_xl(0, 0x08);
 80025b2:	2108      	movs	r1, #8
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fe99 	bl	80022ec <Task_led_xl>
			 Task_Blink_Line(0, 0, 1);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2100      	movs	r1, #0
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff feaa 	bl	8002318 <Task_Blink_Line>
			 HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 80025c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c8:	4839      	ldr	r0, [pc, #228]	; (80026b0 <main+0x1d8>)
 80025ca:	f001 f810 	bl	80035ee <HAL_GPIO_TogglePin>
			 while(1)
			 {
				 if(BUT_NEW_STA_FLAG)
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <main+0x1dc>)
 80025d0:	7c1b      	ldrb	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d022      	beq.n	800261c <main+0x144>
				 {
					 BUT_NEW_STA_FLAG = 0;
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <main+0x1dc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	741a      	strb	r2, [r3, #16]
					 if(POWER_BUT_STATE == eButtonSingleClick)			//START
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <main+0x1dc>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b07      	cmp	r3, #7
 80025e2:	d106      	bne.n	80025f2 <main+0x11a>
					 {
						 POWER_BUT_STATE = eButtonHoldOff;
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <main+0x1dc>)
 80025e6:	2209      	movs	r2, #9
 80025e8:	701a      	strb	r2, [r3, #0]
						 eUserTask_State = E_STATE_PLAYING;
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <main+0x1d4>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e014      	b.n	800261c <main+0x144>
					 }
					 else if(POWER_BUT_STATE == eButtonLongPressT2)		//POWER OFF
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <main+0x1dc>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d106      	bne.n	8002608 <main+0x130>
					 {
						 POWER_BUT_STATE = eButtonHoldOff;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <main+0x1dc>)
 80025fc:	2209      	movs	r2, #9
 80025fe:	701a      	strb	r2, [r3, #0]
						 eUserTask_State = E_STATE_STARTUP;
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <main+0x1d4>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e009      	b.n	800261c <main+0x144>
					 }
					 else if(MODE_BUT_STATE == eButtonSingleClick)		//MODE
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <main+0x1dc>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d105      	bne.n	800261c <main+0x144>
					 {
						 MODE_BUT_STATE = eButtonHoldOff;
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <main+0x1dc>)
 8002612:	2209      	movs	r2, #9
 8002614:	705a      	strb	r2, [r3, #1]
						 eUserTask_State = E_STATE_CFG_MODE;
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <main+0x1d4>)
 8002618:	2203      	movs	r2, #3
 800261a:	701a      	strb	r2, [r3, #0]
					 }
				 }

				 if(eUserTask_State!=E_STATE_POWER_ON)
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <main+0x1d4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d100      	bne.n	8002626 <main+0x14e>
				 if(BUT_NEW_STA_FLAG)
 8002624:	e7d3      	b.n	80025ce <main+0xf6>
					 break;
 8002626:	bf00      	nop
			 }
			 break;
 8002628:	e03c      	b.n	80026a4 <main+0x1cc>
		 }

		 case E_STATE_PLAYING:
		 {
			 HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800262a:	2108      	movs	r1, #8
 800262c:	4822      	ldr	r0, [pc, #136]	; (80026b8 <main+0x1e0>)
 800262e:	f000 ffde 	bl	80035ee <HAL_GPIO_TogglePin>
			 Task_User_Init(4);
 8002632:	2004      	movs	r0, #4
 8002634:	f7ff f848 	bl	80016c8 <Task_User_Init>
			 while(1)
			 {
				Task_4_Player();
 8002638:	f7ff f952 	bl	80018e0 <Task_4_Player>
				Task_500ms();
 800263c:	f7ff fd5c 	bl	80020f8 <Task_500ms>
				if((MODE_BUT_STATE == eButtonLongPressT1) && (POWER_BUT_STATE == eButtonSingleClick))
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <main+0x1dc>)
 8002642:	785b      	ldrb	r3, [r3, #1]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d10c      	bne.n	8002662 <main+0x18a>
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <main+0x1dc>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d108      	bne.n	8002662 <main+0x18a>
				{
					NEXT_BUT_STATE = eButtonHoldOff;
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <main+0x1dc>)
 8002652:	2209      	movs	r2, #9
 8002654:	70da      	strb	r2, [r3, #3]
					MODE_BUT_STATE = eButtonHoldOff;
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <main+0x1dc>)
 8002658:	2209      	movs	r2, #9
 800265a:	705a      	strb	r2, [r3, #1]


					eUserTask_State = E_STATE_POWER_ON;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <main+0x1d4>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
				}

				if(eUserTask_State!=E_STATE_PLAYING)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <main+0x1d4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d100      	bne.n	800266c <main+0x194>
				Task_4_Player();
 800266a:	e7e5      	b.n	8002638 <main+0x160>
					break;
 800266c:	bf00      	nop
			 }
			 break;
 800266e:	e019      	b.n	80026a4 <main+0x1cc>
		 }
		 case E_STATE_CFG_MODE:
		 {
			 while(1)
			 {
				 Task_Mode_Cfg();
 8002670:	f7ff f823 	bl	80016ba <Task_Mode_Cfg>
				 if((MODE_BUT_STATE == eButtonLongPressT1) && (POWER_BUT_STATE == eButtonSingleClick))
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <main+0x1dc>)
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d10c      	bne.n	8002696 <main+0x1be>
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <main+0x1dc>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b07      	cmp	r3, #7
 8002682:	d108      	bne.n	8002696 <main+0x1be>
				 {
					NEXT_BUT_STATE = eButtonHoldOff;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <main+0x1dc>)
 8002686:	2209      	movs	r2, #9
 8002688:	70da      	strb	r2, [r3, #3]
					MODE_BUT_STATE = eButtonHoldOff;
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <main+0x1dc>)
 800268c:	2209      	movs	r2, #9
 800268e:	705a      	strb	r2, [r3, #1]

					eUserTask_State = E_STATE_POWER_ON;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <main+0x1d4>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
				 }
				 if(eUserTask_State!=E_STATE_CFG_MODE)
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <main+0x1d4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d100      	bne.n	80026a0 <main+0x1c8>
				 Task_Mode_Cfg();
 800269e:	e7e7      	b.n	8002670 <main+0x198>
					break;
 80026a0:	bf00      	nop
			 }
			 break;
 80026a2:	bf00      	nop
	 switch(eUserTask_State)
 80026a4:	e72b      	b.n	80024fe <main+0x26>
 80026a6:	bf00      	nop
 80026a8:	20000180 	.word	0x20000180
 80026ac:	20000250 	.word	0x20000250
 80026b0:	40010800 	.word	0x40010800
 80026b4:	200000a8 	.word	0x200000a8
 80026b8:	40010c00 	.word	0x40010c00

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b090      	sub	sp, #64	; 0x40
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0318 	add.w	r3, r7, #24
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fcd8 	bl	8005080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e2:	2301      	movs	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e6:	2310      	movs	r3, #16
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	f107 0318 	add.w	r3, r7, #24
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 ff94 	bl	8003620 <HAL_RCC_OscConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80026fe:	f000 f91b 	bl	8002938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002702:	230f      	movs	r3, #15
 8002704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fa02 	bl	8003b24 <HAL_RCC_ClockConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002726:	f000 f907 	bl	8002938 <Error_Handler>
  }
}
 800272a:	bf00      	nop
 800272c:	3740      	adds	r7, #64	; 0x40
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	463b      	mov	r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_TIM2_Init+0x94>)
 8002752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_TIM2_Init+0x94>)
 800275a:	224f      	movs	r2, #79	; 0x4f
 800275c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_TIM2_Init+0x94>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_TIM2_Init+0x94>)
 8002766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800276a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MX_TIM2_Init+0x94>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_TIM2_Init+0x94>)
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <MX_TIM2_Init+0x94>)
 800277a:	f001 fb6b 	bl	8003e54 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002784:	f000 f8d8 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278e:	f107 0308 	add.w	r3, r7, #8
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_TIM2_Init+0x94>)
 8002796:	f001 fd07 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027a0:	f000 f8ca 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ac:	463b      	mov	r3, r7
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_TIM2_Init+0x94>)
 80027b2:	f001 fee3 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027bc:	f000 f8bc 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000180 	.word	0x20000180

080027cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <MX_USART1_UART_Init+0x50>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USART1_UART_Init+0x4c>)
 8002804:	f001 ff2a 	bl	800465c <HAL_UART_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800280e:	f000 f893 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001c8 	.word	0x200001c8
 800281c:	40013800 	.word	0x40013800

08002820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_USART3_UART_Init+0x50>)
 8002828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_USART3_UART_Init+0x4c>)
 800282c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_USART3_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002846:	220c      	movs	r2, #12
 8002848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_USART3_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART3_UART_Init+0x4c>)
 8002858:	f001 ff00 	bl	800465c <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002862:	f000 f869 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000020c 	.word	0x2000020c
 8002870:	40004800 	.word	0x40004800

08002874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	4b28      	ldr	r3, [pc, #160]	; (800292c <MX_GPIO_Init+0xb8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <MX_GPIO_Init+0xb8>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <MX_GPIO_Init+0xb8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <MX_GPIO_Init+0xb8>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <MX_GPIO_Init+0xb8>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <MX_GPIO_Init+0xb8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO1_Pin|IO2_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80028be:	481c      	ldr	r0, [pc, #112]	; (8002930 <MX_GPIO_Init+0xbc>)
 80028c0:	f000 fe7d 	bl	80035be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 80028c4:	2200      	movs	r2, #0
 80028c6:	f24f 1118 	movw	r1, #61720	; 0xf118
 80028ca:	481a      	ldr	r0, [pc, #104]	; (8002934 <MX_GPIO_Init+0xc0>)
 80028cc:	f000 fe77 	bl	80035be <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IO1_Pin IO2_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = IO1_Pin|IO2_Pin|LED_Y_Pin;
 80028d0:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80028d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2302      	movs	r3, #2
 80028e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	4811      	ldr	r0, [pc, #68]	; (8002930 <MX_GPIO_Init+0xbc>)
 80028ea:	f000 fccd 	bl	8003288 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin
                           BTN_5_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin
 80028ee:	23e3      	movs	r3, #227	; 0xe3
 80028f0:	60bb      	str	r3, [r7, #8]
                          |BTN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028f6:	2302      	movs	r3, #2
 80028f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	f107 0308 	add.w	r3, r7, #8
 80028fe:	4619      	mov	r1, r3
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <MX_GPIO_Init+0xc0>)
 8002902:	f000 fcc1 	bl	8003288 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_1_Pin DIO_1_Pin CLK_2_Pin DIO_2_Pin
                           LED_R_Pin LED_G_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = CLK_1_Pin|DIO_1_Pin|CLK_2_Pin|DIO_2_Pin
 8002906:	f24f 1318 	movw	r3, #61720	; 0xf118
 800290a:	60bb      	str	r3, [r7, #8]
                          |LED_R_Pin|LED_G_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	4619      	mov	r1, r3
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_GPIO_Init+0xc0>)
 8002920:	f000 fcb2 	bl	8003288 <HAL_GPIO_Init>

}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	40010800 	.word	0x40010800
 8002934:	40010c00 	.word	0x40010c00

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	e7fe      	b.n	8002940 <Error_Handler+0x8>
	...

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_MspInit+0x5c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6193      	str	r3, [r2, #24]
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_MspInit+0x5c>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_MspInit+0x5c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_MspInit+0x5c>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_MspInit+0x60>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_MspInit+0x60>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000

080029a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d113      	bne.n	80029e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_TIM_Base_MspInit+0x44>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_TIM_Base_MspInit+0x44>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	61d3      	str	r3, [r2, #28]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_TIM_Base_MspInit+0x44>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	201c      	movs	r0, #28
 80029d8:	f000 fb6f 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029dc:	201c      	movs	r0, #28
 80029de:	f000 fb88 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <HAL_UART_MspInit+0x11c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d13a      	bne.n	8002a86 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4a3e      	ldr	r2, [pc, #248]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1a:	6193      	str	r3, [r2, #24]
 8002a1c:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	4619      	mov	r1, r3
 8002a54:	482f      	ldr	r0, [pc, #188]	; (8002b14 <HAL_UART_MspInit+0x124>)
 8002a56:	f000 fc17 	bl	8003288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0318 	add.w	r3, r7, #24
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4829      	ldr	r0, [pc, #164]	; (8002b14 <HAL_UART_MspInit+0x124>)
 8002a70:	f000 fc0a 	bl	8003288 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2025      	movs	r0, #37	; 0x25
 8002a7a:	f000 fb1e 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a7e:	2025      	movs	r0, #37	; 0x25
 8002a80:	f000 fb37 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a84:	e03e      	b.n	8002b04 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_UART_MspInit+0x128>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d139      	bne.n	8002b04 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_UART_MspInit+0x120>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0318 	add.w	r3, r7, #24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4811      	ldr	r0, [pc, #68]	; (8002b1c <HAL_UART_MspInit+0x12c>)
 8002ad6:	f000 fbd7 	bl	8003288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	4619      	mov	r1, r3
 8002aee:	480b      	ldr	r0, [pc, #44]	; (8002b1c <HAL_UART_MspInit+0x12c>)
 8002af0:	f000 fbca 	bl	8003288 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2027      	movs	r0, #39	; 0x27
 8002afa:	f000 fade 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002afe:	2027      	movs	r0, #39	; 0x27
 8002b00:	f000 faf7 	bl	80030f2 <HAL_NVIC_EnableIRQ>
}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40010c00 	.word	0x40010c00

08002b20 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sys_millis++;
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b30:	801a      	strh	r2, [r3, #0]
	if(bFlagDelay==1)
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <SysTick_Handler+0x98>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <SysTick_Handler+0x28>
		uCountDelay++;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <SysTick_Handler+0x9c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <SysTick_Handler+0x9c>)
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e002      	b.n	8002b4e <SysTick_Handler+0x2e>
	else
		uCountDelay=0;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <SysTick_Handler+0x9c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

	if(sys_millis==10000)	sys_millis = 0;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <SysTick_Handler+0x42>
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	801a      	strh	r2, [r3, #0]
	if(sys_millis%TASK1 == 0)	Task1_Flag = 1;
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <SysTick_Handler+0xa0>)
 8002b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6e:	08d9      	lsrs	r1, r3, #3
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <SysTick_Handler+0x66>
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <SysTick_Handler+0xa4>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
	if(sys_millis%TASK2 == 0)	Task2_Flag = 1;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <SysTick_Handler+0x94>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <SysTick_Handler+0xa8>)
 8002b8e:	fba2 1203 	umull	r1, r2, r2, r3
 8002b92:	0992      	lsrs	r2, r2, #6
 8002b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b98:	fb01 f202 	mul.w	r2, r1, r2
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <SysTick_Handler+0x8a>
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <SysTick_Handler+0xac>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002baa:	f000 f993 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000011a 	.word	0x2000011a
 8002bb8:	2000011c 	.word	0x2000011c
 8002bbc:	20000120 	.word	0x20000120
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	20000124 	.word	0x20000124
 8002bc8:	10624dd3 	.word	0x10624dd3
 8002bcc:	20000125 	.word	0x20000125

08002bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	vGetIOButtonValue(eButton1, HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin), &strOld_Button_Value, &strIO_Button_Value);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4828      	ldr	r0, [pc, #160]	; (8002c78 <TIM2_IRQHandler+0xa8>)
 8002bd8:	f000 fcda 	bl	8003590 <HAL_GPIO_ReadPin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002be2:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd ff9f 	bl	8000b28 <vGetIOButtonValue>
	vGetIOButtonValue(eButton2, HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin), &strOld_Button_Value, &strIO_Button_Value);
 8002bea:	2102      	movs	r1, #2
 8002bec:	4822      	ldr	r0, [pc, #136]	; (8002c78 <TIM2_IRQHandler+0xa8>)
 8002bee:	f000 fccf 	bl	8003590 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7fd ff94 	bl	8000b28 <vGetIOButtonValue>
	vGetIOButtonValue(eButton3, HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin), &strOld_Button_Value, &strIO_Button_Value);
 8002c00:	2120      	movs	r1, #32
 8002c02:	481d      	ldr	r0, [pc, #116]	; (8002c78 <TIM2_IRQHandler+0xa8>)
 8002c04:	f000 fcc4 	bl	8003590 <HAL_GPIO_ReadPin>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002c10:	2002      	movs	r0, #2
 8002c12:	f7fd ff89 	bl	8000b28 <vGetIOButtonValue>
	vGetIOButtonValue(eButton4, HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin), &strOld_Button_Value, &strIO_Button_Value);
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	4817      	ldr	r0, [pc, #92]	; (8002c78 <TIM2_IRQHandler+0xa8>)
 8002c1a:	f000 fcb9 	bl	8003590 <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4619      	mov	r1, r3
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c24:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002c26:	2003      	movs	r0, #3
 8002c28:	f7fd ff7e 	bl	8000b28 <vGetIOButtonValue>
	vGetIOButtonValue(eButton5, HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin), &strOld_Button_Value, &strIO_Button_Value);
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	4812      	ldr	r0, [pc, #72]	; (8002c78 <TIM2_IRQHandler+0xa8>)
 8002c30:	f000 fcae 	bl	8003590 <HAL_GPIO_ReadPin>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002c3c:	2004      	movs	r0, #4
 8002c3e:	f7fd ff73 	bl	8000b28 <vGetIOButtonValue>
	if(memcmp(strOld_Button_Value.bButtonState, strIO_Button_Value.bButtonState, NUMBER_IO_BUTTON_USE))
 8002c42:	2205      	movs	r2, #5
 8002c44:	490d      	ldr	r1, [pc, #52]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c46:	480e      	ldr	r0, [pc, #56]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002c48:	f002 fa0a 	bl	8005060 <memcmp>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <TIM2_IRQHandler+0x96>
	{
		memcpy(strOld_Button_Value.bButtonState, strIO_Button_Value.bButtonState, NUMBER_IO_BUTTON_USE);
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <TIM2_IRQHandler+0xb0>)
 8002c54:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	6019      	str	r1, [r3, #0]
 8002c5a:	7912      	ldrb	r2, [r2, #4]
 8002c5c:	711a      	strb	r2, [r3, #4]
		strIO_Button_Value.bFlagNewButton = 1;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	741a      	strb	r2, [r3, #16]
 8002c64:	e002      	b.n	8002c6c <TIM2_IRQHandler+0x9c>
	}
	else{
		strIO_Button_Value.bFlagNewButton = 0;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <TIM2_IRQHandler+0xac>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	741a      	strb	r2, [r3, #16]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <TIM2_IRQHandler+0xb4>)
 8002c6e:	f001 f993 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	200000a8 	.word	0x200000a8
 8002c80:	200000bc 	.word	0x200000bc
 8002c84:	20000180 	.word	0x20000180

08002c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <USART1_IRQHandler+0x10>)
 8002c8e:	f001 fdc5 	bl	800481c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200001c8 	.word	0x200001c8

08002c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <USART3_IRQHandler+0x10>)
 8002ca2:	f001 fdbb 	bl	800481c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000020c 	.word	0x2000020c

08002cb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cc2:	f3af 8000 	nop.w
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	b2ca      	uxtb	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf0      	blt.n	8002cc2 <_read+0x12>
  }

  return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e009      	b.n	8002d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	60ba      	str	r2, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbd5 	bl	80024b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dbf1      	blt.n	8002cfc <_write+0x12>
  }
  return len;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_close>:

int _close(int file)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d48:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <_isatty>:

int _isatty(int file)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f002 f92a 	bl	800500c <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20005000 	.word	0x20005000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	20000254 	.word	0x20000254
 8002dec:	20000270 	.word	0x20000270

08002df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dfe:	490d      	ldr	r1, [pc, #52]	; (8002e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e14:	4c0a      	ldr	r4, [pc, #40]	; (8002e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e22:	f7ff ffe5 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f002 f8f7 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e2a:	f7ff fb55 	bl	80024d8 <main>
  bx lr
 8002e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e34:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002e38:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8002e3c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002e40:	2000026c 	.word	0x2000026c

08002e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC1_2_IRQHandler>
	...

08002e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_Init+0x28>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_Init+0x28>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 f923 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5e:	200f      	movs	r0, #15
 8002e60:	f000 f808 	bl	8002e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e64:	f7ff fd6e 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x54>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_InitTick+0x58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f93b 	bl	800310e <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f000 f903 	bl	80030ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x5c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000001c 	.word	0x2000001c
 8002ecc:	20000024 	.word	0x20000024
 8002ed0:	20000020 	.word	0x20000020

08002ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_IncTick+0x1c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_IncTick+0x20>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_IncTick+0x20>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000024 	.word	0x20000024
 8002ef4:	20000258 	.word	0x20000258

08002ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <HAL_GetTick+0x10>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000258 	.word	0x20000258

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	60d3      	str	r3, [r2, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4906      	ldr	r1, [pc, #24]	; (8002fa4 <__NVIC_EnableIRQ+0x34>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff90 	bl	8002fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff2d 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff42 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff90 	bl	8002ffc <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5f 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff35 	bl	8002f70 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e020      	b.n	8003190 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 020e 	bic.w	r2, r2, #14
 800315c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d005      	beq.n	80031be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e051      	b.n	8003262 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 020e 	bic.w	r2, r2, #14
 80031cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a22      	ldr	r2, [pc, #136]	; (800326c <HAL_DMA_Abort_IT+0xd0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d029      	beq.n	800323c <HAL_DMA_Abort_IT+0xa0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a20      	ldr	r2, [pc, #128]	; (8003270 <HAL_DMA_Abort_IT+0xd4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMA_Abort_IT+0x9c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <HAL_DMA_Abort_IT+0xd8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01a      	beq.n	8003232 <HAL_DMA_Abort_IT+0x96>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_DMA_Abort_IT+0xdc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d012      	beq.n	800322c <HAL_DMA_Abort_IT+0x90>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_DMA_Abort_IT+0xe0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00a      	beq.n	8003226 <HAL_DMA_Abort_IT+0x8a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_DMA_Abort_IT+0xe4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d102      	bne.n	8003220 <HAL_DMA_Abort_IT+0x84>
 800321a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800321e:	e00e      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 8003220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003224:	e00b      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 8003226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800322a:	e008      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	e005      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 8003232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003236:	e002      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 8003238:	2310      	movs	r3, #16
 800323a:	e000      	b.n	800323e <HAL_DMA_Abort_IT+0xa2>
 800323c:	2301      	movs	r3, #1
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_DMA_Abort_IT+0xe8>)
 8003240:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
    } 
  }
  return status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40020008 	.word	0x40020008
 8003270:	4002001c 	.word	0x4002001c
 8003274:	40020030 	.word	0x40020030
 8003278:	40020044 	.word	0x40020044
 800327c:	40020058 	.word	0x40020058
 8003280:	4002006c 	.word	0x4002006c
 8003284:	40020000 	.word	0x40020000

08003288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003288:	b480      	push	{r7}
 800328a:	b08b      	sub	sp, #44	; 0x2c
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329a:	e169      	b.n	8003570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800329c:	2201      	movs	r2, #1
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	f040 8158 	bne.w	800356a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a9a      	ldr	r2, [pc, #616]	; (8003528 <HAL_GPIO_Init+0x2a0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d05e      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
 80032c4:	4a98      	ldr	r2, [pc, #608]	; (8003528 <HAL_GPIO_Init+0x2a0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d875      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 80032ca:	4a98      	ldr	r2, [pc, #608]	; (800352c <HAL_GPIO_Init+0x2a4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d058      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
 80032d0:	4a96      	ldr	r2, [pc, #600]	; (800352c <HAL_GPIO_Init+0x2a4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d86f      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 80032d6:	4a96      	ldr	r2, [pc, #600]	; (8003530 <HAL_GPIO_Init+0x2a8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d052      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
 80032dc:	4a94      	ldr	r2, [pc, #592]	; (8003530 <HAL_GPIO_Init+0x2a8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d869      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 80032e2:	4a94      	ldr	r2, [pc, #592]	; (8003534 <HAL_GPIO_Init+0x2ac>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04c      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
 80032e8:	4a92      	ldr	r2, [pc, #584]	; (8003534 <HAL_GPIO_Init+0x2ac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d863      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 80032ee:	4a92      	ldr	r2, [pc, #584]	; (8003538 <HAL_GPIO_Init+0x2b0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d046      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
 80032f4:	4a90      	ldr	r2, [pc, #576]	; (8003538 <HAL_GPIO_Init+0x2b0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d85d      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 80032fa:	2b12      	cmp	r3, #18
 80032fc:	d82a      	bhi.n	8003354 <HAL_GPIO_Init+0xcc>
 80032fe:	2b12      	cmp	r3, #18
 8003300:	d859      	bhi.n	80033b6 <HAL_GPIO_Init+0x12e>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <HAL_GPIO_Init+0x80>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003383 	.word	0x08003383
 800330c:	0800335d 	.word	0x0800335d
 8003310:	0800336f 	.word	0x0800336f
 8003314:	080033b1 	.word	0x080033b1
 8003318:	080033b7 	.word	0x080033b7
 800331c:	080033b7 	.word	0x080033b7
 8003320:	080033b7 	.word	0x080033b7
 8003324:	080033b7 	.word	0x080033b7
 8003328:	080033b7 	.word	0x080033b7
 800332c:	080033b7 	.word	0x080033b7
 8003330:	080033b7 	.word	0x080033b7
 8003334:	080033b7 	.word	0x080033b7
 8003338:	080033b7 	.word	0x080033b7
 800333c:	080033b7 	.word	0x080033b7
 8003340:	080033b7 	.word	0x080033b7
 8003344:	080033b7 	.word	0x080033b7
 8003348:	080033b7 	.word	0x080033b7
 800334c:	08003365 	.word	0x08003365
 8003350:	08003379 	.word	0x08003379
 8003354:	4a79      	ldr	r2, [pc, #484]	; (800353c <HAL_GPIO_Init+0x2b4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800335a:	e02c      	b.n	80033b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	623b      	str	r3, [r7, #32]
          break;
 8003362:	e029      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	3304      	adds	r3, #4
 800336a:	623b      	str	r3, [r7, #32]
          break;
 800336c:	e024      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	3308      	adds	r3, #8
 8003374:	623b      	str	r3, [r7, #32]
          break;
 8003376:	e01f      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	330c      	adds	r3, #12
 800337e:	623b      	str	r3, [r7, #32]
          break;
 8003380:	e01a      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800338a:	2304      	movs	r3, #4
 800338c:	623b      	str	r3, [r7, #32]
          break;
 800338e:	e013      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003398:	2308      	movs	r3, #8
 800339a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	611a      	str	r2, [r3, #16]
          break;
 80033a2:	e009      	b.n	80033b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033a4:	2308      	movs	r3, #8
 80033a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	615a      	str	r2, [r3, #20]
          break;
 80033ae:	e003      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033b0:	2300      	movs	r3, #0
 80033b2:	623b      	str	r3, [r7, #32]
          break;
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x130>
          break;
 80033b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2bff      	cmp	r3, #255	; 0xff
 80033bc:	d801      	bhi.n	80033c2 <HAL_GPIO_Init+0x13a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	e001      	b.n	80033c6 <HAL_GPIO_Init+0x13e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2bff      	cmp	r3, #255	; 0xff
 80033cc:	d802      	bhi.n	80033d4 <HAL_GPIO_Init+0x14c>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	e002      	b.n	80033da <HAL_GPIO_Init+0x152>
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	3b08      	subs	r3, #8
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	210f      	movs	r1, #15
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	401a      	ands	r2, r3
 80033ec:	6a39      	ldr	r1, [r7, #32]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80b1 	beq.w	800356a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003408:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_GPIO_Init+0x2b8>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4a4c      	ldr	r2, [pc, #304]	; (8003540 <HAL_GPIO_Init+0x2b8>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6193      	str	r3, [r2, #24]
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_GPIO_Init+0x2b8>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003420:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_GPIO_Init+0x2bc>)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a40      	ldr	r2, [pc, #256]	; (8003548 <HAL_GPIO_Init+0x2c0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_GPIO_Init+0x1ec>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <HAL_GPIO_Init+0x2c4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00d      	beq.n	8003470 <HAL_GPIO_Init+0x1e8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3e      	ldr	r2, [pc, #248]	; (8003550 <HAL_GPIO_Init+0x2c8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <HAL_GPIO_Init+0x1e4>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <HAL_GPIO_Init+0x2cc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_GPIO_Init+0x1e0>
 8003464:	2303      	movs	r3, #3
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x1ee>
 8003468:	2304      	movs	r3, #4
 800346a:	e004      	b.n	8003476 <HAL_GPIO_Init+0x1ee>
 800346c:	2302      	movs	r3, #2
 800346e:	e002      	b.n	8003476 <HAL_GPIO_Init+0x1ee>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_GPIO_Init+0x1ee>
 8003474:	2300      	movs	r3, #0
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	4093      	lsls	r3, r2
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003486:	492f      	ldr	r1, [pc, #188]	; (8003544 <HAL_GPIO_Init+0x2bc>)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	492c      	ldr	r1, [pc, #176]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4928      	ldr	r1, [pc, #160]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4922      	ldr	r1, [pc, #136]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	e006      	b.n	80034e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	43db      	mvns	r3, r3
 80034de:	491e      	ldr	r1, [pc, #120]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4918      	ldr	r1, [pc, #96]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	43db      	mvns	r3, r3
 8003506:	4914      	ldr	r1, [pc, #80]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 8003508:	4013      	ands	r3, r2
 800350a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_GPIO_Init+0x2d0>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	60cb      	str	r3, [r1, #12]
 8003524:	e021      	b.n	800356a <HAL_GPIO_Init+0x2e2>
 8003526:	bf00      	nop
 8003528:	10320000 	.word	0x10320000
 800352c:	10310000 	.word	0x10310000
 8003530:	10220000 	.word	0x10220000
 8003534:	10210000 	.word	0x10210000
 8003538:	10120000 	.word	0x10120000
 800353c:	10110000 	.word	0x10110000
 8003540:	40021000 	.word	0x40021000
 8003544:	40010000 	.word	0x40010000
 8003548:	40010800 	.word	0x40010800
 800354c:	40010c00 	.word	0x40010c00
 8003550:	40011000 	.word	0x40011000
 8003554:	40011400 	.word	0x40011400
 8003558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_GPIO_Init+0x304>)
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	43db      	mvns	r3, r3
 8003564:	4909      	ldr	r1, [pc, #36]	; (800358c <HAL_GPIO_Init+0x304>)
 8003566:	4013      	ands	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	3301      	adds	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f47f ae8e 	bne.w	800329c <HAL_GPIO_Init+0x14>
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	372c      	adds	r7, #44	; 0x2c
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e001      	b.n	80035b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	807b      	strh	r3, [r7, #2]
 80035ca:	4613      	mov	r3, r2
 80035cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ce:	787b      	ldrb	r3, [r7, #1]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035da:	e003      	b.n	80035e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	041a      	lsls	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	611a      	str	r2, [r3, #16]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003600:	887a      	ldrh	r2, [r7, #2]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	041a      	lsls	r2, r3, #16
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	43d9      	mvns	r1, r3
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	400b      	ands	r3, r1
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e272      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8087 	beq.w	800374e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003640:	4b92      	ldr	r3, [pc, #584]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b04      	cmp	r3, #4
 800364a:	d00c      	beq.n	8003666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800364c:	4b8f      	ldr	r3, [pc, #572]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d112      	bne.n	800367e <HAL_RCC_OscConfig+0x5e>
 8003658:	4b8c      	ldr	r3, [pc, #560]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d10b      	bne.n	800367e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d06c      	beq.n	800374c <HAL_RCC_OscConfig+0x12c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d168      	bne.n	800374c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e24c      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x76>
 8003688:	4b80      	ldr	r3, [pc, #512]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7f      	ldr	r2, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e02e      	b.n	80036f4 <HAL_RCC_OscConfig+0xd4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x98>
 800369e:	4b7b      	ldr	r3, [pc, #492]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7a      	ldr	r2, [pc, #488]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b78      	ldr	r3, [pc, #480]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a77      	ldr	r2, [pc, #476]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xd4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0xbc>
 80036c2:	4b72      	ldr	r3, [pc, #456]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a71      	ldr	r2, [pc, #452]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xd4>
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6a      	ldr	r2, [pc, #424]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a67      	ldr	r2, [pc, #412]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff fbfc 	bl	8002ef8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff fbf8 	bl	8002ef8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e200      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xe4>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff fbe8 	bl	8002ef8 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff fbe4 	bl	8002ef8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1ec      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x10c>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x18c>
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x176>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1c0      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4939      	ldr	r1, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7ff fb9d 	bl	8002ef8 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff fb99 	bl	8002ef8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1a1      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4927      	ldr	r1, [pc, #156]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7ff fb7c 	bl	8002ef8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7ff fb78 	bl	8002ef8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e180      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03a      	beq.n	80038a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_RCC_OscConfig+0x274>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7ff fb5c 	bl	8002ef8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003844:	f7ff fb58 	bl	8002ef8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e160      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCC_OscConfig+0x26c>)
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003862:	2001      	movs	r0, #1
 8003864:	f000 fad8 	bl	8003e18 <RCC_Delay>
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_OscConfig+0x274>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7ff fb42 	bl	8002ef8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003876:	e00f      	b.n	8003898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7ff fb3e 	bl	8002ef8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d908      	bls.n	8003898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e146      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	42420000 	.word	0x42420000
 8003894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e9      	bne.n	8003878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a6 	beq.w	80039fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b8b      	ldr	r3, [pc, #556]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a87      	ldr	r2, [pc, #540]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <HAL_RCC_OscConfig+0x4c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b7f      	ldr	r3, [pc, #508]	; (8003ae8 <HAL_RCC_OscConfig+0x4c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7e      	ldr	r2, [pc, #504]	; (8003ae8 <HAL_RCC_OscConfig+0x4c8>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7ff faff 	bl	8002ef8 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7ff fafb 	bl	8002ef8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e103      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b75      	ldr	r3, [pc, #468]	; (8003ae8 <HAL_RCC_OscConfig+0x4c8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x312>
 8003924:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a6e      	ldr	r2, [pc, #440]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	e02d      	b.n	800398e <HAL_RCC_OscConfig+0x36e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x334>
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6213      	str	r3, [r2, #32]
 8003946:	4b67      	ldr	r3, [pc, #412]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a66      	ldr	r2, [pc, #408]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	6213      	str	r3, [r2, #32]
 8003952:	e01c      	b.n	800398e <HAL_RCC_OscConfig+0x36e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b05      	cmp	r3, #5
 800395a:	d10c      	bne.n	8003976 <HAL_RCC_OscConfig+0x356>
 800395c:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4a60      	ldr	r2, [pc, #384]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	4b5e      	ldr	r3, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6213      	str	r3, [r2, #32]
 8003974:	e00b      	b.n	800398e <HAL_RCC_OscConfig+0x36e>
 8003976:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6213      	str	r3, [r2, #32]
 8003982:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d015      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7ff faaf 	bl	8002ef8 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7ff faab 	bl	8002ef8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0b1      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ee      	beq.n	800399e <HAL_RCC_OscConfig+0x37e>
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7ff fa99 	bl	8002ef8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7ff fa95 	bl	8002ef8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e09b      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ee      	bne.n	80039ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d105      	bne.n	80039fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	4b3c      	ldr	r3, [pc, #240]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a3b      	ldr	r2, [pc, #236]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8087 	beq.w	8003b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a08:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d061      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d146      	bne.n	8003aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x4cc>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7ff fa69 	bl	8002ef8 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7ff fa65 	bl	8002ef8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e06d      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d108      	bne.n	8003a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4921      	ldr	r1, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a19      	ldr	r1, [r3, #32]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	430b      	orrs	r3, r1
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7ff fa39 	bl	8002ef8 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7ff fa35 	bl	8002ef8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e03d      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x46a>
 8003aa8:	e035      	b.n	8003b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7ff fa22 	bl	8002ef8 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7ff fa1e 	bl	8002ef8 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e026      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x498>
 8003ad6:	e01e      	b.n	8003b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e019      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x500>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d0      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d910      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4965      	ldr	r1, [pc, #404]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d040      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e073      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06b      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4936      	ldr	r1, [pc, #216]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c14:	f7ff f970 	bl	8002ef8 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7ff f96c 	bl	8002ef8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e053      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	4922      	ldr	r1, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e032      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f8ce 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08006190 	.word	0x08006190
 8003cf0:	2000001c 	.word	0x2000001c
 8003cf4:	20000020 	.word	0x20000020

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	b490      	push	{r4, r7}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d00:	1d3c      	adds	r4, r7, #4
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d08:	f240 2301 	movw	r3, #513	; 0x201
 8003d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x40>
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x46>
 8003d36:	e02b      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	e02b      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	0c9b      	lsrs	r3, r3, #18
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3328      	adds	r3, #40	; 0x28
 8003d48:	443b      	add	r3, r7
 8003d4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0c5b      	lsrs	r3, r3, #17
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	3328      	adds	r3, #40	; 0x28
 8003d66:	443b      	add	r3, r7
 8003d68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d72:	fb03 f202 	mul.w	r2, r3, r2
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	e004      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	623b      	str	r3, [r7, #32]
      break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d92:	623b      	str	r3, [r7, #32]
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	6a3b      	ldr	r3, [r7, #32]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc90      	pop	{r4, r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	0800612c 	.word	0x0800612c
 8003da8:	40021000 	.word	0x40021000
 8003dac:	007a1200 	.word	0x007a1200
 8003db0:	003d0900 	.word	0x003d0900

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	2000001c 	.word	0x2000001c

08003dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dcc:	f7ff fff2 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	080061a0 	.word	0x080061a0

08003df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df4:	f7ff ffde 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0adb      	lsrs	r3, r3, #11
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	080061a0 	.word	0x080061a0

08003e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <RCC_Delay+0x34>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <RCC_Delay+0x38>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0a5b      	lsrs	r3, r3, #9
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e34:	bf00      	nop
  }
  while (Delay --);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	60fa      	str	r2, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f9      	bne.n	8003e34 <RCC_Delay+0x1c>
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	2000001c 	.word	0x2000001c
 8003e50:	10624dd3 	.word	0x10624dd3

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e041      	b.n	8003eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fe fd94 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 fa7a 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e03a      	b.n	8003f82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_TIM_Base_Start_IT+0x98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d009      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x58>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d111      	bne.n	8003f70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d010      	beq.n	8003f80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	e007      	b.n	8003f80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0202 	mvn.w	r2, #2
 8003fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9ba 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9ad 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f9bc 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0204 	mvn.w	r2, #4
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f990 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f983 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f992 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0208 	mvn.w	r2, #8
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2204      	movs	r2, #4
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f966 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f959 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f968 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2208      	movs	r2, #8
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f93c 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f92f 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f93e 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f90a 	bl	8004330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa81 	bl	800464a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f902 	bl	8004378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0220 	mvn.w	r2, #32
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fa4c 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_ConfigClockSource+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0b3      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x180>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f8:	d03e      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0xd0>
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fe:	f200 8087 	bhi.w	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004206:	f000 8085 	beq.w	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d87f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004210:	2b70      	cmp	r3, #112	; 0x70
 8004212:	d01a      	beq.n	800424a <HAL_TIM_ConfigClockSource+0xa2>
 8004214:	2b70      	cmp	r3, #112	; 0x70
 8004216:	d87b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004218:	2b60      	cmp	r3, #96	; 0x60
 800421a:	d050      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x116>
 800421c:	2b60      	cmp	r3, #96	; 0x60
 800421e:	d877      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b50      	cmp	r3, #80	; 0x50
 8004222:	d03c      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xf6>
 8004224:	2b50      	cmp	r3, #80	; 0x50
 8004226:	d873      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d058      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x136>
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d86f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	d064      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d86b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d060      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d867      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d05c      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 8004244:	2b10      	cmp	r3, #16
 8004246:	d05a      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004248:	e062      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6899      	ldr	r1, [r3, #8]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f000 f970 	bl	800453e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800426c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
      break;
 8004276:	e04e      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f000 f959 	bl	800453e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800429a:	609a      	str	r2, [r3, #8]
      break;
 800429c:	e03b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 f8d0 	bl	8004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2150      	movs	r1, #80	; 0x50
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f927 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 80042bc:	e02b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 f8ee 	bl	80044ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2160      	movs	r1, #96	; 0x60
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f917 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 f8b0 	bl	8004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f907 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 80042fc:	e00b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 f8fe 	bl	800450a <TIM_ITRx_SetConfig>
        break;
 800430e:	e002      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800

08004450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0201 	bic.w	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 030a 	bic.w	r3, r3, #10
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f023 0210 	bic.w	r2, r3, #16
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	031b      	lsls	r3, r3, #12
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	f043 0307 	orr.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	021a      	lsls	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	431a      	orrs	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e046      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d009      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a10      	ldr	r2, [pc, #64]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe f9b4 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fc25 	bl	8004ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b08a      	sub	sp, #40	; 0x28
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	d17c      	bne.n	8004810 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_Transmit+0x2c>
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e075      	b.n	8004812 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UART_Transmit+0x3e>
 8004730:	2302      	movs	r3, #2
 8004732:	e06e      	b.n	8004812 <HAL_UART_Transmit+0x11c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2221      	movs	r2, #33	; 0x21
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474a:	f7fe fbd5 	bl	8002ef8 <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d108      	bne.n	8004778 <HAL_UART_Transmit+0x82>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e003      	b.n	8004780 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004788:	e02a      	b.n	80047e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fa11 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e036      	b.n	8004812 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3302      	adds	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e007      	b.n	80047d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3301      	adds	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1cf      	bne.n	800478a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2140      	movs	r1, #64	; 0x40
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f9e1 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e006      	b.n	8004812 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_UART_IRQHandler+0x52>
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa99 	bl	8004d9e <UART_Receive_IT>
      return;
 800486c:	e17b      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80b1 	beq.w	80049d8 <HAL_UART_IRQHandler+0x1bc>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_UART_IRQHandler+0x70>
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a6 	beq.w	80049d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_UART_IRQHandler+0x90>
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_UART_IRQHandler+0xb0>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0202 	orr.w	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_UART_IRQHandler+0xd0>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00f      	beq.n	8004916 <HAL_UART_IRQHandler+0xfa>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <HAL_UART_IRQHandler+0xee>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0208 	orr.w	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 811e 	beq.w	8004b5c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_UART_IRQHandler+0x11e>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa32 	bl	8004d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_UART_IRQHandler+0x146>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d031      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f974 	bl	8004c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d023      	beq.n	80049be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004984:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4a76      	ldr	r2, [pc, #472]	; (8004b6c <HAL_UART_IRQHandler+0x350>)
 8004994:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fbfe 	bl	800319c <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00e      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8ec 	bl	8004b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e00a      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8e8 	bl	8004b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e006      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8e4 	bl	8004b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049d2:	e0c3      	b.n	8004b5c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	bf00      	nop
    return;
 80049d6:	e0c1      	b.n	8004b5c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 80a1 	bne.w	8004b24 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 809b 	beq.w	8004b24 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8095 	beq.w	8004b24 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04e      	beq.n	8004abc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a28:	8a3b      	ldrh	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8098 	beq.w	8004b60 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a34:	8a3a      	ldrh	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f080 8092 	bcs.w	8004b60 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8a3a      	ldrh	r2, [r7, #16]
 8004a40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d02b      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a5a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0210 	bic.w	r2, r2, #16
 8004a98:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fb41 	bl	8003126 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f876 	bl	8004ba6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004aba:	e051      	b.n	8004b60 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d047      	beq.n	8004b64 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ad4:	8a7b      	ldrh	r3, [r7, #18]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d044      	beq.n	8004b64 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ae8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0210 	bic.w	r2, r2, #16
 8004b16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b18:	8a7b      	ldrh	r3, [r7, #18]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f842 	bl	8004ba6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b22:	e01f      	b.n	8004b64 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_UART_IRQHandler+0x324>
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f8c9 	bl	8004cd0 <UART_Transmit_IT>
    return;
 8004b3e:	e012      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <HAL_UART_IRQHandler+0x34a>
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f90a 	bl	8004d6e <UART_EndTransmit_IT>
    return;
 8004b5a:	e004      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b5c:	bf00      	nop
 8004b5e:	e002      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b64:	bf00      	nop
  }
}
 8004b66:	3728      	adds	r7, #40	; 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08004ca9 	.word	0x08004ca9

08004b70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	e02c      	b.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d028      	beq.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x30>
 8004bdc:	f7fe f98c 	bl	8002ef8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d21d      	bcs.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e00f      	b.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d0c3      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0210 	bic.w	r2, r2, #16
 8004c8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff ff66 	bl	8004b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b21      	cmp	r3, #33	; 0x21
 8004ce2:	d13e      	bne.n	8004d62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d114      	bne.n	8004d18 <UART_Transmit_IT+0x48>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	1c9a      	adds	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]
 8004d16:	e008      	b.n	8004d2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	1c59      	adds	r1, r3, #1
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6211      	str	r1, [r2, #32]
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4619      	mov	r1, r3
 8004d38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff feee 	bl	8004b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	f040 8099 	bne.w	8004ee6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbc:	d117      	bne.n	8004dee <UART_Receive_IT+0x50>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d113      	bne.n	8004dee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
 8004dec:	e026      	b.n	8004e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e00:	d007      	beq.n	8004e12 <UART_Receive_IT+0x74>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <UART_Receive_IT+0x82>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e008      	b.n	8004e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d148      	bne.n	8004ee2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0220 	bic.w	r2, r2, #32
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d123      	bne.n	8004ed8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0210 	bic.w	r2, r2, #16
 8004ea4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d10a      	bne.n	8004eca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fe68 	bl	8004ba6 <HAL_UARTEx_RxEventCallback>
 8004ed6:	e002      	b.n	8004ede <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe52 	bl	8004b82 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e002      	b.n	8004ee8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e000      	b.n	8004ee8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
  }
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f2a:	f023 030c 	bic.w	r3, r3, #12
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <UART_SetConfig+0x114>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7fe ff4a 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	e002      	b.n	8004f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fe ff32 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8004f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <UART_SetConfig+0x118>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	0119      	lsls	r1, r3, #4
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009a      	lsls	r2, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <UART_SetConfig+0x118>)
 8004f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2064      	movs	r0, #100	; 0x64
 8004fa6:	fb00 f303 	mul.w	r3, r0, r3
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	3332      	adds	r3, #50	; 0x32
 8004fb0:	4a15      	ldr	r2, [pc, #84]	; (8005008 <UART_SetConfig+0x118>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbc:	4419      	add	r1, r3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <UART_SetConfig+0x118>)
 8004fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2064      	movs	r0, #100	; 0x64
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	; 0x32
 8004fe8:	4a07      	ldr	r2, [pc, #28]	; (8005008 <UART_SetConfig+0x118>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40013800 	.word	0x40013800
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000028 	.word	0x20000028

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	2600      	movs	r6, #0
 800501c:	4d0c      	ldr	r5, [pc, #48]	; (8005050 <__libc_init_array+0x38>)
 800501e:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 8005020:	1b64      	subs	r4, r4, r5
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	f001 f83c 	bl	80060a4 <_init>
 800502c:	2600      	movs	r6, #0
 800502e:	4d0a      	ldr	r5, [pc, #40]	; (8005058 <__libc_init_array+0x40>)
 8005030:	4c0a      	ldr	r4, [pc, #40]	; (800505c <__libc_init_array+0x44>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08006240 	.word	0x08006240
 8005054:	08006240 	.word	0x08006240
 8005058:	08006240 	.word	0x08006240
 800505c:	08006244 	.word	0x08006244

08005060 <memcmp>:
 8005060:	b510      	push	{r4, lr}
 8005062:	3901      	subs	r1, #1
 8005064:	4402      	add	r2, r0
 8005066:	4290      	cmp	r0, r2
 8005068:	d101      	bne.n	800506e <memcmp+0xe>
 800506a:	2000      	movs	r0, #0
 800506c:	e005      	b.n	800507a <memcmp+0x1a>
 800506e:	7803      	ldrb	r3, [r0, #0]
 8005070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005074:	42a3      	cmp	r3, r4
 8005076:	d001      	beq.n	800507c <memcmp+0x1c>
 8005078:	1b18      	subs	r0, r3, r4
 800507a:	bd10      	pop	{r4, pc}
 800507c:	3001      	adds	r0, #1
 800507e:	e7f2      	b.n	8005066 <memcmp+0x6>

08005080 <memset>:
 8005080:	4603      	mov	r3, r0
 8005082:	4402      	add	r2, r0
 8005084:	4293      	cmp	r3, r2
 8005086:	d100      	bne.n	800508a <memset+0xa>
 8005088:	4770      	bx	lr
 800508a:	f803 1b01 	strb.w	r1, [r3], #1
 800508e:	e7f9      	b.n	8005084 <memset+0x4>

08005090 <iprintf>:
 8005090:	b40f      	push	{r0, r1, r2, r3}
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <iprintf+0x2c>)
 8005094:	b513      	push	{r0, r1, r4, lr}
 8005096:	681c      	ldr	r4, [r3, #0]
 8005098:	b124      	cbz	r4, 80050a4 <iprintf+0x14>
 800509a:	69a3      	ldr	r3, [r4, #24]
 800509c:	b913      	cbnz	r3, 80050a4 <iprintf+0x14>
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fa5a 	bl	8005558 <__sinit>
 80050a4:	ab05      	add	r3, sp, #20
 80050a6:	4620      	mov	r0, r4
 80050a8:	9a04      	ldr	r2, [sp, #16]
 80050aa:	68a1      	ldr	r1, [r4, #8]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f000 fc5d 	bl	800596c <_vfiprintf_r>
 80050b2:	b002      	add	sp, #8
 80050b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b8:	b004      	add	sp, #16
 80050ba:	4770      	bx	lr
 80050bc:	20000028 	.word	0x20000028

080050c0 <_puts_r>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4605      	mov	r5, r0
 80050c6:	b118      	cbz	r0, 80050d0 <_puts_r+0x10>
 80050c8:	6983      	ldr	r3, [r0, #24]
 80050ca:	b90b      	cbnz	r3, 80050d0 <_puts_r+0x10>
 80050cc:	f000 fa44 	bl	8005558 <__sinit>
 80050d0:	69ab      	ldr	r3, [r5, #24]
 80050d2:	68ac      	ldr	r4, [r5, #8]
 80050d4:	b913      	cbnz	r3, 80050dc <_puts_r+0x1c>
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 fa3e 	bl	8005558 <__sinit>
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <_puts_r+0xd0>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	d120      	bne.n	8005124 <_puts_r+0x64>
 80050e2:	686c      	ldr	r4, [r5, #4]
 80050e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <_puts_r+0x36>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	0598      	lsls	r0, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_puts_r+0x36>
 80050f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f2:	f000 facf 	bl	8005694 <__retarget_lock_acquire_recursive>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	0719      	lsls	r1, r3, #28
 80050fa:	d51d      	bpl.n	8005138 <_puts_r+0x78>
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	b1db      	cbz	r3, 8005138 <_puts_r+0x78>
 8005100:	3e01      	subs	r6, #1
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005108:	3b01      	subs	r3, #1
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	bb39      	cbnz	r1, 800515e <_puts_r+0x9e>
 800510e:	2b00      	cmp	r3, #0
 8005110:	da38      	bge.n	8005184 <_puts_r+0xc4>
 8005112:	4622      	mov	r2, r4
 8005114:	210a      	movs	r1, #10
 8005116:	4628      	mov	r0, r5
 8005118:	f000 f848 	bl	80051ac <__swbuf_r>
 800511c:	3001      	adds	r0, #1
 800511e:	d011      	beq.n	8005144 <_puts_r+0x84>
 8005120:	250a      	movs	r5, #10
 8005122:	e011      	b.n	8005148 <_puts_r+0x88>
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <_puts_r+0xd4>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d101      	bne.n	800512e <_puts_r+0x6e>
 800512a:	68ac      	ldr	r4, [r5, #8]
 800512c:	e7da      	b.n	80050e4 <_puts_r+0x24>
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <_puts_r+0xd8>)
 8005130:	429c      	cmp	r4, r3
 8005132:	bf08      	it	eq
 8005134:	68ec      	ldreq	r4, [r5, #12]
 8005136:	e7d5      	b.n	80050e4 <_puts_r+0x24>
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f888 	bl	8005250 <__swsetup_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	d0dd      	beq.n	8005100 <_puts_r+0x40>
 8005144:	f04f 35ff 	mov.w	r5, #4294967295
 8005148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800514a:	07da      	lsls	r2, r3, #31
 800514c:	d405      	bmi.n	800515a <_puts_r+0x9a>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	d402      	bmi.n	800515a <_puts_r+0x9a>
 8005154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005156:	f000 fa9e 	bl	8005696 <__retarget_lock_release_recursive>
 800515a:	4628      	mov	r0, r5
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	2b00      	cmp	r3, #0
 8005160:	da04      	bge.n	800516c <_puts_r+0xac>
 8005162:	69a2      	ldr	r2, [r4, #24]
 8005164:	429a      	cmp	r2, r3
 8005166:	dc06      	bgt.n	8005176 <_puts_r+0xb6>
 8005168:	290a      	cmp	r1, #10
 800516a:	d004      	beq.n	8005176 <_puts_r+0xb6>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	7019      	strb	r1, [r3, #0]
 8005174:	e7c5      	b.n	8005102 <_puts_r+0x42>
 8005176:	4622      	mov	r2, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f817 	bl	80051ac <__swbuf_r>
 800517e:	3001      	adds	r0, #1
 8005180:	d1bf      	bne.n	8005102 <_puts_r+0x42>
 8005182:	e7df      	b.n	8005144 <_puts_r+0x84>
 8005184:	250a      	movs	r5, #10
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	6022      	str	r2, [r4, #0]
 800518c:	701d      	strb	r5, [r3, #0]
 800518e:	e7db      	b.n	8005148 <_puts_r+0x88>
 8005190:	080061cc 	.word	0x080061cc
 8005194:	080061ec 	.word	0x080061ec
 8005198:	080061ac 	.word	0x080061ac

0800519c <puts>:
 800519c:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <puts+0xc>)
 800519e:	4601      	mov	r1, r0
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f7ff bf8d 	b.w	80050c0 <_puts_r>
 80051a6:	bf00      	nop
 80051a8:	20000028 	.word	0x20000028

080051ac <__swbuf_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	460e      	mov	r6, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	4605      	mov	r5, r0
 80051b4:	b118      	cbz	r0, 80051be <__swbuf_r+0x12>
 80051b6:	6983      	ldr	r3, [r0, #24]
 80051b8:	b90b      	cbnz	r3, 80051be <__swbuf_r+0x12>
 80051ba:	f000 f9cd 	bl	8005558 <__sinit>
 80051be:	4b21      	ldr	r3, [pc, #132]	; (8005244 <__swbuf_r+0x98>)
 80051c0:	429c      	cmp	r4, r3
 80051c2:	d12b      	bne.n	800521c <__swbuf_r+0x70>
 80051c4:	686c      	ldr	r4, [r5, #4]
 80051c6:	69a3      	ldr	r3, [r4, #24]
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	071a      	lsls	r2, r3, #28
 80051ce:	d52f      	bpl.n	8005230 <__swbuf_r+0x84>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	b36b      	cbz	r3, 8005230 <__swbuf_r+0x84>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	b2f6      	uxtb	r6, r6
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	6963      	ldr	r3, [r4, #20]
 80051de:	4637      	mov	r7, r6
 80051e0:	4283      	cmp	r3, r0
 80051e2:	dc04      	bgt.n	80051ee <__swbuf_r+0x42>
 80051e4:	4621      	mov	r1, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 f922 	bl	8005430 <_fflush_r>
 80051ec:	bb30      	cbnz	r0, 800523c <__swbuf_r+0x90>
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	3001      	adds	r0, #1
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	701e      	strb	r6, [r3, #0]
 80051fe:	6963      	ldr	r3, [r4, #20]
 8005200:	4283      	cmp	r3, r0
 8005202:	d004      	beq.n	800520e <__swbuf_r+0x62>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	07db      	lsls	r3, r3, #31
 8005208:	d506      	bpl.n	8005218 <__swbuf_r+0x6c>
 800520a:	2e0a      	cmp	r6, #10
 800520c:	d104      	bne.n	8005218 <__swbuf_r+0x6c>
 800520e:	4621      	mov	r1, r4
 8005210:	4628      	mov	r0, r5
 8005212:	f000 f90d 	bl	8005430 <_fflush_r>
 8005216:	b988      	cbnz	r0, 800523c <__swbuf_r+0x90>
 8005218:	4638      	mov	r0, r7
 800521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <__swbuf_r+0x9c>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <__swbuf_r+0x7a>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7cf      	b.n	80051c6 <__swbuf_r+0x1a>
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <__swbuf_r+0xa0>)
 8005228:	429c      	cmp	r4, r3
 800522a:	bf08      	it	eq
 800522c:	68ec      	ldreq	r4, [r5, #12]
 800522e:	e7ca      	b.n	80051c6 <__swbuf_r+0x1a>
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f80c 	bl	8005250 <__swsetup_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	d0cb      	beq.n	80051d4 <__swbuf_r+0x28>
 800523c:	f04f 37ff 	mov.w	r7, #4294967295
 8005240:	e7ea      	b.n	8005218 <__swbuf_r+0x6c>
 8005242:	bf00      	nop
 8005244:	080061cc 	.word	0x080061cc
 8005248:	080061ec 	.word	0x080061ec
 800524c:	080061ac 	.word	0x080061ac

08005250 <__swsetup_r>:
 8005250:	4b32      	ldr	r3, [pc, #200]	; (800531c <__swsetup_r+0xcc>)
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	4606      	mov	r6, r0
 8005258:	460c      	mov	r4, r1
 800525a:	b125      	cbz	r5, 8005266 <__swsetup_r+0x16>
 800525c:	69ab      	ldr	r3, [r5, #24]
 800525e:	b913      	cbnz	r3, 8005266 <__swsetup_r+0x16>
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f979 	bl	8005558 <__sinit>
 8005266:	4b2e      	ldr	r3, [pc, #184]	; (8005320 <__swsetup_r+0xd0>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d10f      	bne.n	800528c <__swsetup_r+0x3c>
 800526c:	686c      	ldr	r4, [r5, #4]
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005274:	0719      	lsls	r1, r3, #28
 8005276:	d42c      	bmi.n	80052d2 <__swsetup_r+0x82>
 8005278:	06dd      	lsls	r5, r3, #27
 800527a:	d411      	bmi.n	80052a0 <__swsetup_r+0x50>
 800527c:	2309      	movs	r3, #9
 800527e:	6033      	str	r3, [r6, #0]
 8005280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	e03e      	b.n	800530a <__swsetup_r+0xba>
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <__swsetup_r+0xd4>)
 800528e:	429c      	cmp	r4, r3
 8005290:	d101      	bne.n	8005296 <__swsetup_r+0x46>
 8005292:	68ac      	ldr	r4, [r5, #8]
 8005294:	e7eb      	b.n	800526e <__swsetup_r+0x1e>
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <__swsetup_r+0xd8>)
 8005298:	429c      	cmp	r4, r3
 800529a:	bf08      	it	eq
 800529c:	68ec      	ldreq	r4, [r5, #12]
 800529e:	e7e6      	b.n	800526e <__swsetup_r+0x1e>
 80052a0:	0758      	lsls	r0, r3, #29
 80052a2:	d512      	bpl.n	80052ca <__swsetup_r+0x7a>
 80052a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a6:	b141      	cbz	r1, 80052ba <__swsetup_r+0x6a>
 80052a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052ac:	4299      	cmp	r1, r3
 80052ae:	d002      	beq.n	80052b6 <__swsetup_r+0x66>
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 fa57 	bl	8005764 <_free_r>
 80052b6:	2300      	movs	r3, #0
 80052b8:	6363      	str	r3, [r4, #52]	; 0x34
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	2300      	movs	r3, #0
 80052c4:	6063      	str	r3, [r4, #4]
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	b94b      	cbnz	r3, 80052ea <__swsetup_r+0x9a>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e0:	d003      	beq.n	80052ea <__swsetup_r+0x9a>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f9fd 	bl	80056e4 <__smakebuf_r>
 80052ea:	89a0      	ldrh	r0, [r4, #12]
 80052ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f0:	f010 0301 	ands.w	r3, r0, #1
 80052f4:	d00a      	beq.n	800530c <__swsetup_r+0xbc>
 80052f6:	2300      	movs	r3, #0
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	425b      	negs	r3, r3
 80052fe:	61a3      	str	r3, [r4, #24]
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b943      	cbnz	r3, 8005316 <__swsetup_r+0xc6>
 8005304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005308:	d1ba      	bne.n	8005280 <__swsetup_r+0x30>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	0781      	lsls	r1, r0, #30
 800530e:	bf58      	it	pl
 8005310:	6963      	ldrpl	r3, [r4, #20]
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	e7f4      	b.n	8005300 <__swsetup_r+0xb0>
 8005316:	2000      	movs	r0, #0
 8005318:	e7f7      	b.n	800530a <__swsetup_r+0xba>
 800531a:	bf00      	nop
 800531c:	20000028 	.word	0x20000028
 8005320:	080061cc 	.word	0x080061cc
 8005324:	080061ec 	.word	0x080061ec
 8005328:	080061ac 	.word	0x080061ac

0800532c <__sflush_r>:
 800532c:	898a      	ldrh	r2, [r1, #12]
 800532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005330:	4605      	mov	r5, r0
 8005332:	0710      	lsls	r0, r2, #28
 8005334:	460c      	mov	r4, r1
 8005336:	d457      	bmi.n	80053e8 <__sflush_r+0xbc>
 8005338:	684b      	ldr	r3, [r1, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dc04      	bgt.n	8005348 <__sflush_r+0x1c>
 800533e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	dc01      	bgt.n	8005348 <__sflush_r+0x1c>
 8005344:	2000      	movs	r0, #0
 8005346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800534a:	2e00      	cmp	r6, #0
 800534c:	d0fa      	beq.n	8005344 <__sflush_r+0x18>
 800534e:	2300      	movs	r3, #0
 8005350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005354:	682f      	ldr	r7, [r5, #0]
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	d032      	beq.n	80053c0 <__sflush_r+0x94>
 800535a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	075a      	lsls	r2, r3, #29
 8005360:	d505      	bpl.n	800536e <__sflush_r+0x42>
 8005362:	6863      	ldr	r3, [r4, #4]
 8005364:	1ac0      	subs	r0, r0, r3
 8005366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005368:	b10b      	cbz	r3, 800536e <__sflush_r+0x42>
 800536a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800536c:	1ac0      	subs	r0, r0, r3
 800536e:	2300      	movs	r3, #0
 8005370:	4602      	mov	r2, r0
 8005372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005374:	4628      	mov	r0, r5
 8005376:	6a21      	ldr	r1, [r4, #32]
 8005378:	47b0      	blx	r6
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	d106      	bne.n	800538e <__sflush_r+0x62>
 8005380:	6829      	ldr	r1, [r5, #0]
 8005382:	291d      	cmp	r1, #29
 8005384:	d82c      	bhi.n	80053e0 <__sflush_r+0xb4>
 8005386:	4a29      	ldr	r2, [pc, #164]	; (800542c <__sflush_r+0x100>)
 8005388:	40ca      	lsrs	r2, r1
 800538a:	07d6      	lsls	r6, r2, #31
 800538c:	d528      	bpl.n	80053e0 <__sflush_r+0xb4>
 800538e:	2200      	movs	r2, #0
 8005390:	6062      	str	r2, [r4, #4]
 8005392:	6922      	ldr	r2, [r4, #16]
 8005394:	04d9      	lsls	r1, r3, #19
 8005396:	6022      	str	r2, [r4, #0]
 8005398:	d504      	bpl.n	80053a4 <__sflush_r+0x78>
 800539a:	1c42      	adds	r2, r0, #1
 800539c:	d101      	bne.n	80053a2 <__sflush_r+0x76>
 800539e:	682b      	ldr	r3, [r5, #0]
 80053a0:	b903      	cbnz	r3, 80053a4 <__sflush_r+0x78>
 80053a2:	6560      	str	r0, [r4, #84]	; 0x54
 80053a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053a6:	602f      	str	r7, [r5, #0]
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d0cb      	beq.n	8005344 <__sflush_r+0x18>
 80053ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b0:	4299      	cmp	r1, r3
 80053b2:	d002      	beq.n	80053ba <__sflush_r+0x8e>
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f9d5 	bl	8005764 <_free_r>
 80053ba:	2000      	movs	r0, #0
 80053bc:	6360      	str	r0, [r4, #52]	; 0x34
 80053be:	e7c2      	b.n	8005346 <__sflush_r+0x1a>
 80053c0:	6a21      	ldr	r1, [r4, #32]
 80053c2:	2301      	movs	r3, #1
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b0      	blx	r6
 80053c8:	1c41      	adds	r1, r0, #1
 80053ca:	d1c7      	bne.n	800535c <__sflush_r+0x30>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0c4      	beq.n	800535c <__sflush_r+0x30>
 80053d2:	2b1d      	cmp	r3, #29
 80053d4:	d001      	beq.n	80053da <__sflush_r+0xae>
 80053d6:	2b16      	cmp	r3, #22
 80053d8:	d101      	bne.n	80053de <__sflush_r+0xb2>
 80053da:	602f      	str	r7, [r5, #0]
 80053dc:	e7b2      	b.n	8005344 <__sflush_r+0x18>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e4:	81a3      	strh	r3, [r4, #12]
 80053e6:	e7ae      	b.n	8005346 <__sflush_r+0x1a>
 80053e8:	690f      	ldr	r7, [r1, #16]
 80053ea:	2f00      	cmp	r7, #0
 80053ec:	d0aa      	beq.n	8005344 <__sflush_r+0x18>
 80053ee:	0793      	lsls	r3, r2, #30
 80053f0:	bf18      	it	ne
 80053f2:	2300      	movne	r3, #0
 80053f4:	680e      	ldr	r6, [r1, #0]
 80053f6:	bf08      	it	eq
 80053f8:	694b      	ldreq	r3, [r1, #20]
 80053fa:	1bf6      	subs	r6, r6, r7
 80053fc:	600f      	str	r7, [r1, #0]
 80053fe:	608b      	str	r3, [r1, #8]
 8005400:	2e00      	cmp	r6, #0
 8005402:	dd9f      	ble.n	8005344 <__sflush_r+0x18>
 8005404:	4633      	mov	r3, r6
 8005406:	463a      	mov	r2, r7
 8005408:	4628      	mov	r0, r5
 800540a:	6a21      	ldr	r1, [r4, #32]
 800540c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005410:	47e0      	blx	ip
 8005412:	2800      	cmp	r0, #0
 8005414:	dc06      	bgt.n	8005424 <__sflush_r+0xf8>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e790      	b.n	8005346 <__sflush_r+0x1a>
 8005424:	4407      	add	r7, r0
 8005426:	1a36      	subs	r6, r6, r0
 8005428:	e7ea      	b.n	8005400 <__sflush_r+0xd4>
 800542a:	bf00      	nop
 800542c:	20400001 	.word	0x20400001

08005430 <_fflush_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	690b      	ldr	r3, [r1, #16]
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	b913      	cbnz	r3, 8005440 <_fflush_r+0x10>
 800543a:	2500      	movs	r5, #0
 800543c:	4628      	mov	r0, r5
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	b118      	cbz	r0, 800544a <_fflush_r+0x1a>
 8005442:	6983      	ldr	r3, [r0, #24]
 8005444:	b90b      	cbnz	r3, 800544a <_fflush_r+0x1a>
 8005446:	f000 f887 	bl	8005558 <__sinit>
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <_fflush_r+0x6c>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d11b      	bne.n	8005488 <_fflush_r+0x58>
 8005450:	686c      	ldr	r4, [r5, #4]
 8005452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0ef      	beq.n	800543a <_fflush_r+0xa>
 800545a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800545c:	07d0      	lsls	r0, r2, #31
 800545e:	d404      	bmi.n	800546a <_fflush_r+0x3a>
 8005460:	0599      	lsls	r1, r3, #22
 8005462:	d402      	bmi.n	800546a <_fflush_r+0x3a>
 8005464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005466:	f000 f915 	bl	8005694 <__retarget_lock_acquire_recursive>
 800546a:	4628      	mov	r0, r5
 800546c:	4621      	mov	r1, r4
 800546e:	f7ff ff5d 	bl	800532c <__sflush_r>
 8005472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005474:	4605      	mov	r5, r0
 8005476:	07da      	lsls	r2, r3, #31
 8005478:	d4e0      	bmi.n	800543c <_fflush_r+0xc>
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	059b      	lsls	r3, r3, #22
 800547e:	d4dd      	bmi.n	800543c <_fflush_r+0xc>
 8005480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005482:	f000 f908 	bl	8005696 <__retarget_lock_release_recursive>
 8005486:	e7d9      	b.n	800543c <_fflush_r+0xc>
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <_fflush_r+0x70>)
 800548a:	429c      	cmp	r4, r3
 800548c:	d101      	bne.n	8005492 <_fflush_r+0x62>
 800548e:	68ac      	ldr	r4, [r5, #8]
 8005490:	e7df      	b.n	8005452 <_fflush_r+0x22>
 8005492:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <_fflush_r+0x74>)
 8005494:	429c      	cmp	r4, r3
 8005496:	bf08      	it	eq
 8005498:	68ec      	ldreq	r4, [r5, #12]
 800549a:	e7da      	b.n	8005452 <_fflush_r+0x22>
 800549c:	080061cc 	.word	0x080061cc
 80054a0:	080061ec 	.word	0x080061ec
 80054a4:	080061ac 	.word	0x080061ac

080054a8 <std>:
 80054a8:	2300      	movs	r3, #0
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	e9c0 3300 	strd	r3, r3, [r0]
 80054b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054b6:	6083      	str	r3, [r0, #8]
 80054b8:	8181      	strh	r1, [r0, #12]
 80054ba:	6643      	str	r3, [r0, #100]	; 0x64
 80054bc:	81c2      	strh	r2, [r0, #14]
 80054be:	6183      	str	r3, [r0, #24]
 80054c0:	4619      	mov	r1, r3
 80054c2:	2208      	movs	r2, #8
 80054c4:	305c      	adds	r0, #92	; 0x5c
 80054c6:	f7ff fddb 	bl	8005080 <memset>
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <std+0x38>)
 80054cc:	6224      	str	r4, [r4, #32]
 80054ce:	6263      	str	r3, [r4, #36]	; 0x24
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <std+0x3c>)
 80054d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <std+0x40>)
 80054d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <std+0x44>)
 80054da:	6323      	str	r3, [r4, #48]	; 0x30
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop
 80054e0:	08005f19 	.word	0x08005f19
 80054e4:	08005f3b 	.word	0x08005f3b
 80054e8:	08005f73 	.word	0x08005f73
 80054ec:	08005f97 	.word	0x08005f97

080054f0 <_cleanup_r>:
 80054f0:	4901      	ldr	r1, [pc, #4]	; (80054f8 <_cleanup_r+0x8>)
 80054f2:	f000 b8af 	b.w	8005654 <_fwalk_reent>
 80054f6:	bf00      	nop
 80054f8:	08005431 	.word	0x08005431

080054fc <__sfmoreglue>:
 80054fc:	2268      	movs	r2, #104	; 0x68
 80054fe:	b570      	push	{r4, r5, r6, lr}
 8005500:	1e4d      	subs	r5, r1, #1
 8005502:	4355      	muls	r5, r2
 8005504:	460e      	mov	r6, r1
 8005506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800550a:	f000 f993 	bl	8005834 <_malloc_r>
 800550e:	4604      	mov	r4, r0
 8005510:	b140      	cbz	r0, 8005524 <__sfmoreglue+0x28>
 8005512:	2100      	movs	r1, #0
 8005514:	e9c0 1600 	strd	r1, r6, [r0]
 8005518:	300c      	adds	r0, #12
 800551a:	60a0      	str	r0, [r4, #8]
 800551c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005520:	f7ff fdae 	bl	8005080 <memset>
 8005524:	4620      	mov	r0, r4
 8005526:	bd70      	pop	{r4, r5, r6, pc}

08005528 <__sfp_lock_acquire>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__sfp_lock_acquire+0x8>)
 800552a:	f000 b8b3 	b.w	8005694 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	2000025d 	.word	0x2000025d

08005534 <__sfp_lock_release>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__sfp_lock_release+0x8>)
 8005536:	f000 b8ae 	b.w	8005696 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	2000025d 	.word	0x2000025d

08005540 <__sinit_lock_acquire>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__sinit_lock_acquire+0x8>)
 8005542:	f000 b8a7 	b.w	8005694 <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	2000025e 	.word	0x2000025e

0800554c <__sinit_lock_release>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__sinit_lock_release+0x8>)
 800554e:	f000 b8a2 	b.w	8005696 <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	2000025e 	.word	0x2000025e

08005558 <__sinit>:
 8005558:	b510      	push	{r4, lr}
 800555a:	4604      	mov	r4, r0
 800555c:	f7ff fff0 	bl	8005540 <__sinit_lock_acquire>
 8005560:	69a3      	ldr	r3, [r4, #24]
 8005562:	b11b      	cbz	r3, 800556c <__sinit+0x14>
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f7ff bff0 	b.w	800554c <__sinit_lock_release>
 800556c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005570:	6523      	str	r3, [r4, #80]	; 0x50
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <__sinit+0x68>)
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <__sinit+0x6c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	62a2      	str	r2, [r4, #40]	; 0x28
 800557a:	42a3      	cmp	r3, r4
 800557c:	bf08      	it	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	4620      	mov	r0, r4
 8005582:	bf08      	it	eq
 8005584:	61a3      	streq	r3, [r4, #24]
 8005586:	f000 f81f 	bl	80055c8 <__sfp>
 800558a:	6060      	str	r0, [r4, #4]
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f81b 	bl	80055c8 <__sfp>
 8005592:	60a0      	str	r0, [r4, #8]
 8005594:	4620      	mov	r0, r4
 8005596:	f000 f817 	bl	80055c8 <__sfp>
 800559a:	2200      	movs	r2, #0
 800559c:	2104      	movs	r1, #4
 800559e:	60e0      	str	r0, [r4, #12]
 80055a0:	6860      	ldr	r0, [r4, #4]
 80055a2:	f7ff ff81 	bl	80054a8 <std>
 80055a6:	2201      	movs	r2, #1
 80055a8:	2109      	movs	r1, #9
 80055aa:	68a0      	ldr	r0, [r4, #8]
 80055ac:	f7ff ff7c 	bl	80054a8 <std>
 80055b0:	2202      	movs	r2, #2
 80055b2:	2112      	movs	r1, #18
 80055b4:	68e0      	ldr	r0, [r4, #12]
 80055b6:	f7ff ff77 	bl	80054a8 <std>
 80055ba:	2301      	movs	r3, #1
 80055bc:	61a3      	str	r3, [r4, #24]
 80055be:	e7d1      	b.n	8005564 <__sinit+0xc>
 80055c0:	080061a8 	.word	0x080061a8
 80055c4:	080054f1 	.word	0x080054f1

080055c8 <__sfp>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	4607      	mov	r7, r0
 80055cc:	f7ff ffac 	bl	8005528 <__sfp_lock_acquire>
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <__sfp+0x84>)
 80055d2:	681e      	ldr	r6, [r3, #0]
 80055d4:	69b3      	ldr	r3, [r6, #24]
 80055d6:	b913      	cbnz	r3, 80055de <__sfp+0x16>
 80055d8:	4630      	mov	r0, r6
 80055da:	f7ff ffbd 	bl	8005558 <__sinit>
 80055de:	3648      	adds	r6, #72	; 0x48
 80055e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	d503      	bpl.n	80055f0 <__sfp+0x28>
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	b30b      	cbz	r3, 8005630 <__sfp+0x68>
 80055ec:	6836      	ldr	r6, [r6, #0]
 80055ee:	e7f7      	b.n	80055e0 <__sfp+0x18>
 80055f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055f4:	b9d5      	cbnz	r5, 800562c <__sfp+0x64>
 80055f6:	4b16      	ldr	r3, [pc, #88]	; (8005650 <__sfp+0x88>)
 80055f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055fc:	60e3      	str	r3, [r4, #12]
 80055fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005600:	f000 f847 	bl	8005692 <__retarget_lock_init_recursive>
 8005604:	f7ff ff96 	bl	8005534 <__sfp_lock_release>
 8005608:	2208      	movs	r2, #8
 800560a:	4629      	mov	r1, r5
 800560c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005614:	6025      	str	r5, [r4, #0]
 8005616:	61a5      	str	r5, [r4, #24]
 8005618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800561c:	f7ff fd30 	bl	8005080 <memset>
 8005620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005624:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005628:	4620      	mov	r0, r4
 800562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800562c:	3468      	adds	r4, #104	; 0x68
 800562e:	e7d9      	b.n	80055e4 <__sfp+0x1c>
 8005630:	2104      	movs	r1, #4
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff ff62 	bl	80054fc <__sfmoreglue>
 8005638:	4604      	mov	r4, r0
 800563a:	6030      	str	r0, [r6, #0]
 800563c:	2800      	cmp	r0, #0
 800563e:	d1d5      	bne.n	80055ec <__sfp+0x24>
 8005640:	f7ff ff78 	bl	8005534 <__sfp_lock_release>
 8005644:	230c      	movs	r3, #12
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	e7ee      	b.n	8005628 <__sfp+0x60>
 800564a:	bf00      	nop
 800564c:	080061a8 	.word	0x080061a8
 8005650:	ffff0001 	.word	0xffff0001

08005654 <_fwalk_reent>:
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005658:	4606      	mov	r6, r0
 800565a:	4688      	mov	r8, r1
 800565c:	2700      	movs	r7, #0
 800565e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005662:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005666:	f1b9 0901 	subs.w	r9, r9, #1
 800566a:	d505      	bpl.n	8005678 <_fwalk_reent+0x24>
 800566c:	6824      	ldr	r4, [r4, #0]
 800566e:	2c00      	cmp	r4, #0
 8005670:	d1f7      	bne.n	8005662 <_fwalk_reent+0xe>
 8005672:	4638      	mov	r0, r7
 8005674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005678:	89ab      	ldrh	r3, [r5, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d907      	bls.n	800568e <_fwalk_reent+0x3a>
 800567e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005682:	3301      	adds	r3, #1
 8005684:	d003      	beq.n	800568e <_fwalk_reent+0x3a>
 8005686:	4629      	mov	r1, r5
 8005688:	4630      	mov	r0, r6
 800568a:	47c0      	blx	r8
 800568c:	4307      	orrs	r7, r0
 800568e:	3568      	adds	r5, #104	; 0x68
 8005690:	e7e9      	b.n	8005666 <_fwalk_reent+0x12>

08005692 <__retarget_lock_init_recursive>:
 8005692:	4770      	bx	lr

08005694 <__retarget_lock_acquire_recursive>:
 8005694:	4770      	bx	lr

08005696 <__retarget_lock_release_recursive>:
 8005696:	4770      	bx	lr

08005698 <__swhatbuf_r>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	460e      	mov	r6, r1
 800569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a0:	4614      	mov	r4, r2
 80056a2:	2900      	cmp	r1, #0
 80056a4:	461d      	mov	r5, r3
 80056a6:	b096      	sub	sp, #88	; 0x58
 80056a8:	da08      	bge.n	80056bc <__swhatbuf_r+0x24>
 80056aa:	2200      	movs	r2, #0
 80056ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	061a      	lsls	r2, r3, #24
 80056b4:	d410      	bmi.n	80056d8 <__swhatbuf_r+0x40>
 80056b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ba:	e00e      	b.n	80056da <__swhatbuf_r+0x42>
 80056bc:	466a      	mov	r2, sp
 80056be:	f000 fc91 	bl	8005fe4 <_fstat_r>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	dbf1      	blt.n	80056aa <__swhatbuf_r+0x12>
 80056c6:	9a01      	ldr	r2, [sp, #4]
 80056c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056d0:	425a      	negs	r2, r3
 80056d2:	415a      	adcs	r2, r3
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	e7ee      	b.n	80056b6 <__swhatbuf_r+0x1e>
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	2000      	movs	r0, #0
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	b016      	add	sp, #88	; 0x58
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056e4 <__smakebuf_r>:
 80056e4:	898b      	ldrh	r3, [r1, #12]
 80056e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056e8:	079d      	lsls	r5, r3, #30
 80056ea:	4606      	mov	r6, r0
 80056ec:	460c      	mov	r4, r1
 80056ee:	d507      	bpl.n	8005700 <__smakebuf_r+0x1c>
 80056f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	6123      	str	r3, [r4, #16]
 80056f8:	2301      	movs	r3, #1
 80056fa:	6163      	str	r3, [r4, #20]
 80056fc:	b002      	add	sp, #8
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	466a      	mov	r2, sp
 8005702:	ab01      	add	r3, sp, #4
 8005704:	f7ff ffc8 	bl	8005698 <__swhatbuf_r>
 8005708:	9900      	ldr	r1, [sp, #0]
 800570a:	4605      	mov	r5, r0
 800570c:	4630      	mov	r0, r6
 800570e:	f000 f891 	bl	8005834 <_malloc_r>
 8005712:	b948      	cbnz	r0, 8005728 <__smakebuf_r+0x44>
 8005714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005718:	059a      	lsls	r2, r3, #22
 800571a:	d4ef      	bmi.n	80056fc <__smakebuf_r+0x18>
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	e7e3      	b.n	80056f0 <__smakebuf_r+0xc>
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <__smakebuf_r+0x7c>)
 800572a:	62b3      	str	r3, [r6, #40]	; 0x28
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	6020      	str	r0, [r4, #0]
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	9b00      	ldr	r3, [sp, #0]
 8005738:	6120      	str	r0, [r4, #16]
 800573a:	6163      	str	r3, [r4, #20]
 800573c:	9b01      	ldr	r3, [sp, #4]
 800573e:	b15b      	cbz	r3, 8005758 <__smakebuf_r+0x74>
 8005740:	4630      	mov	r0, r6
 8005742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005746:	f000 fc5f 	bl	8006008 <_isatty_r>
 800574a:	b128      	cbz	r0, 8005758 <__smakebuf_r+0x74>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	89a0      	ldrh	r0, [r4, #12]
 800575a:	4305      	orrs	r5, r0
 800575c:	81a5      	strh	r5, [r4, #12]
 800575e:	e7cd      	b.n	80056fc <__smakebuf_r+0x18>
 8005760:	080054f1 	.word	0x080054f1

08005764 <_free_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4605      	mov	r5, r0
 8005768:	2900      	cmp	r1, #0
 800576a:	d040      	beq.n	80057ee <_free_r+0x8a>
 800576c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005770:	1f0c      	subs	r4, r1, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfb8      	it	lt
 8005776:	18e4      	addlt	r4, r4, r3
 8005778:	f000 fc76 	bl	8006068 <__malloc_lock>
 800577c:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <_free_r+0x8c>)
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	b933      	cbnz	r3, 8005790 <_free_r+0x2c>
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	6014      	str	r4, [r2, #0]
 8005786:	4628      	mov	r0, r5
 8005788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800578c:	f000 bc72 	b.w	8006074 <__malloc_unlock>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d908      	bls.n	80057a6 <_free_r+0x42>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	e7ed      	b.n	8005782 <_free_r+0x1e>
 80057a6:	461a      	mov	r2, r3
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b10b      	cbz	r3, 80057b0 <_free_r+0x4c>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x42>
 80057b0:	6811      	ldr	r1, [r2, #0]
 80057b2:	1850      	adds	r0, r2, r1
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x6c>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	4401      	add	r1, r0
 80057bc:	1850      	adds	r0, r2, r1
 80057be:	4283      	cmp	r3, r0
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	d1e0      	bne.n	8005786 <_free_r+0x22>
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4401      	add	r1, r0
 80057ca:	6011      	str	r1, [r2, #0]
 80057cc:	6053      	str	r3, [r2, #4]
 80057ce:	e7da      	b.n	8005786 <_free_r+0x22>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x74>
 80057d2:	230c      	movs	r3, #12
 80057d4:	602b      	str	r3, [r5, #0]
 80057d6:	e7d6      	b.n	8005786 <_free_r+0x22>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	1821      	adds	r1, r4, r0
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf01      	itttt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	1809      	addeq	r1, r1, r0
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6054      	str	r4, [r2, #4]
 80057ec:	e7cb      	b.n	8005786 <_free_r+0x22>
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000260 	.word	0x20000260

080057f4 <sbrk_aligned>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	4e0e      	ldr	r6, [pc, #56]	; (8005830 <sbrk_aligned+0x3c>)
 80057f8:	460c      	mov	r4, r1
 80057fa:	6831      	ldr	r1, [r6, #0]
 80057fc:	4605      	mov	r5, r0
 80057fe:	b911      	cbnz	r1, 8005806 <sbrk_aligned+0x12>
 8005800:	f000 fb7a 	bl	8005ef8 <_sbrk_r>
 8005804:	6030      	str	r0, [r6, #0]
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 fb75 	bl	8005ef8 <_sbrk_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	d00a      	beq.n	8005828 <sbrk_aligned+0x34>
 8005812:	1cc4      	adds	r4, r0, #3
 8005814:	f024 0403 	bic.w	r4, r4, #3
 8005818:	42a0      	cmp	r0, r4
 800581a:	d007      	beq.n	800582c <sbrk_aligned+0x38>
 800581c:	1a21      	subs	r1, r4, r0
 800581e:	4628      	mov	r0, r5
 8005820:	f000 fb6a 	bl	8005ef8 <_sbrk_r>
 8005824:	3001      	adds	r0, #1
 8005826:	d101      	bne.n	800582c <sbrk_aligned+0x38>
 8005828:	f04f 34ff 	mov.w	r4, #4294967295
 800582c:	4620      	mov	r0, r4
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	20000264 	.word	0x20000264

08005834 <_malloc_r>:
 8005834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005838:	1ccd      	adds	r5, r1, #3
 800583a:	f025 0503 	bic.w	r5, r5, #3
 800583e:	3508      	adds	r5, #8
 8005840:	2d0c      	cmp	r5, #12
 8005842:	bf38      	it	cc
 8005844:	250c      	movcc	r5, #12
 8005846:	2d00      	cmp	r5, #0
 8005848:	4607      	mov	r7, r0
 800584a:	db01      	blt.n	8005850 <_malloc_r+0x1c>
 800584c:	42a9      	cmp	r1, r5
 800584e:	d905      	bls.n	800585c <_malloc_r+0x28>
 8005850:	230c      	movs	r3, #12
 8005852:	2600      	movs	r6, #0
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4630      	mov	r0, r6
 8005858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585c:	4e2e      	ldr	r6, [pc, #184]	; (8005918 <_malloc_r+0xe4>)
 800585e:	f000 fc03 	bl	8006068 <__malloc_lock>
 8005862:	6833      	ldr	r3, [r6, #0]
 8005864:	461c      	mov	r4, r3
 8005866:	bb34      	cbnz	r4, 80058b6 <_malloc_r+0x82>
 8005868:	4629      	mov	r1, r5
 800586a:	4638      	mov	r0, r7
 800586c:	f7ff ffc2 	bl	80057f4 <sbrk_aligned>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	4604      	mov	r4, r0
 8005874:	d14d      	bne.n	8005912 <_malloc_r+0xde>
 8005876:	6834      	ldr	r4, [r6, #0]
 8005878:	4626      	mov	r6, r4
 800587a:	2e00      	cmp	r6, #0
 800587c:	d140      	bne.n	8005900 <_malloc_r+0xcc>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	4631      	mov	r1, r6
 8005882:	4638      	mov	r0, r7
 8005884:	eb04 0803 	add.w	r8, r4, r3
 8005888:	f000 fb36 	bl	8005ef8 <_sbrk_r>
 800588c:	4580      	cmp	r8, r0
 800588e:	d13a      	bne.n	8005906 <_malloc_r+0xd2>
 8005890:	6821      	ldr	r1, [r4, #0]
 8005892:	3503      	adds	r5, #3
 8005894:	1a6d      	subs	r5, r5, r1
 8005896:	f025 0503 	bic.w	r5, r5, #3
 800589a:	3508      	adds	r5, #8
 800589c:	2d0c      	cmp	r5, #12
 800589e:	bf38      	it	cc
 80058a0:	250c      	movcc	r5, #12
 80058a2:	4638      	mov	r0, r7
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7ff ffa5 	bl	80057f4 <sbrk_aligned>
 80058aa:	3001      	adds	r0, #1
 80058ac:	d02b      	beq.n	8005906 <_malloc_r+0xd2>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	442b      	add	r3, r5
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	e00e      	b.n	80058d4 <_malloc_r+0xa0>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	1b52      	subs	r2, r2, r5
 80058ba:	d41e      	bmi.n	80058fa <_malloc_r+0xc6>
 80058bc:	2a0b      	cmp	r2, #11
 80058be:	d916      	bls.n	80058ee <_malloc_r+0xba>
 80058c0:	1961      	adds	r1, r4, r5
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	6025      	str	r5, [r4, #0]
 80058c6:	bf18      	it	ne
 80058c8:	6059      	strne	r1, [r3, #4]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	bf08      	it	eq
 80058ce:	6031      	streq	r1, [r6, #0]
 80058d0:	5162      	str	r2, [r4, r5]
 80058d2:	604b      	str	r3, [r1, #4]
 80058d4:	4638      	mov	r0, r7
 80058d6:	f104 060b 	add.w	r6, r4, #11
 80058da:	f000 fbcb 	bl	8006074 <__malloc_unlock>
 80058de:	f026 0607 	bic.w	r6, r6, #7
 80058e2:	1d23      	adds	r3, r4, #4
 80058e4:	1af2      	subs	r2, r6, r3
 80058e6:	d0b6      	beq.n	8005856 <_malloc_r+0x22>
 80058e8:	1b9b      	subs	r3, r3, r6
 80058ea:	50a3      	str	r3, [r4, r2]
 80058ec:	e7b3      	b.n	8005856 <_malloc_r+0x22>
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	bf0c      	ite	eq
 80058f4:	6032      	streq	r2, [r6, #0]
 80058f6:	605a      	strne	r2, [r3, #4]
 80058f8:	e7ec      	b.n	80058d4 <_malloc_r+0xa0>
 80058fa:	4623      	mov	r3, r4
 80058fc:	6864      	ldr	r4, [r4, #4]
 80058fe:	e7b2      	b.n	8005866 <_malloc_r+0x32>
 8005900:	4634      	mov	r4, r6
 8005902:	6876      	ldr	r6, [r6, #4]
 8005904:	e7b9      	b.n	800587a <_malloc_r+0x46>
 8005906:	230c      	movs	r3, #12
 8005908:	4638      	mov	r0, r7
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	f000 fbb2 	bl	8006074 <__malloc_unlock>
 8005910:	e7a1      	b.n	8005856 <_malloc_r+0x22>
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	e7de      	b.n	80058d4 <_malloc_r+0xa0>
 8005916:	bf00      	nop
 8005918:	20000260 	.word	0x20000260

0800591c <__sfputc_r>:
 800591c:	6893      	ldr	r3, [r2, #8]
 800591e:	b410      	push	{r4}
 8005920:	3b01      	subs	r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	6093      	str	r3, [r2, #8]
 8005926:	da07      	bge.n	8005938 <__sfputc_r+0x1c>
 8005928:	6994      	ldr	r4, [r2, #24]
 800592a:	42a3      	cmp	r3, r4
 800592c:	db01      	blt.n	8005932 <__sfputc_r+0x16>
 800592e:	290a      	cmp	r1, #10
 8005930:	d102      	bne.n	8005938 <__sfputc_r+0x1c>
 8005932:	bc10      	pop	{r4}
 8005934:	f7ff bc3a 	b.w	80051ac <__swbuf_r>
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	1c58      	adds	r0, r3, #1
 800593c:	6010      	str	r0, [r2, #0]
 800593e:	7019      	strb	r1, [r3, #0]
 8005940:	4608      	mov	r0, r1
 8005942:	bc10      	pop	{r4}
 8005944:	4770      	bx	lr

08005946 <__sfputs_r>:
 8005946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005948:	4606      	mov	r6, r0
 800594a:	460f      	mov	r7, r1
 800594c:	4614      	mov	r4, r2
 800594e:	18d5      	adds	r5, r2, r3
 8005950:	42ac      	cmp	r4, r5
 8005952:	d101      	bne.n	8005958 <__sfputs_r+0x12>
 8005954:	2000      	movs	r0, #0
 8005956:	e007      	b.n	8005968 <__sfputs_r+0x22>
 8005958:	463a      	mov	r2, r7
 800595a:	4630      	mov	r0, r6
 800595c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005960:	f7ff ffdc 	bl	800591c <__sfputc_r>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d1f3      	bne.n	8005950 <__sfputs_r+0xa>
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800596c <_vfiprintf_r>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	460d      	mov	r5, r1
 8005972:	4614      	mov	r4, r2
 8005974:	4698      	mov	r8, r3
 8005976:	4606      	mov	r6, r0
 8005978:	b09d      	sub	sp, #116	; 0x74
 800597a:	b118      	cbz	r0, 8005984 <_vfiprintf_r+0x18>
 800597c:	6983      	ldr	r3, [r0, #24]
 800597e:	b90b      	cbnz	r3, 8005984 <_vfiprintf_r+0x18>
 8005980:	f7ff fdea 	bl	8005558 <__sinit>
 8005984:	4b89      	ldr	r3, [pc, #548]	; (8005bac <_vfiprintf_r+0x240>)
 8005986:	429d      	cmp	r5, r3
 8005988:	d11b      	bne.n	80059c2 <_vfiprintf_r+0x56>
 800598a:	6875      	ldr	r5, [r6, #4]
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff fe7b 	bl	8005694 <__retarget_lock_acquire_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	d501      	bpl.n	80059a8 <_vfiprintf_r+0x3c>
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	b9eb      	cbnz	r3, 80059e4 <_vfiprintf_r+0x78>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff fc50 	bl	8005250 <__swsetup_r>
 80059b0:	b1c0      	cbz	r0, 80059e4 <_vfiprintf_r+0x78>
 80059b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b4:	07dc      	lsls	r4, r3, #31
 80059b6:	d50e      	bpl.n	80059d6 <_vfiprintf_r+0x6a>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	4b7b      	ldr	r3, [pc, #492]	; (8005bb0 <_vfiprintf_r+0x244>)
 80059c4:	429d      	cmp	r5, r3
 80059c6:	d101      	bne.n	80059cc <_vfiprintf_r+0x60>
 80059c8:	68b5      	ldr	r5, [r6, #8]
 80059ca:	e7df      	b.n	800598c <_vfiprintf_r+0x20>
 80059cc:	4b79      	ldr	r3, [pc, #484]	; (8005bb4 <_vfiprintf_r+0x248>)
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf08      	it	eq
 80059d2:	68f5      	ldreq	r5, [r6, #12]
 80059d4:	e7da      	b.n	800598c <_vfiprintf_r+0x20>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	0598      	lsls	r0, r3, #22
 80059da:	d4ed      	bmi.n	80059b8 <_vfiprintf_r+0x4c>
 80059dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059de:	f7ff fe5a 	bl	8005696 <__retarget_lock_release_recursive>
 80059e2:	e7e9      	b.n	80059b8 <_vfiprintf_r+0x4c>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	2320      	movs	r3, #32
 80059ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ee:	2330      	movs	r3, #48	; 0x30
 80059f0:	f04f 0901 	mov.w	r9, #1
 80059f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005bb8 <_vfiprintf_r+0x24c>
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a00:	4623      	mov	r3, r4
 8005a02:	469a      	mov	sl, r3
 8005a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a08:	b10a      	cbz	r2, 8005a0e <_vfiprintf_r+0xa2>
 8005a0a:	2a25      	cmp	r2, #37	; 0x25
 8005a0c:	d1f9      	bne.n	8005a02 <_vfiprintf_r+0x96>
 8005a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a12:	d00b      	beq.n	8005a2c <_vfiprintf_r+0xc0>
 8005a14:	465b      	mov	r3, fp
 8005a16:	4622      	mov	r2, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ff93 	bl	8005946 <__sfputs_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	f000 80aa 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a28:	445a      	add	r2, fp
 8005a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a2 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a40:	f10a 0a01 	add.w	sl, sl, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2205      	movs	r2, #5
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4858      	ldr	r0, [pc, #352]	; (8005bb8 <_vfiprintf_r+0x24c>)
 8005a58:	f000 faf8 	bl	800604c <memchr>
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	b9d8      	cbnz	r0, 8005a98 <_vfiprintf_r+0x12c>
 8005a60:	06d1      	lsls	r1, r2, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2320      	movmi	r3, #32
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6a:	0713      	lsls	r3, r2, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	232b      	movmi	r3, #43	; 0x2b
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7a:	d015      	beq.n	8005aa8 <_vfiprintf_r+0x13c>
 8005a7c:	4654      	mov	r4, sl
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f04f 0c0a 	mov.w	ip, #10
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4621      	mov	r1, r4
 8005a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8c:	3b30      	subs	r3, #48	; 0x30
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d94e      	bls.n	8005b30 <_vfiprintf_r+0x1c4>
 8005a92:	b1b0      	cbz	r0, 8005ac2 <_vfiprintf_r+0x156>
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	e014      	b.n	8005ac2 <_vfiprintf_r+0x156>
 8005a98:	eba0 0308 	sub.w	r3, r0, r8
 8005a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	46a2      	mov	sl, r4
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	e7d2      	b.n	8005a4e <_vfiprintf_r+0xe2>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbb      	ittet	lt
 8005ab4:	425b      	neglt	r3, r3
 8005ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aba:	9307      	strge	r3, [sp, #28]
 8005abc:	9307      	strlt	r3, [sp, #28]
 8005abe:	bfb8      	it	lt
 8005ac0:	9204      	strlt	r2, [sp, #16]
 8005ac2:	7823      	ldrb	r3, [r4, #0]
 8005ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac6:	d10c      	bne.n	8005ae2 <_vfiprintf_r+0x176>
 8005ac8:	7863      	ldrb	r3, [r4, #1]
 8005aca:	2b2a      	cmp	r3, #42	; 0x2a
 8005acc:	d135      	bne.n	8005b3a <_vfiprintf_r+0x1ce>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	3402      	adds	r4, #2
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfb8      	it	lt
 8005adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005bbc <_vfiprintf_r+0x250>
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	4650      	mov	r0, sl
 8005aea:	7821      	ldrb	r1, [r4, #0]
 8005aec:	f000 faae 	bl	800604c <memchr>
 8005af0:	b140      	cbz	r0, 8005b04 <_vfiprintf_r+0x198>
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	eba0 000a 	sub.w	r0, r0, sl
 8005af8:	fa03 f000 	lsl.w	r0, r3, r0
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	3401      	adds	r4, #1
 8005b00:	4303      	orrs	r3, r0
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b08:	2206      	movs	r2, #6
 8005b0a:	482d      	ldr	r0, [pc, #180]	; (8005bc0 <_vfiprintf_r+0x254>)
 8005b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b10:	f000 fa9c 	bl	800604c <memchr>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d03f      	beq.n	8005b98 <_vfiprintf_r+0x22c>
 8005b18:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <_vfiprintf_r+0x258>)
 8005b1a:	bb1b      	cbnz	r3, 8005b64 <_vfiprintf_r+0x1f8>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	3307      	adds	r3, #7
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	3308      	adds	r3, #8
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	443b      	add	r3, r7
 8005b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2e:	e767      	b.n	8005a00 <_vfiprintf_r+0x94>
 8005b30:	460c      	mov	r4, r1
 8005b32:	2001      	movs	r0, #1
 8005b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b38:	e7a5      	b.n	8005a86 <_vfiprintf_r+0x11a>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f04f 0c0a 	mov.w	ip, #10
 8005b40:	4619      	mov	r1, r3
 8005b42:	3401      	adds	r4, #1
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4c:	3a30      	subs	r2, #48	; 0x30
 8005b4e:	2a09      	cmp	r2, #9
 8005b50:	d903      	bls.n	8005b5a <_vfiprintf_r+0x1ee>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0c5      	beq.n	8005ae2 <_vfiprintf_r+0x176>
 8005b56:	9105      	str	r1, [sp, #20]
 8005b58:	e7c3      	b.n	8005ae2 <_vfiprintf_r+0x176>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b62:	e7f0      	b.n	8005b46 <_vfiprintf_r+0x1da>
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <_vfiprintf_r+0x25c>)
 8005b6e:	a904      	add	r1, sp, #16
 8005b70:	f3af 8000 	nop.w
 8005b74:	4607      	mov	r7, r0
 8005b76:	1c78      	adds	r0, r7, #1
 8005b78:	d1d6      	bne.n	8005b28 <_vfiprintf_r+0x1bc>
 8005b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	d405      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b80:	89ab      	ldrh	r3, [r5, #12]
 8005b82:	059a      	lsls	r2, r3, #22
 8005b84:	d402      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b88:	f7ff fd85 	bl	8005696 <__retarget_lock_release_recursive>
 8005b8c:	89ab      	ldrh	r3, [r5, #12]
 8005b8e:	065b      	lsls	r3, r3, #25
 8005b90:	f53f af12 	bmi.w	80059b8 <_vfiprintf_r+0x4c>
 8005b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b96:	e711      	b.n	80059bc <_vfiprintf_r+0x50>
 8005b98:	ab03      	add	r3, sp, #12
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <_vfiprintf_r+0x25c>)
 8005ba2:	a904      	add	r1, sp, #16
 8005ba4:	f000 f882 	bl	8005cac <_printf_i>
 8005ba8:	e7e4      	b.n	8005b74 <_vfiprintf_r+0x208>
 8005baa:	bf00      	nop
 8005bac:	080061cc 	.word	0x080061cc
 8005bb0:	080061ec 	.word	0x080061ec
 8005bb4:	080061ac 	.word	0x080061ac
 8005bb8:	0800620c 	.word	0x0800620c
 8005bbc:	08006212 	.word	0x08006212
 8005bc0:	08006216 	.word	0x08006216
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	08005947 	.word	0x08005947

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	4607      	mov	r7, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	bfb8      	it	lt
 8005bde:	4613      	movlt	r3, r2
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be6:	460c      	mov	r4, r1
 8005be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc28      	bgt.n	8005c66 <_printf_common+0x9a>
 8005c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c18:	1e13      	subs	r3, r2, #0
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d42d      	bmi.n	8005c80 <_printf_common+0xb4>
 8005c24:	4649      	mov	r1, r9
 8005c26:	4638      	mov	r0, r7
 8005c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d020      	beq.n	8005c74 <_printf_common+0xa8>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	68e5      	ldr	r5, [r4, #12]
 8005c36:	f003 0306 	and.w	r3, r3, #6
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	bf18      	it	ne
 8005c3e:	2500      	movne	r5, #0
 8005c40:	6832      	ldr	r2, [r6, #0]
 8005c42:	f04f 0600 	mov.w	r6, #0
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	bf08      	it	eq
 8005c4a:	1aad      	subeq	r5, r5, r2
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	bf08      	it	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	4293      	cmp	r3, r2
 8005c56:	bfc4      	itt	gt
 8005c58:	1a9b      	subgt	r3, r3, r2
 8005c5a:	18ed      	addgt	r5, r5, r3
 8005c5c:	341a      	adds	r4, #26
 8005c5e:	42b5      	cmp	r5, r6
 8005c60:	d11a      	bne.n	8005c98 <_printf_common+0xcc>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e008      	b.n	8005c78 <_printf_common+0xac>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4652      	mov	r2, sl
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d103      	bne.n	8005c7c <_printf_common+0xb0>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	e7c4      	b.n	8005c0a <_printf_common+0x3e>
 8005c80:	2030      	movs	r0, #48	; 0x30
 8005c82:	18e1      	adds	r1, r4, r3
 8005c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c8e:	4422      	add	r2, r4
 8005c90:	3302      	adds	r3, #2
 8005c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c96:	e7c5      	b.n	8005c24 <_printf_common+0x58>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d0e6      	beq.n	8005c74 <_printf_common+0xa8>
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7d9      	b.n	8005c5e <_printf_common+0x92>
	...

08005cac <_printf_i>:
 8005cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	7e0f      	ldrb	r7, [r1, #24]
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	2f78      	cmp	r7, #120	; 0x78
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	469a      	mov	sl, r3
 8005cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc2:	d807      	bhi.n	8005cd4 <_printf_i+0x28>
 8005cc4:	2f62      	cmp	r7, #98	; 0x62
 8005cc6:	d80a      	bhi.n	8005cde <_printf_i+0x32>
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	f000 80d9 	beq.w	8005e80 <_printf_i+0x1d4>
 8005cce:	2f58      	cmp	r7, #88	; 0x58
 8005cd0:	f000 80a4 	beq.w	8005e1c <_printf_i+0x170>
 8005cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cdc:	e03a      	b.n	8005d54 <_printf_i+0xa8>
 8005cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce2:	2b15      	cmp	r3, #21
 8005ce4:	d8f6      	bhi.n	8005cd4 <_printf_i+0x28>
 8005ce6:	a101      	add	r1, pc, #4	; (adr r1, 8005cec <_printf_i+0x40>)
 8005ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005cd5 	.word	0x08005cd5
 8005cf8:	08005cd5 	.word	0x08005cd5
 8005cfc:	08005cd5 	.word	0x08005cd5
 8005d00:	08005cd5 	.word	0x08005cd5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005cd5 	.word	0x08005cd5
 8005d0c:	08005cd5 	.word	0x08005cd5
 8005d10:	08005cd5 	.word	0x08005cd5
 8005d14:	08005cd5 	.word	0x08005cd5
 8005d18:	08005e67 	.word	0x08005e67
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005e49 	.word	0x08005e49
 8005d24:	08005cd5 	.word	0x08005cd5
 8005d28:	08005cd5 	.word	0x08005cd5
 8005d2c:	08005e89 	.word	0x08005e89
 8005d30:	08005cd5 	.word	0x08005cd5
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005cd5 	.word	0x08005cd5
 8005d3c:	08005cd5 	.word	0x08005cd5
 8005d40:	08005e51 	.word	0x08005e51
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0a4      	b.n	8005ea2 <_printf_i+0x1f6>
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	6829      	ldr	r1, [r5, #0]
 8005d5c:	0606      	lsls	r6, r0, #24
 8005d5e:	f101 0304 	add.w	r3, r1, #4
 8005d62:	d50a      	bpl.n	8005d7a <_printf_i+0xce>
 8005d64:	680e      	ldr	r6, [r1, #0]
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	da03      	bge.n	8005d74 <_printf_i+0xc8>
 8005d6c:	232d      	movs	r3, #45	; 0x2d
 8005d6e:	4276      	negs	r6, r6
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	230a      	movs	r3, #10
 8005d76:	485e      	ldr	r0, [pc, #376]	; (8005ef0 <_printf_i+0x244>)
 8005d78:	e019      	b.n	8005dae <_printf_i+0x102>
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	bf18      	it	ne
 8005d84:	b236      	sxthne	r6, r6
 8005d86:	e7ef      	b.n	8005d68 <_printf_i+0xbc>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	0601      	lsls	r1, r0, #24
 8005d92:	d501      	bpl.n	8005d98 <_printf_i+0xec>
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <_printf_i+0xf2>
 8005d98:	0646      	lsls	r6, r0, #25
 8005d9a:	d5fb      	bpl.n	8005d94 <_printf_i+0xe8>
 8005d9c:	881e      	ldrh	r6, [r3, #0]
 8005d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8005da0:	bf0c      	ite	eq
 8005da2:	2308      	moveq	r3, #8
 8005da4:	230a      	movne	r3, #10
 8005da6:	4852      	ldr	r0, [pc, #328]	; (8005ef0 <_printf_i+0x244>)
 8005da8:	2100      	movs	r1, #0
 8005daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dae:	6865      	ldr	r5, [r4, #4]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	bfa8      	it	ge
 8005db4:	6821      	ldrge	r1, [r4, #0]
 8005db6:	60a5      	str	r5, [r4, #8]
 8005db8:	bfa4      	itt	ge
 8005dba:	f021 0104 	bicge.w	r1, r1, #4
 8005dbe:	6021      	strge	r1, [r4, #0]
 8005dc0:	b90e      	cbnz	r6, 8005dc6 <_printf_i+0x11a>
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	d04d      	beq.n	8005e62 <_printf_i+0x1b6>
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dcc:	fb03 6711 	mls	r7, r3, r1, r6
 8005dd0:	5dc7      	ldrb	r7, [r0, r7]
 8005dd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd6:	4637      	mov	r7, r6
 8005dd8:	42bb      	cmp	r3, r7
 8005dda:	460e      	mov	r6, r1
 8005ddc:	d9f4      	bls.n	8005dc8 <_printf_i+0x11c>
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d10b      	bne.n	8005dfa <_printf_i+0x14e>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	07de      	lsls	r6, r3, #31
 8005de6:	d508      	bpl.n	8005dfa <_printf_i+0x14e>
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	6861      	ldr	r1, [r4, #4]
 8005dec:	4299      	cmp	r1, r3
 8005dee:	bfde      	ittt	le
 8005df0:	2330      	movle	r3, #48	; 0x30
 8005df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dfa:	1b52      	subs	r2, r2, r5
 8005dfc:	6122      	str	r2, [r4, #16]
 8005dfe:	464b      	mov	r3, r9
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f8cd a000 	str.w	sl, [sp]
 8005e08:	aa03      	add	r2, sp, #12
 8005e0a:	f7ff fedf 	bl	8005bcc <_printf_common>
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d14c      	bne.n	8005eac <_printf_i+0x200>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	b004      	add	sp, #16
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	4834      	ldr	r0, [pc, #208]	; (8005ef0 <_printf_i+0x244>)
 8005e1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e22:	6829      	ldr	r1, [r5, #0]
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e2a:	6029      	str	r1, [r5, #0]
 8005e2c:	061d      	lsls	r5, r3, #24
 8005e2e:	d514      	bpl.n	8005e5a <_printf_i+0x1ae>
 8005e30:	07df      	lsls	r7, r3, #31
 8005e32:	bf44      	itt	mi
 8005e34:	f043 0320 	orrmi.w	r3, r3, #32
 8005e38:	6023      	strmi	r3, [r4, #0]
 8005e3a:	b91e      	cbnz	r6, 8005e44 <_printf_i+0x198>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	f023 0320 	bic.w	r3, r3, #32
 8005e42:	6023      	str	r3, [r4, #0]
 8005e44:	2310      	movs	r3, #16
 8005e46:	e7af      	b.n	8005da8 <_printf_i+0xfc>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f043 0320 	orr.w	r3, r3, #32
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	2378      	movs	r3, #120	; 0x78
 8005e52:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <_printf_i+0x248>)
 8005e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e58:	e7e3      	b.n	8005e22 <_printf_i+0x176>
 8005e5a:	0659      	lsls	r1, r3, #25
 8005e5c:	bf48      	it	mi
 8005e5e:	b2b6      	uxthmi	r6, r6
 8005e60:	e7e6      	b.n	8005e30 <_printf_i+0x184>
 8005e62:	4615      	mov	r5, r2
 8005e64:	e7bb      	b.n	8005dde <_printf_i+0x132>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	6826      	ldr	r6, [r4, #0]
 8005e6a:	1d18      	adds	r0, r3, #4
 8005e6c:	6961      	ldr	r1, [r4, #20]
 8005e6e:	6028      	str	r0, [r5, #0]
 8005e70:	0635      	lsls	r5, r6, #24
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	d501      	bpl.n	8005e7a <_printf_i+0x1ce>
 8005e76:	6019      	str	r1, [r3, #0]
 8005e78:	e002      	b.n	8005e80 <_printf_i+0x1d4>
 8005e7a:	0670      	lsls	r0, r6, #25
 8005e7c:	d5fb      	bpl.n	8005e76 <_printf_i+0x1ca>
 8005e7e:	8019      	strh	r1, [r3, #0]
 8005e80:	2300      	movs	r3, #0
 8005e82:	4615      	mov	r5, r2
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	e7ba      	b.n	8005dfe <_printf_i+0x152>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	602a      	str	r2, [r5, #0]
 8005e90:	681d      	ldr	r5, [r3, #0]
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f8d9 	bl	800604c <memchr>
 8005e9a:	b108      	cbz	r0, 8005ea0 <_printf_i+0x1f4>
 8005e9c:	1b40      	subs	r0, r0, r5
 8005e9e:	6060      	str	r0, [r4, #4]
 8005ea0:	6863      	ldr	r3, [r4, #4]
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eaa:	e7a8      	b.n	8005dfe <_printf_i+0x152>
 8005eac:	462a      	mov	r2, r5
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	47d0      	blx	sl
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0ab      	beq.n	8005e12 <_printf_i+0x166>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	079b      	lsls	r3, r3, #30
 8005ebe:	d413      	bmi.n	8005ee8 <_printf_i+0x23c>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e7a4      	b.n	8005e16 <_printf_i+0x16a>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4632      	mov	r2, r6
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	47d0      	blx	sl
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d09b      	beq.n	8005e12 <_printf_i+0x166>
 8005eda:	3501      	adds	r5, #1
 8005edc:	68e3      	ldr	r3, [r4, #12]
 8005ede:	9903      	ldr	r1, [sp, #12]
 8005ee0:	1a5b      	subs	r3, r3, r1
 8005ee2:	42ab      	cmp	r3, r5
 8005ee4:	dcf2      	bgt.n	8005ecc <_printf_i+0x220>
 8005ee6:	e7eb      	b.n	8005ec0 <_printf_i+0x214>
 8005ee8:	2500      	movs	r5, #0
 8005eea:	f104 0619 	add.w	r6, r4, #25
 8005eee:	e7f5      	b.n	8005edc <_printf_i+0x230>
 8005ef0:	0800621d 	.word	0x0800621d
 8005ef4:	0800622e 	.word	0x0800622e

08005ef8 <_sbrk_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	2300      	movs	r3, #0
 8005efc:	4d05      	ldr	r5, [pc, #20]	; (8005f14 <_sbrk_r+0x1c>)
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fc ff3e 	bl	8002d84 <_sbrk>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_sbrk_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_sbrk_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000268 	.word	0x20000268

08005f18 <__sread>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	f000 f8ae 	bl	8006080 <_read_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	bfab      	itete	ge
 8005f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f2c:	181b      	addge	r3, r3, r0
 8005f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f32:	bfac      	ite	ge
 8005f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f36:	81a3      	strhlt	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__swrite>:
 8005f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	461f      	mov	r7, r3
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	4605      	mov	r5, r0
 8005f44:	05db      	lsls	r3, r3, #23
 8005f46:	460c      	mov	r4, r1
 8005f48:	4616      	mov	r6, r2
 8005f4a:	d505      	bpl.n	8005f58 <__swrite+0x1e>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f868 	bl	8006028 <_lseek_r>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	4628      	mov	r0, r5
 8005f64:	463b      	mov	r3, r7
 8005f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	f000 b817 	b.w	8005fa0 <_write_r>

08005f72 <__sseek>:
 8005f72:	b510      	push	{r4, lr}
 8005f74:	460c      	mov	r4, r1
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 f855 	bl	8006028 <_lseek_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	bf15      	itete	ne
 8005f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f8e:	81a3      	strheq	r3, [r4, #12]
 8005f90:	bf18      	it	ne
 8005f92:	81a3      	strhne	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__sclose>:
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 b813 	b.w	8005fc4 <_close_r>
	...

08005fa0 <_write_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4d05      	ldr	r5, [pc, #20]	; (8005fc0 <_write_r+0x20>)
 8005fac:	602a      	str	r2, [r5, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f7fc fe9b 	bl	8002cea <_write>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_write_r+0x1e>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_write_r+0x1e>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000268 	.word	0x20000268

08005fc4 <_close_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	4d05      	ldr	r5, [pc, #20]	; (8005fe0 <_close_r+0x1c>)
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fc fea7 	bl	8002d22 <_close>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_close_r+0x1a>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_close_r+0x1a>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000268 	.word	0x20000268

08005fe4 <_fstat_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_fstat_r+0x20>)
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	f7fc fea1 	bl	8002d38 <_fstat>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d102      	bne.n	8006000 <_fstat_r+0x1c>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	b103      	cbz	r3, 8006000 <_fstat_r+0x1c>
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	20000268 	.word	0x20000268

08006008 <_isatty_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	2300      	movs	r3, #0
 800600c:	4d05      	ldr	r5, [pc, #20]	; (8006024 <_isatty_r+0x1c>)
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fc fe9f 	bl	8002d56 <_isatty>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_isatty_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_isatty_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000268 	.word	0x20000268

08006028 <_lseek_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	2200      	movs	r2, #0
 8006032:	4d05      	ldr	r5, [pc, #20]	; (8006048 <_lseek_r+0x20>)
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fc fe97 	bl	8002d6a <_lseek>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_lseek_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_lseek_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000268 	.word	0x20000268

0800604c <memchr>:
 800604c:	4603      	mov	r3, r0
 800604e:	b510      	push	{r4, lr}
 8006050:	b2c9      	uxtb	r1, r1
 8006052:	4402      	add	r2, r0
 8006054:	4293      	cmp	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	d101      	bne.n	800605e <memchr+0x12>
 800605a:	2000      	movs	r0, #0
 800605c:	e003      	b.n	8006066 <memchr+0x1a>
 800605e:	7804      	ldrb	r4, [r0, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	428c      	cmp	r4, r1
 8006064:	d1f6      	bne.n	8006054 <memchr+0x8>
 8006066:	bd10      	pop	{r4, pc}

08006068 <__malloc_lock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_lock+0x8>)
 800606a:	f7ff bb13 	b.w	8005694 <__retarget_lock_acquire_recursive>
 800606e:	bf00      	nop
 8006070:	2000025c 	.word	0x2000025c

08006074 <__malloc_unlock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_unlock+0x8>)
 8006076:	f7ff bb0e 	b.w	8005696 <__retarget_lock_release_recursive>
 800607a:	bf00      	nop
 800607c:	2000025c 	.word	0x2000025c

08006080 <_read_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	2200      	movs	r2, #0
 800608a:	4d05      	ldr	r5, [pc, #20]	; (80060a0 <_read_r+0x20>)
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f7fc fe0e 	bl	8002cb0 <_read>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_read_r+0x1e>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_read_r+0x1e>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20000268 	.word	0x20000268

080060a4 <_init>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr

080060b0 <_fini>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr
